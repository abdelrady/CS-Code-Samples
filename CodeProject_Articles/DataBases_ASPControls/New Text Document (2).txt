 Design Patterns - Singleton 
 
 Print 
 Email 
  
 
 
 
 Submitted on: 6/12/2004 4:31:32 PM
By: Cuan Brown  
Level: Intermediate
User Rating: Unrated
Compatibility:C#

Users have accessed this article 4175 times.
   
 
  
     This code defines a thread safe singleton class structure. What is a singleton you ask? A singleton is a class that only ever has one instance and provides a global way of accessing it. This sample ensure only one instance of the classs in invoked even on multithreaded, multi-cpu systems.

--------------------------------------------------------------------------------
 
 
  
 
Terms of Agreement:   
By using this article, you agree to the following terms...   
1) You may use this article in your own programs (and may compile it into a program and distribute it in compiled format for languages that allow it) freely and with no charge.   
2) You MAY NOT redistribute this article (for example to a web site) without written permission from the original author. Failure to do so is a violation of copyright laws.   
3) You may link to this article from another website, but ONLY if it is not wrapped in a frame. 
4) You will abide by any additional copyright restrictions which the author may have placed in the article or article's description.  
>public sealed class Singleton { // Private Fields private static Singleton instance; private static object synclock = new object(); // Empty Constructor, forces the usage of the static Method. private Singleton() {} // Method to create a new instance of singleton object. public static Singleton Instance { get { if( instance == null ) { // lock to make sure only one thread can access this code block lock (syncRoot) { if( instance == null ) { instance = new Singleton(); } } } return instance; } } } 
 
 
 