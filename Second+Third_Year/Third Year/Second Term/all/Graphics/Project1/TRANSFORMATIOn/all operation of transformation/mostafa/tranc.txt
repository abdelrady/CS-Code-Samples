#include<windows.h>
#include<math.h>
LRESULT CALLBACK WndProc(HWND,UINT,WPARAM,LPARAM);
static char gsz[]="My window";
static HINSTANCE gh=NULL;
struct matrix
{
	int mat[3][3];
};
struct vector
{
	double vect[3];
};
int WINAPI WinMain(HINSTANCE hIn,HINSTANCE hPrevIn,LPSTR lpCmdLine
				   ,int nCmdShow)
{

	WNDCLASSEX WndClass;
	HWND hwnd;
	MSG Msg;
	gh=hIn;
	WndClass.cbSize=sizeof(WNDCLASSEX);
	WndClass.style=NULL;
	WndClass.lpfnWndProc=WndProc;
	WndClass.cbClsExtra=0;
	WndClass.cbWndExtra=0;
	WndClass.hInstance=gh;
	WndClass.hIcon=LoadIcon(NULL,IDI_APPLICATION);
	WndClass.hCursor=LoadCursor(NULL,IDC_ARROW);
	WndClass.hbrBackground=(HBRUSH)(COLOR_WINDOW+1);
	WndClass.lpszMenuName=NULL;
	WndClass.lpszClassName=gsz;
	WndClass.hIconSm=LoadIcon(NULL,IDI_APPLICATION);
	if(!RegisterClassEx(&WndClass))
	{
		MessageBox(0,"Window regester fail","Error!",MB_ICONSTOP|MB_OK);
		return 0;
	}
	hwnd=CreateWindowEx(WS_EX_STATICEDGE,gsz,"Window tittle",
	WS_OVERLAPPEDWINDOW,CW_USEDEFAULT,CW_USEDEFAULT,320,240,
	NULL,NULL,gh,NULL);
	if(hwnd==NULL)
		{
		MessageBox(0,"Window creation fail","Error!",MB_ICONSTOP|MB_OK);
		return 0;
	}
	ShowWindow(hwnd,nCmdShow);
	UpdateWindow(hwnd);
	while(GetMessage(&Msg,NULL,0,0))
	{
		TranslateMessage(&Msg);
		DispatchMessage(&Msg);

	}
	return Msg.wParam;
}
///////////////
BOOL bButton1=FALSE;
BOOL bButton2=FALSE;
BOOL flag1=FALSE;
BOOL flag2=FALSE;
int x1,y3,x2,y2;	
int x11,y31,x22,y22;	
/////////////////////
vector mul(matrix m,vector v)
{
	vector matr;
	matr.vect[0]=0;
	matr.vect[1]=0;
	matr.vect[2]=0;
	for(int i=0;i<3;i++)
		for(int j=0;j<3;j++)
			matr.vect[i]+=m.mat[i][j]*v.vect[j];

		return matr;
}
 vector trancsit(int dx,int dy,int x,int y)
{
	matrix matr;
	vector rmatr;
	vector vecto;
	matr.mat[0][0]=1;
	matr.mat[0][1]=0;
	matr.mat[0][2]=dx;
	matr.mat[1][0]=0;
	matr.mat[1][1]=1;
	matr.mat[1][2]=dy;
	matr.mat[2][0]=0;
	matr.mat[2][1]=0;
	matr.mat[2][2]=1;
	////////////////
	vecto.vect[0]=x;
	vecto.vect[1]=y;
	vecto.vect[2]=1;
	rmatr=mul(matr,vecto);
		return rmatr;
}
vector tranc(int sit,int x,int y)
{
	matrix matr;
	vector rmatr;
	vector vecto;
	matr.mat[0][0]=cos(sit);
	matr.mat[0][1]=-sin(sit);
	matr.mat[0][2]=0;
	matr.mat[1][0]=sin(sit);
	matr.mat[1][1]=cos(sit);
	matr.mat[1][2]=0;
	matr.mat[2][0]=0;
	matr.mat[2][1]=0;
	matr.mat[2][2]=1;
	////////////////
	vecto.vect[0]=x;
	vecto.vect[1]=y;
	vecto.vect[2]=1;
	rmatr=mul(matr,vecto);
		return rmatr;
}
////////////////////////////////////
void  draw(HDC hdc)
{
	float m=(y2-y3)/(x2-x1);
	int dx,dy,ds,dt,d;
	int x=x1;
	int y=y3;
	dx=x2-x1;
	dy=y3-y2;
	if(-1*m<1)
	{
	
	dt=2*(dy-dx);
	 ds=2*dy;
	 d=2*dy-dx;
	 SetPixel(hdc,x,y,RGB(255,0,0));
	 while(x<=x2)
	{
		x++;
		if(d<0)
			d=d+ds;
		else
		{
			y--;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,0,0));
	}
	}
	else
		if((-1*m)>=1)
		{
			
			dt=2*(dx-dy);
			ds=2*dx;
			d=2*dx-dy;
		

	SetPixel(hdc,x,y,RGB(255,0,0));
    while(y>y2)
	{
		y--;
		if(d<=0)
			d=d+ds;
		else
		{
			x++;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,0,0));
	}
		}
}


void  draw1(HDC hdc)
{
	float m=(y2-y3)/(x2-x1);
	int dx,dy,ds,dt,d;
	dx=x2-x1;
	dy=y2-y3;
	int x=x1;
	int y=y3;
	if(m<1)
	{
	 dt=2*(dy-dx);
	 ds=2*dy;
	 d=2*dy-dx;
	 while(x<x2)
	{
		x++;
		if(d<0)
			d=d+ds;
		else
		{
			y++;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,0,0));
	}
	}
	else
		if(m>=1)
		{
			
			dt=2*(dx-dy);
			ds=2*dx;
			d=2*dx-dy;
		

	SetPixel(hdc,x,y,RGB(255,0,0));
    while(y<y2)
	{
		y++;
		if(d<0)
			d=d+ds;
		else
		{
			x++;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,0,0));
	}
		}
}
void line1(HDC hdc)
{
	int x=x1;
	int y=y3;
	int m;
	while(x<x2)
	{
		x++;
		m=(y2-y)/(x2-x);
		y=m*x+y2;
		SetPixel(hdc,x,y,RGB(255,0,0));
	}

		
}
void transfer(HDC hdc,int x1,int x2,int y3,int y2)
{
	vector matrix1;
	int tx=100;
	int ty=100;
	int transx;
	int transy;
	if(flag1)
	{
		float m=(y2-y3)/(x2-x1);
	int dx,dy,ds,dt,d;
	dx=x2-x1;
	dy=y2-y3;
	int x=x1;
	int y=y3;
	if(m<1)
	{
	 dt=2*(dy-dx);
	 ds=2*dy;
	 d=2*dy-dx;
	 while(x<x2)
	{
		x++;
		if(d<0)
			d=d+ds;
		else
		{
			y++;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
	//transy=y+ty;
	matrix1=trancsit(20,30,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
	}
	}
	else
		if(m>=1)
		{
			
			dt=2*(dx-dy);
			ds=2*dx;
			d=2*dx-dy;
		

	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
	//transy=y+ty;
	//SetPixel(hdc,transx,transy,RGB(255,0,0));
	matrix1 =trancsit(20,30,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
    while(y<y2)
	{
		y++;
		if(d<0)
			d=d+ds;
		else
		{
			x++;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
	//transy=y+ty;
	//SetPixel(hdc,transx,transy,RGB(255,0,0));
	matrix1 =trancsit(20,30,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
	}
		}
		flag1=false;
	}
	else if(flag2)
	{
		float m=(y2-y3)/(x2-x1);
	int dx,dy,ds,dt,d;
	int x=x1;
	int y=y3;
	dx=x2-x1;
	dy=y3-y2;
	if(-1*m<1)
	{
	
	dt=2*(dy-dx);
	 ds=2*dy;
	 d=2*dy-dx;

	 SetPixel(hdc,x,y,RGB(255,255,255));
	// transx=x+tx;
	//transy=y+ty;
	//SetPixel(hdc,transx,transy,RGB(255,0,0));
	 matrix1 =trancsit(20,30,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
	 while(x<=x2)
	{
		x++;
		if(d<0)
			d=d+ds;
		else
		{
			y--;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
//	transy=y+ty;
	//SetPixel(hdc,transx,transy,RGB(255,0,0));
	
	matrix1 =trancsit(20,30,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
	}
	}
	else
		if((-1*m)>=1)
		{
			
			dt=2*(dx-dy);
			ds=2*dx;
			d=2*dx-dy;
		

	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
//	transy=y+ty;
//	SetPixel(hdc,transx,transy,RGB(255,0,0));
	matrix1=trancsit(20,30,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
    while(y>y2)
	{
		y--;
		if(d<=0)
			d=d+ds;
		else
		{
			x++;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
//	transy=y+ty;
//	SetPixel(hdc,transx,transy,RGB(255,0,0));
	matrix1 =trancsit(20,30,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
	}

		}
		flag2=false;
	}
}
///////////////////////////////
void transfert(HDC hdc,int x1,int x2,int y3,int y2)
{
	vector matrix1;
	int tx=100;
	int ty=100;
	int transx;
	int transy;
	if(flag1)
	{
		float m=(y2-y3)/(x2-x1);
	int dx,dy,ds,dt,d;
	dx=x2-x1;
	dy=y2-y3;
	int x=x1;
	int y=y3;
	if(m<1)
	{
	 dt=2*(dy-dx);
	 ds=2*dy;
	 d=2*dy-dx;
	 while(x<x2)
	{
		x++;
		if(d<0)
			d=d+ds;
		else
		{
			y++;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
	//transy=y+ty;
	matrix1=tranc(60,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
	}
	}
	else
		if(m>=1)
		{
			
			dt=2*(dx-dy);
			ds=2*dx;
			d=2*dx-dy;
		

	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
	//transy=y+ty;
	//SetPixel(hdc,transx,transy,RGB(255,0,0));
		matrix1=tranc(60,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
    while(y<y2)
	{
		y++;
		if(d<0)
			d=d+ds;
		else
		{
			x++;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
	//transy=y+ty;
	//SetPixel(hdc,transx,transy,RGB(255,0,0));
		matrix1=tranc(60,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
	}
		}
		flag1=false;
	}
	else if(flag2)
	{
		float m=(y2-y3)/(x2-x1);
	int dx,dy,ds,dt,d;
	int x=x1;
	int y=y3;
	dx=x2-x1;
	dy=y3-y2;
	if(-1*m<1)
	{
	
	dt=2*(dy-dx);
	 ds=2*dy;
	 d=2*dy-dx;

	 SetPixel(hdc,x,y,RGB(255,255,255));
	// transx=x+tx;
	//transy=y+ty;
	//SetPixel(hdc,transx,transy,RGB(255,0,0));
	 	matrix1=tranc(60,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
	 while(x<=x2)
	{
		x++;
		if(d<0)
			d=d+ds;
		else
		{
			y--;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
//	transy=y+ty;
	//SetPixel(hdc,transx,transy,RGB(255,0,0));
	
		matrix1=tranc(60,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
	}
	}
	else
		if((-1*m)>=1)
		{
			
			dt=2*(dx-dy);
			ds=2*dx;
			d=2*dx-dy;
		

	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
//	transy=y+ty;
//	SetPixel(hdc,transx,transy,RGB(255,0,0));
	matrix1=tranc(60,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
    while(y>y2)
	{
		y--;
		if(d<=0)
			d=d+ds;
		else
		{
			x++;
			d=d+dt;
		}
	SetPixel(hdc,x,y,RGB(255,255,255));
	//transx=x+tx;
//	transy=y+ty;
//	SetPixel(hdc,transx,transy,RGB(255,0,0));
	matrix1=tranc(60,x,y);
	SetPixel(hdc,matrix1.vect[0],matrix1.vect[1],RGB(255,0,0));
	}

		}
		flag2=false;
	}
}
////////////////////////////////////////

////////////////////////

LRESULT CALLBACK WndProc(HWND hwnd,UINT Message,WPARAM wParam
						 ,LPARAM lParam)
{
	HDC hdc=GetDC(hwnd);
	int temp,temp1;
	   switch(Message)
	{
	case WM_CLOSE:
			DestroyWindow(hwnd);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	case WM_LBUTTONDOWN:
		if(!bButton1)
		{
			bButton1=TRUE;
			x1=LOWORD(lParam);
			y3=HIWORD(lParam);
		    
		}
		else
		{
			bButton1=FALSE;
			x2=LOWORD(lParam);
			y2=HIWORD(lParam);
		if(x1>x2&&y3>y2)
			{temp=x1; x1=x2; x2=temp;  
			temp1=y3; y3=y2; y2=temp1;
			}
		else if(x1>x2&&y3<y2)
			{temp=x1; x1=x2; x2=temp;  
			temp1=y3; y3=y2; y2=temp1;
			}
		x11=x1;  y31=y3;  x22=x2;  y22=y2;
			if((x1<x2&&y3<y2))
			{
			draw1(hdc);
			flag1=true;
			}
			else
				if((x1<x2&&y3>y2))
				{
					draw(hdc);
					flag2=true;
				}
		}
		break;
	case WM_RBUTTONDOWN:
		transfer(hdc,x11,x22,y31,y22);
		transfert(hdc,x11,x22,y31,y22);
		/*if(!bButton1)
		{
			bButton1=TRUE;
			x1=LOWORD(lParam);
			y3=HIWORD(lParam);
		    
		}
		else
		{
			bButton1=FALSE;
			x2=LOWORD(lParam);
			y2=HIWORD(lParam);
			
		}*/break;

	   	default:
		return DefWindowProc(hwnd,Message,wParam,lParam);

	}
	return 0;
}
