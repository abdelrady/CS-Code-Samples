%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 16 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Helvetica-Bold FMFONTDEFINE
2 0 /Times-BoldItalic FMFONTDEFINE
3 0 /Times-Roman FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 1 /Symbol FMFONTDEFINE
7 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(/Frame/CS182/midtermsol.doc) 72 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Page 1) 508.31 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 13 Q
(CS182 Solutions to Midterm) 219.68 711.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Fall T) 261.32 695.33 T
(erm 1994) 294.31 695.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Question 1) 72 659.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(General Comments) 72 632.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.2 (First, you must remember to negate your goal before proving by refutation.  Also, if you have all) 72 606 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.18 (nested existentials \050but no universals\051 the existentials skolemize into) 72 592 B
4 F
0.3 0.18 (constants) 419.59 592 B
3 F
0.3 0.18 (.  There are no) 466.59 592 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.24 (dependencies between them.  In our particular question, that there is some fudge in the world does) 72 578 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.04 (not depend on the fact that there is also ice-cream in the world.  In contrast, suppose we had the) 72 564 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.25 (sentence \322Everybody is eating some ice cream.\323) 72 550 B
0.3 0.25 (Here, we have a direct mapping between a) 324.12 550 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(person and the person\325) 72 536 T
(s ice cream:) 180.31 536 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 11 Q
(\050) 90 512 T
6 12 Q
(") 96.6 512 T
5 11 Q
(x\050) 105.16 512 T
6 12 Q
($) 118.36 512 T
5 11 Q
(y\050person\050x\051) 124.94 512 T
6 12 Q
(\336) 204.14 512 T
5 11 Q
( \050eats\050x,y\051) 215.99 512 T
6 12 Q
(\331) 295.19 512 T
5 11 Q
( IceCream\050y\051\051\051\051\051) 302.42 512 T
3 12 Q
(becomes) 414.62 512 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(\330) 90 498 T
5 11 Q
(person\050x\051) 98.56 498 T
6 12 Q
(\332) 164.56 498 T
5 11 Q
( \050eats\050x,f\050x\051\051) 171.79 498 T
6 12 Q
(\331) 270.79 498 T
5 11 Q
( IceCream\050f\050x\051\051\051) 278.03 498 T
3 12 Q
(becomes) 390.23 498 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(\330) 90 484 T
5 11 Q
(person\050x\051) 98.56 484 T
6 12 Q
(\332) 164.56 484 T
5 11 Q
( eats\050x,f\050x\051\051) 171.79 484 T
3 12 Q
(and) 264.19 484 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(\330) 90 470 T
5 11 Q
(person\050x\051) 98.56 470 T
6 12 Q
(\332) 164.56 470 T
5 11 Q
( IceCream\050f\050x\051\051) 171.79 470 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 13 Q
(Solution) 72 444.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
(1) 72 419.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(\330) 99 419.33 T
5 F
(IceCream\050x) 106.13 419.33 T
5 8 Q
(1) 166.13 416.83 T
5 10 Q
(\051) 170.93 419.33 T
6 F
(\332) 182.93 419.33 T
5 F
( Food\050x) 188.96 419.33 T
5 8 Q
(1) 230.96 416.83 T
5 10 Q
(\051) 235.76 419.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2) 72 407.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(\330) 99 407.33 T
5 F
(Fudge\050x) 106.13 407.33 T
5 8 Q
(2) 148.13 404.83 T
5 10 Q
(\051) 152.93 407.33 T
6 F
(\332) 164.93 407.33 T
5 F
( Food\050x) 170.96 407.33 T
5 8 Q
(2) 212.96 404.83 T
5 10 Q
(\051) 217.76 407.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(3) 72 395.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(\330) 99 395.33 T
5 F
(Food\050x) 106.13 395.33 T
5 8 Q
(3) 142.13 392.83 T
5 10 Q
(\051) 146.93 395.33 T
6 F
(\332) 158.93 395.33 T
(\330) 170.96 395.33 T
5 F
(Food\050x) 178.09 395.33 T
5 8 Q
(4) 214.09 392.83 T
5 10 Q
(\051) 218.89 395.33 T
6 F
(\332) 230.89 395.33 T
(\330) 242.92 395.33 T
5 F
(Cold\050x) 250.05 395.33 T
5 8 Q
(3) 286.05 392.83 T
5 10 Q
(\051) 290.85 395.33 T
6 F
(\332) 302.85 395.33 T
(\330) 314.88 395.33 T
5 F
(Merge\050x) 322.01 395.33 T
5 8 Q
(3) 364.01 392.83 T
5 10 Q
(,x) 368.81 395.33 T
5 8 Q
(4) 380.81 392.83 T
5 10 Q
(\051) 385.61 395.33 T
6 F
(\332) 397.61 395.33 T
5 F
( Cold\050x) 403.64 395.33 T
5 8 Q
(4) 445.64 392.83 T
5 10 Q
(\051) 450.44 395.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(4) 72 383.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(IceCream\050$c) 99 383.33 T
5 8 Q
(1) 165 380.83 T
5 10 Q
(\051) 169.8 383.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(5) 72 371.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Fudge\050$c) 99 371.33 T
5 8 Q
(2) 147 368.83 T
5 10 Q
(\051) 151.8 371.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 72 359.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Cold\050$c) 99 359.33 T
5 8 Q
(1) 141 356.83 T
5 10 Q
(\051) 145.8 359.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(7) 72 347.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Merge\050$c) 99 347.33 T
5 8 Q
(1) 147 344.83 T
5 10 Q
(,$c) 151.8 347.33 T
5 8 Q
(2) 169.8 344.83 T
5 10 Q
(\051) 174.6 347.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050) 72 335.33 T
6 F
($) 78 335.33 T
5 F
(z\050Fudge\050z\051) 83.49 335.33 T
6 F
(\331) 149.49 335.33 T
5 F
( Cold\050z\051\051\051.) 155.52 335.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(Negate:) 72 316.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
(8) 72 304.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(\330) 99 304.33 T
5 F
(Fudge\050z\051) 106.13 304.33 T
6 F
(\332) 160.13 304.33 T
(\330) 172.16 304.33 T
5 F
(Cold\050z\051) 179.29 304.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(Proof:) 72 285.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 10 Q
(9  <8 and 5: z/$c) 72 273.33 T
5 8 Q
(2) 174 270.83 T
5 10 Q
(>) 178.8 273.33 T
6 F
(\330) 196.8 273.33 T
5 F
(Cold\050$c) 203.93 273.33 T
5 8 Q
(2) 245.93 270.83 T
5 10 Q
(\051) 250.73 273.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10 <9 and 3: x) 72 261.33 T
5 8 Q
(4) 156 258.83 T
5 10 Q
(/$c) 160.8 261.33 T
5 8 Q
(2) 178.8 258.83 T
5 10 Q
(>) 183.6 261.33 T
6 F
(\330) 201.6 261.33 T
5 F
(Food\050x) 208.73 261.33 T
5 8 Q
(3) 244.73 258.83 T
5 10 Q
(\051) 249.53 261.33 T
6 F
(\332) 261.53 261.33 T
(\330) 273.56 261.33 T
5 F
(Food\050$c) 280.69 261.33 T
5 8 Q
(2) 322.69 258.83 T
5 10 Q
(\051) 327.49 261.33 T
6 F
(\332) 339.49 261.33 T
(\330) 351.52 261.33 T
5 F
(Cold\050x) 358.65 261.33 T
5 8 Q
(3) 394.65 258.83 T
5 10 Q
(\051) 399.45 261.33 T
6 F
(\332) 411.45 261.33 T
(\330) 423.48 261.33 T
5 F
(Merge\050x) 430.61 261.33 T
5 8 Q
(3) 472.61 258.83 T
5 10 Q
(,$c) 477.41 261.33 T
5 8 Q
(2) 495.41 258.83 T
5 10 Q
(\051) 500.21 261.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(11 <10 and 6: x) 72 249.33 T
5 8 Q
(3) 162 246.83 T
5 10 Q
(/$c) 166.8 249.33 T
5 8 Q
(1) 184.8 246.83 T
5 10 Q
(>) 189.6 249.33 T
6 F
(\330) 201.6 249.33 T
5 F
(Food\050$c) 208.73 249.33 T
5 8 Q
(1) 250.73 246.83 T
5 10 Q
(\051) 255.53 249.33 T
6 F
(\332) 267.53 249.33 T
(\330) 279.56 249.33 T
5 F
(Food\050$c) 286.69 249.33 T
5 8 Q
(2) 328.69 246.83 T
5 10 Q
(\051) 333.49 249.33 T
6 F
(\332) 345.49 249.33 T
(\330) 357.52 249.33 T
5 F
(Merge\050$c) 364.65 249.33 T
5 8 Q
(1) 412.65 246.83 T
5 10 Q
(,$c) 417.45 249.33 T
5 8 Q
(2) 435.45 246.83 T
5 10 Q
(\051) 440.25 249.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(12 <5 and 2:  x) 72 237.33 T
5 8 Q
(2) 162 234.83 T
5 10 Q
(/$c) 166.8 237.33 T
5 8 Q
(1) 184.8 234.83 T
5 10 Q
(>  Food\050$c) 189.6 237.33 T
5 8 Q
(1) 249.6 234.83 T
5 10 Q
(\051) 254.4 237.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(13 <4 and 1:  x) 72 225.33 T
5 8 Q
(1) 162 222.83 T
5 10 Q
(/$c) 166.8 225.33 T
5 8 Q
(2) 184.8 222.83 T
5 10 Q
(>  Food\050$c) 189.6 225.33 T
5 8 Q
(2) 249.6 222.83 T
5 10 Q
(\051) 254.4 225.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(14 <11 and 12>) 72 213.33 T
6 F
(\330) 168 213.33 T
5 F
(Food\050$c) 175.13 213.33 T
5 8 Q
(2) 217.13 210.83 T
5 10 Q
(\051) 221.93 213.33 T
6 F
(\332) 233.93 213.33 T
(\330) 245.96 213.33 T
5 F
(Merge\050$c) 253.09 213.33 T
5 8 Q
(1) 301.09 210.83 T
5 10 Q
(,$c) 305.89 213.33 T
5 8 Q
(2) 323.89 210.83 T
5 10 Q
(\051) 328.69 213.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15 <14 and 13>) 72 201.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(\330) 168 201.33 T
5 F
(Merge\050$c) 175.13 201.33 T
5 8 Q
(1) 223.13 198.83 T
5 10 Q
(,$c) 227.93 201.33 T
5 8 Q
(2) 245.93 198.83 T
5 10 Q
(\051) 250.73 201.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(16 <7 and 15>) 72 189.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(  $F) 150 189.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(/Frame/CS182/midtermsol.doc) 72 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Page 2) 508.31 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 13 Q
(Question 2) 72 711.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(General Comments) 72 684.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.01 (Determinism refers to whether or not the next state of the environment is completely determined) 72 658 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.1 (by the current state and the actions selected by the agent.  Can an agent assume its actions will) 72 644 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(have their desired/intended ef) 72 630 T
(fect, or could something happen that would cause the action to fail?) 214.08 630 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (The dynamic vs. static dimension refers to whether the environment can change while the agent is) 72 606 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(thinking.) 72 592 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (Episodic environments are ones in which each action of the agent is self-contained; you can think) 72 568 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.27 (of this as the agent acts, is done, and then we all applaud \050or don\325) 72 554 P
-0.27 (t\051.  At a lar) 381.97 554 P
-0.27 (ge enough granularity) 433 554 P
-0.27 (,) 537 554 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.19 (anything could be made to look episodic \050even life\051, but then the distinction is not useful for agent) 72 540 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(design.  So, we take it to mean small units.) 72 526 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 13 Q
(Solution) 72 500.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
110.62 471.92 72 471.92 2 L
V
0.64 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Part \050a\051) 72 473.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(Give a full answer for Category A, the classi\336cations for Category B, and explain some points:) 72 447 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 423 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(X-ray Agent.) 108 423 T
3 F
(  Accessible, deterministic, static \050or semidynamic\051, episodic) 174.65 423 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(Pulmonary Specialist.) 108 399 T
3 F
(  Not accessible, not deterministic, dynamic, not episodic) 220.01 399 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 375 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(Accessibility) 108 375 T
(.) 171.34 375 T
3 F
(  All the information the X-ray agent needs is in the image; patient records,) 174.34 375 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tests, etc. are partial.) 108 361 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 337 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
-0.31 (Determinism.) 108 337 P
3 F
-0.31 (  The X-ray agent\325) 177.65 337 P
-0.31 (s classi\336cation is the only act.  T) 264.4 337 P
-0.31 (ests may be af) 418.09 337 P
-0.31 (fected by a) 485.27 337 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(range of things outside the PS\325) 108 323 T
(s control.) 255 323 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 299 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
-0.38 (Static.) 108 299 P
3 F
-0.38 (  The X-ray doesn\325) 140.33 299 P
-0.38 (t move while the agent thinks; the patient\325) 229.22 299 P
-0.38 (s condition can worsen) 428.21 299 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(while the doctor thinks.) 108 285 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 261 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(Episodic.) 108 261 T
3 F
(  One X-ray at a time; PS diagnosis requires complex sequence of actions.) 155.02 261 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Explanations for those categories on which there was some confusion:) 72 237 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 213 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(Deterministic.) 108 213 T
3 F
(  The X-ray agent works in a deterministic environment; no other agent is) 180.31 213 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(around to af) 108 199 T
(fect the ef) 165.77 199 T
(fect of its classi\336cation actions.) 213.53 199 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 175 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(Episodic.) 108 175 T
3 F
(  The X-ray agent has only one action: after perceiving an X-ray it classi\336es it) 155.02 175 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.18 ([sends of) 108 161 P
-0.18 (f to some bin]; if it gets it right we applaud; if not, we debug. A patient treatment) 151.26 161 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is too lar) 108 147 T
(ge a grain size to consider as a single episode; the PS must engage in a complex) 149.78 147 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sequence of actions to do the diagnosis and we don\325) 108 133 T
(t evaluate until all of these are done.) 357.41 133 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 2
%%Page: "3" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(/Frame/CS182/midtermsol.doc) 72 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Page 3) 508.31 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\245) 90 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
-0.14 (Swimming pool cleaner) 108 712 P
-0.14 (.) 226.62 712 P
3 F
-0.14 (  Accessible, dynamic, not episodic; depending on interpretation) 229.62 712 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the problem could see as deterministic or not, so both answers were accepted with a) 108 698 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(reasonable explanation.) 108 684 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(Shopping agent.) 108 660 T
3 F
(  Not accessible, not deterministic, dynamic, not episodic) 190.69 660 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Explanation of categories for which there was some confusion:) 72 636 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 612 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(Deterministic.) 108 612 T
3 F
(  If the explanation made a case for nothing interfering with the ef) 180.31 612 T
(fects of) 496.36 612 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(an action then we gave credit for a yes answer) 108 598 T
(, even though this is typically not the case) 329.11 598 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for these agents.) 108 584 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 90 560 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
(Episodic.) 108 560 T
3 F
(  SPC has to continually act if cleaning pool and so is not episodic. Shopping,) 155.02 560 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(like the pulmonary specialist, requires a complex sequence of actions.) 108 546 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111.35 518.92 72 518.92 2 L
V
0.64 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(Part \050b\051) 72 520.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 12 Q
0.3 0.19 (Category A.) 72 494 B
3 F
0.3 0.19 (  The Pulmonary Specialist is more dif) 136.41 494 B
0.3 0.19 (f) 330.64 494 B
0.3 0.19 (icult. Because of the complex and partial) 334.17 494 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.31 (information that must be reasoned with, and uncertainty in the environment, more complex) 72 480 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.03 (representations are needed; goal-based and utility-based reasoning mechanisms are required and) 72 466 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the search space is more complex.) 72 452 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
0.3 0.41 (Category B.) 72 428 B
3 F
0.3 0.41 (  The Shopping Agent is more dif) 138.16 428 B
0.3 0.41 (f) 314.23 428 B
0.3 0.41 (icult. The dif) 317.98 428 B
0.3 0.41 (ference in accessibility to the) 386.46 428 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.22 (environment and the trade-of) 72 414 B
0.3 0.22 (fs that must be made in selecting products to buy requires more) 218.57 414 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.12 (complex representations; goal-based and utility-based reasoning mechanisms are required and the) 72 400 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(search space is more complex) 72 386 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
110.62 358.92 72 358.92 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(Part \050c\051) 72 360.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 12 Q
0.3 0.35 (X-ray and swimming pool agents.) 72 334 B
3 F
0.3 0.35 (  Ref) 255.86 334 B
0.3 0.35 (lex agents:  Perceiving environment and matching) 280.9 334 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.14 (patterns suf) 72 320 B
0.3 0.14 (f) 129.47 320 B
0.3 0.14 (ices; it\325) 132.95 320 B
0.3 0.14 (s not only okay) 169.55 320 B
0.3 0.14 (, but desired to do the same thing in the same state.  So, no) 245.5 320 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(internal state or representation needed.) 72 306 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 F
0.3 0.08 (PS and Shopping agents.) 72 282 B
3 F
0.3 0.08 (  Utility-based agents:  Need to represent complex information about) 201.51 282 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the objects and actions in the world and to reason about trade-of) 72 268 T
(fs \050utilities\051.) 379.39 268 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 13 Q
(Question 3) 72 233.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(1.) 72 207 T
5 11 Q
(\050) 87 207 T
6 F
(") 93.6 207 T
5 F
(x,y\051quatkum\050x\051) 101.44 207 T
6 F
(\331) 200.44 207 T
5 F
( quatkum\050y\051) 207.08 207 T
6 F
(\336) 286.28 207 T
5 F
( \050\050fruit\050x\051) 297.13 207 T
6 F
(\331) 376.33 207 T
5 F
( fruit\050y\051\051) 382.97 207 T
6 F
(\332) 455.57 207 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(\050vegetable\050x\051) 298.81 193 T
6 F
(\331) 391.21 193 T
5 F
( vegetable\050y\051\051\051) 397.84 193 T
6 F
(\331) 503.44 193 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\330) 285.47 179.67 T
5 F
(\050fruit\050x\051) 293.32 179.67 T
6 F
(\331) 359.32 179.67 T
5 F
( vegetable\050x\051\051) 365.95 179.67 T
6 F
(\331) 464.95 179.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\330) 284.99 166 T
5 F
(\050fruit\050y\051) 292.83 166 T
6 F
(\331) 358.83 166 T
5 F
( vegetable\050y\051\051) 365.46 166 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.31 (No one got this completely correct.  Most of you tried a similar formula, but with only one) 72 142 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.06 (quatkum.  That is enough to assure that any given quatkum is either a fruit or a vegetable, but not) 72 128 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.02 (both; however) 72 114 B
0.3 0.02 (, we emphasized that you needed to make sure) 141.1 114 B
4 F
0.3 0.02 (all) 370.78 114 B
3 F
0.3 0.02 ( quatkums belonged to the) 383.52 114 B
4 F
0.3 0.02 (same) 515.27 114 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 3
%%Page: "4" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(/Frame/CS182/midtermsol.doc) 72 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Page 4) 508.31 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.35 (group \050fruit or vegetable\051.  That is not guaranteed unless we specify that any two arbitrary) 72 712 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.16 (quatkums are each individually of a single type, and that these two types are in fact the same.) 72 698 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 (Note that if there is only one quatkum on T) 72 684 P
0.3 (win-Mars, we\325re okay) 281.51 684 P
0.3 (, because then) 387.62 684 P
5 11 Q
0.66 ( y = x) 455.87 684 P
3 12 Q
0.3 (and the) 504.71 684 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(above WFF still makes the correct claim.) 72 670 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.1 (The sentence) 72 646 B
4 F
0.3 0.1 (cannot) 139.86 646 B
3 F
0.3 0.1 ( be represented in a semantic network, because such networks do not have) 173.12 646 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the power to represent disjunction.) 72 632 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(2.) 72 608 T
5 11 Q
( \050) 81 608 T
6 F
(") 94.2 608 T
5 F
(x\051 quatkum\050x\051) 102.04 608 T
6 F
(\336) 194.44 608 T
(\330) 211.9 608 T
5 F
(soft-skinned\050x\051) 219.74 608 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\050or equivalently\051) 72 594 T
6 11 Q
(\330) 158.92 594 T
5 F
(\050) 166.76 594 T
6 F
($) 173.36 594 T
5 F
(x\051 quatkum\050x\051) 179.4 594 T
6 F
(\331) 271.8 594 T
5 F
( soft-skinned\050x\051) 278.43 594 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
-0.27 (Most of you got this.  This sentence also) 72 570 P
4 F
-0.27 (cannot) 266.86 570 P
3 F
-0.27 ( be represented in a semantic network because it is) 299.53 570 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.11 (a negated claim.  Some of you proposed that we might create a quatkum class with hard skin as a) 72 556 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.47 (property) 72 542 B
0.3 0.47 (, since that would mean all quatkums have hard skin and therefore not soft skin.) 115.61 542 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (However) 72 528 P
-0.05 (, one could always de\336ne a subclass \050a more speci\336c kind of quatkum\051 that overrides the) 115.5 528 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(skin-type property and has soft skin.) 72 514 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.2 (3. This sentence cannot be represented in standard \336rst-order logic, because there is no quanti\336er) 72 490 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0 (available that corresponds to our understanding of \322most.\323  All we can make use of are the ideas) 72 476 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (\322every) 72 462 P
-0.06 (,\323 \322none,\323 and \322at least one.\323  It can, however) 103.2 462 P
-0.06 (, easily be represented in a semantic network;) 321.79 462 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.12 (this is one of the major motivations behind the formalism, in fact.  W) 72 448 P
-0.12 (e simply provide the January) 401.82 448 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.09 (ripening as a default property which can be overridden by individual instances or subclasses of) 72 434 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the quatkum class.) 72 420 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.02 (4.) 72 396 P
5 11 Q
0.05 ( \050) 81 396 P
6 F
0.02 ($) 94.25 396 P
5 F
0.05 (x,y\051 quatkum\050x\051) 100.29 396 P
6 F
0.02 (\331) 205.98 396 P
5 F
0.05 ( tent\050y\051) 212.61 396 P
6 F
0.02 (\331) 272.11 396 P
5 F
0.05 ( owns\050Me,y\051) 278.74 396 P
6 F
0.02 (\331) 358.03 396 P
5 F
0.05 ( in\050x,y\051) 364.66 396 P
3 12 Q
0.02 (.  Most of you got this, as) 417.51 396 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.26 (well.  Once again, the sentence cannot be represented in a semantic network because we have no) 72 382 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.2 (way of making general claims about the existence of a particular object.  There is a hack along the) 72 368 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.01 (following lines:  Give the quatkum class a location property) 72 354 P
-0.01 (, then instantiate a particular quatkum) 358.75 354 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.03 (Bill, and f) 72 340 B
0.3 0.03 (ill Bill\325) 120.56 340 B
0.3 0.03 (s location slot with my tent.  This is a practical work-around that actually turns) 155.44 340 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.01 (up in various places in the literature.  Y) 72 326 B
0.3 0.01 (ou got credit for coming up with this, though only one or) 263.07 326 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(two people did.) 72 312 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 13 Q
(Question 4) 72 277.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Part \050a\051) 72 250.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.15 (Almost every state representation got full credit.  A popular choice was to index the leftward and) 72 224 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.09 (rightward diagonals, then specify each peg as located at the intersection of two such diagonals.) 72 210 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.13 (The goal test is then that the length of the peg list is one.  The easiest approach to operators is) 72 196 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (using four:) 72 182 P
5 11 Q
-0.56 ( moveNW) 126.82 182 P
3 12 Q
-0.25 (,) 171.36 182 P
5 11 Q
-0.56 ( moveNE) 174.36 182 P
3 12 Q
-0.25 (,) 220 182 P
5 11 Q
-0.56 ( moveSW) 223 182 P
3 12 Q
-0.25 (, and) 267.54 182 P
5 11 Q
-0.56 ( moveSE) 290.61 182 P
3 12 Q
-0.25 (.  Each takes a node and a peg location and) 336.26 182 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.06 (returns either nothing \050if no peg is at that location, or the peg cannot move\051 or the board resulting) 72 168 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(from jumping the ar) 72 154 T
(gument peg and removing the intermediate peg.) 168.11 154 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 4
%%Page: "5" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(/Frame/CS182/midtermsol.doc) 72 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Page 5) 508.31 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(An example of a suf) 72 712 T
(\336cient answer is the following:) 169.09 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.19 (A state is a list of ordered pairs,) 72 688 B
5 11 Q
0.66 0.19 (\050x,y\051) 236.84 688 B
3 12 Q
0.3 0.19 (, where each pair is the location of a peg on the game) 270.79 688 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.14 (board indexed by downward diagonals from the left and upward diagonals from the bottom.  The) 72 674 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.04 (initial state is the list of all board locations except) 72 660 B
5 11 Q
0.66 0.04 (\0502,2\051) 318.26 660 B
3 12 Q
0.3 0.04 (.  The goal test returns true if) 351.43 660 B
0.3 0.04 (f a state\325) 493.73 660 B
0.3 0.04 (s) 535.33 660 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(list is singleton.) 72 646 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.03 (There are four operators:) 72 622 P
5 11 Q
0.07 (move[NW/NE/SW/SE]\050node,\050x,y\051\051) 197.78 622 P
3 12 Q
0.03 (.  T) 389.18 622 P
0.03 (ake as an example,) 404.74 622 P
5 11 Q
0.07 (moveNW) 498.5 622 P
3 12 Q
0.03 (.) 537 622 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.12 (If) 72 608 B
5 11 Q
0.66 0.12 (\050x,y\3202\051) 83.66 608 B
3 12 Q
0.3 0.12 ( is not in the state\325) 130.72 608 B
0.3 0.12 (s list, and) 222.48 608 B
5 11 Q
0.66 0.12 (\050x,y\3201\051) 273.53 608 B
3 12 Q
0.3 0.12 ( is, then the new node corresponds to a state) 320.59 608 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.02 (with) 72 594 B
5 11 Q
0.66 0.02 (\050x,y\051) 96.72 594 B
3 12 Q
0.3 0.02 ( and) 129.8 594 B
5 11 Q
0.66 0.02 (\050x,y\3201\051) 153.81 594 B
3 12 Q
0.3 0.02 ( both removed but) 200.13 594 B
5 11 Q
0.66 0.02 (\050x,y\3202\051) 292.29 594 B
3 12 Q
0.3 0.02 ( added to the list.  Otherwise the operator) 338.6 594 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(returns) 72 580 T
5 11 Q
( nil) 105.32 580 T
3 12 Q
(.  The other three operators are analogous.) 131.72 580 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 13 Q
(Part \050b\051) 72 554.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.17 (Path costs are not useful in this problem.  However) 72 528 B
0.3 0.17 (, this is) 328.08 528 B
4 F
0.3 0.17 (not) 368.01 528 B
3 F
0.3 0.17 ( because we are uninterested in) 383.85 528 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.13 (knowing the steps which lead to a solution or how many such steps there are; we are in fact quite) 72 514 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (interested in this, as the problem explicitly states.  Rather) 72 500 P
-0.05 (, the point is that all valid solutions have) 346.05 500 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.01 (exactly the same length, since we need to get rid of 13 pegs and each valid step removes exactly) 72 486 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.1 (one.  Thus path cost provides no way of discriminating among solutions and is hence not at all) 72 472 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(useful.) 72 458 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 13 Q
(Part \050c\051) 72 432.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.02 (An incorrect heuristic which showed up in many exams was to count the number of pegs \050or the) 72 406 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (number of pegs minus one\051 in a given board state.  The problem states explicitly that the heuristic) 72 392 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (must guide search so that it does not proceed exactly as it would in an uninformed algorithm.  But) 72 378 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.03 (consider any board state with) 72 364 B
5 11 Q
0.66 0.03 ( n > 1) 214.61 364 B
3 12 Q
0.3 0.03 (pegs.  Every child of that state will have exactly) 263.63 364 B
5 11 Q
0.66 0.03 ( n \320 1) 498.29 364 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.17 (pegs, so every child will get exactly the same heuristic evaluation.  Thus, the heuristic has no) 72 350 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(impact on search, and therefore isn\325) 72 336 T
(t really heuristic at all.) 243.73 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.19 (Good heuristics emphasized making moves which didn\325) 72 312 B
0.3 0.19 (t leave pegs isolated, for example, by) 352.55 312 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.01 (counting the number of pegs which had an adjacent hole f) 72 298 B
0.3 0.01 (illed by a dif) 352.6 298 B
0.3 0.01 (ferent peg, or by counting) 414.35 298 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (the diagonal distance between the two pegs which are furthest away from each other) 72 284 P
-0.15 (.  The latter is) 474.28 284 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (actually a reasonable \322end-game\323 heuristic for when the board is only sparsely populated by pegs.) 72 270 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.22 (Each of these is admissible, since neither returns a number greater than the number of jumps) 72 256 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(remaining to the nearest goal state \050verify this for  yourselves\051.) 72 242 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 13 Q
(Question 5) 72 207.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(General Comments) 72 180.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.1 (An optimal solution is a solution that has the highest quality; in this case, that means it has the) 72 154 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.19 (shortest path cost.  Optimality does) 72 140 B
4 F
0.3 0.19 (not) 253.24 140 B
3 F
0.3 0.19 ( refer to the time it takes to f) 269.16 140 B
0.3 0.19 (ind the goal.  That\325) 413.69 140 B
0.3 0.19 (s time) 509.73 140 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ef) 72 126 T
(\336ciency and relates to measuring time complexity) 81.11 126 T
(.) 319.63 126 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 5
%%Page: "6" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(/Frame/CS182/midtermsol.doc) 72 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Page 6) 508.31 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 13 Q
(Solution) 72 711.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\050a\051) 72 685 T
5 11 Q
( g\050n\051 = 0) 85.32 685 T
3 12 Q
(and) 151.32 685 T
5 11 Q
( h\050n\051 = h) 168.65 685 T
6 F
(\242) 228.05 685 T
5 F
(\050n\051) 230.76 685 T
3 12 Q
(:) 250.57 685 T
(Not optimal.) 259.9 685 T
5 14 Q
(O) 326.57 685 T
5 11 Q
(\0502\051) 334.97 685 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\050b\051) 72 661 T
5 11 Q
( g\050n\051 = path cost) 85.99 661 T
3 12 Q
(and) 204.79 661 T
5 11 Q
( h\050n\051 = 0) 222.12 661 T
3 12 Q
(:) 281.52 661 T
(Optimal.) 290.86 661 T
5 14 Q
(O) 339.19 661 T
5 11 Q
(\0502) 347.59 661 T
5 8.8 Q
(129) 360.79 665.4 T
5 11 Q
(\051) 376.63 661 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\050c\051) 72 637 T
5 11 Q
( g\050n\051 = path cost) 85.32 637 T
3 12 Q
(and) 204.12 637 T
5 11 Q
( h\050n\051 = h) 221.45 637 T
6 F
(\242) 280.85 637 T
5 F
(\050n\051) 283.57 637 T
3 12 Q
(:  Optimal.) 303.36 637 T
5 14 Q
(O) 361.04 637 T
5 11 Q
(\0502) 369.44 637 T
5 8.8 Q
(7) 382.64 641.4 T
5 11 Q
(\051) 387.92 637 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 13 Q
(Explanation) 72 611.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.27 (Part \050a\051 is greedy search.  Of all three scenerios, this returns a solution path to us the fastest.  W) 72 585 P
0.27 (e) 534.67 585 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.27 (only have to expand the node of) 72 571 P
5 11 Q
0.59 ( init_state) 227.58 571 P
3 12 Q
0.27 (and the node of) 307.96 571 P
5 11 Q
0.59 ( state_0) 383.08 571 P
3 12 Q
0.27 (to end up in Goal A) 443.67 571 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 14 Q
0.84 0.05 (O) 72 557 B
5 11 Q
0.66 0.05 (\0502\051) 80.45 557 B
3 12 Q
0.3 0.05 (.  However) 100.42 557 B
0.3 0.05 (, Goal A is a worse solution than Goal B because it takes us 137 units to get to) 154.05 557 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Goal A, but only 129 units to get to Goal B.  So, we don\325) 72 543 T
(t get an optimal answer in this case.) 346.12 543 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.1 (Part \050b\051 is uniform cost search, so we do get the optimal solution.  The optimal path has a total) 72 519 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.22 (cost of 129 \050leading to Goal B\051.  However) 72 505 P
0.22 (, the search will explore all the nodes on the right until) 275.59 505 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.05 (exceeded path length of 129 in all possible ways.  The time complexity is) 72 491 B
5 14 Q
0.84 0.05 (O) 439.76 491 B
5 11 Q
0.66 0.05 (\0502) 448.21 491 B
5 8.8 Q
0.53 0.05 (129) 461.52 495.4 B
5 11 Q
0.66 0.05 (\051) 477.52 491 B
3 12 Q
0.3 0.05 (.  So, while) 484.17 491 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this evaluation function gives an optimal answer) 72 477 T
(, the search takes a long time.) 304.16 477 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.27 (Part \050c\051 is the general A* heuristic function.  W) 72 453 B
0.3 0.27 (e get optimal solution because) 315.02 453 B
5 11 Q
0.66 0.27 ( h\050n\051) 469.71 453 B
3 12 Q
0.3 0.27 (never) 512.26 453 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.08 (overestimates.  Since we\325ve factored in the path cost, once we get to State 0, we\325d pick Goal B) 72 439 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.08 (\050which has a much better path cost\051 rather than Goal A.) 72 425 P
5 11 Q
-0.18 (f\050state_0\051 = 127 + 1 = 128) 343.29 425 P
3 12 Q
-0.08 (.  But) 513.82 425 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.14 (before we get to State 0, we will f) 72 411 B
0.3 0.14 (irst have to check the nodes on the right branch.  W) 241.09 411 B
0.3 0.14 (e\325ll only) 498.21 411 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.01 (come back to State 0 after the path cost of 128 has been exceeded.  Since we have to go) 72 397 P
5 11 Q
-0.03 ( k) 492.27 397 P
3 12 Q
-0.01 (levels) 512 397 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.09 (deep on the right side to beat 128\321i.e.,) 72 383 P
5 11 Q
0.2 ( f\050n\051 = k + 2) 261.96 383 P
5 8.8 Q
0.16 (k) 348.77 387.4 P
3 12 Q
0.09 (and) 360.85 383 P
5 11 Q
0.2 ( f\050n\051 > 128) 378.18 383 P
3 12 Q
0.09 (happens when) 458.19 383 P
5 11 Q
0.2 ( k) 526.6 383 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.11 (is 7.  So, the running time is about) 72 369 B
5 14 Q
0.84 0.11 (O) 250.28 369 B
5 11 Q
0.66 0.11 (\0502) 258.79 369 B
5 8.8 Q
0.53 0.11 (7) 272.2 373.4 B
5 11 Q
0.66 0.11 (\051) 277.58 369 B
3 12 Q
0.3 0.11 (.  Here, we see that A* gives us an optimal solution) 284.29 369 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(much faster than when we used uniform cost.) 72 355 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 13 Q
(Question 6) 72 320.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Part 1) 72 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(The most direct naive encoding is propositional:) 72 267 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050a\051) 90 243 T
5 11 Q
( have-dollar) 103.32 243 T
6 F
(\336) 189.12 243 T
5 F
( can-buy-coke) 199.98 243 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\050b\051) 90 219 T
5 11 Q
( have-dollar) 103.99 219 T
6 F
(\336) 189.79 219 T
5 F
( can-buy-pretzels) 200.65 219 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\050c\051) 90 195 T
5 11 Q
( have-dollar) 103.32 195 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(A slightly less naive version using FOPC:) 72 171 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050a\051) 90 147 T
5 11 Q
( have\050$\051) 103.32 147 T
6 F
(\336) 162.72 147 T
5 F
( cb\050coke\051) 173.58 147 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\050b\051) 90 123 T
5 11 Q
( have\050$\051) 103.99 123 T
6 F
(\336) 163.39 123 T
5 F
( cb\050pretzels\051) 174.25 123 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 6
%%Page: "7" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(/Frame/CS182/midtermsol.doc) 72 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Page 7) 508.31 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\050c\051) 90 712 T
5 11 Q
( have\050$\051) 103.32 712 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(The proof:) 72 688 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050d\051:  \050a\051, \050c\051) 90 664 T
5 11 Q
( ----- modus ponens cb\050coke\051) 145.97 664 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\050e\051:  \050b\051, \050c\051) 90 640 T
5 11 Q
( ----- modus ponens cb\050pretzels\051) 145.97 640 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(\050d\051, \050e\051) 90 616 T
5 11 Q
( -----) 123.31 616 T
( and introduction cb\050coke\051) 162.91 616 T
6 F
(\331) 341.11 616 T
5 F
( cb\050pretzels\051) 347.74 616 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.03 (\050Note:  Full credit was given if you showed all the rules, even if you left out the names; but you) 72 592 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(needed to show) 72 578 T
5 11 Q
(and-introduction) 149.65 578 T
3 12 Q
(.\051) 255.25 578 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 13 Q
(Part 2) 72 552.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.05 (Intuitively) 72 526 P
0.05 (, the problem is that after you buy coke or buy pretzels, it\325) 121.22 526 P
0.05 (s no longer \050necessarily\051 true) 400.49 526 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(that you have a dollar) 72 512 T
(.) 175.32 512 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
181.41 484.92 72 484.92 2 L
V
0.64 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(Further Explanations) 72 486.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(For full credit you needed to mention that an action changes the state of the world.) 72 460 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Note that it doesn\325) 72 436 T
(t make sense to write:) 160.78 436 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\0501\325\051) 90 412 T
5 11 Q
(have-dollar) 110.99 412 T
6 F
(\336) 190.19 412 T
5 F
( \050can-buy-coke) 201.04 412 T
6 F
(\331) 300.05 412 T
(\330) 313.28 412 T
5 F
(have-dollar\051) 321.12 412 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.21 (Since that\325) 72 388 P
0.21 (s logically inconsistent.   What you have to do is recognize that the act of buying coke) 123.21 388 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.08 (\050or chips\051 changes the state of the world:  What\325) 72 374 B
0.3 0.08 (s true in the state before the action \050you have a) 309.39 374 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.22 (dollar) 72 360 P
0.22 (, you have no coke\051 is not true in the state after \050you may or may not have a dollar) 99.52 360 P
0.22 (, but you) 497.21 360 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(have coke\051.) 72 346 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 13 Q
(Part 3) 72 320.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135.54 291.92 72 291.92 2 L
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 F
(Background) 72 293.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(Y) 72 267 T
(ou can encode the above constraint using a rule like:) 79.46 267 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(") 90 243 T
5 11 Q
(s have-dollar\050s\051) 98.56 243 T
6 12 Q
(\336) 210.76 243 T
5 11 Q
( have-coke\050result\050buy-coke,s\051\051) 222.6 243 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.22 (where) 72 219 B
5 11 Q
0.66 0.22 ( result) 102.39 219 B
3 12 Q
0.3 0.22 (is a function that maps from actions and states to new states.  Note that this) 158.24 219 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.32 (axiom makes no assertion one way or the other about whether you still have a dollar in the) 72 205 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (resulting state, and so you can\325) 72 191 P
-0.21 (t conclude that you can buy pretzels in that state.  Note also that for) 219.36 191 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this to work, we have to assume that only one action at a time can be performed.) 72 177 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 7
%%Page: "8" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 8 Q
0 X
0 0 0 1 0 0 0 K
(/Frame/CS182/midtermsol.doc) 72 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
(Page 8) 508.31 75.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
116.07 709.92 72 709.92 2 L
V
0.64 H
0 Z
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(Solution) 72 711.33 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
-0.04 (For this problem, you needed to modify each of the statements to include a situation variable, and) 72 685 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(give a WFF that showed how the buying action changes state.  For example:) 72 671 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 11 Q
(Have\050$,s\051) 90 647 T
6 F
(\336) 156 647 T
5 F
( Buy-coke\050s\051) 166.86 647 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Have\050$,s\051) 90 633 T
6 F
(\336) 156 633 T
5 F
( Buy-pretzels\050s\051) 166.86 633 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Have\050$,S) 90 619 T
5 8.8 Q
(1) 142.8 616.25 T
5 11 Q
(\051) 148.08 619 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
(Also have WFF encoding loss of a dollar:) 72 595 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 11 Q
(\330) 90 571.67 T
5 F
(Have\050$,Result\050Buy-pretzels,s\051\051) 97.84 571.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 12 Q
0.3 0.03 (\050Note:  W) 72 548 B
0.3 0.03 (e gave full credit for any answer to part three that showed use of the situation variable) 119.91 548 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.17 (and the result function; three points were given if the explanation was right, but the logic had) 72 534 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0.3 0.06 (mistakes.  Note that we didn\325) 72 520 B
0.3 0.06 (t ask for proof or complete encoding of domain.  That would have) 215.68 520 B
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(taken an hour by itself.\051) 72 506 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 8
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 8
%%DocumentFonts: Helvetica
%%+ Helvetica-Bold
%%+ Times-BoldItalic
%%+ Times-Roman
%%+ Times-Italic
%%+ Courier
%%+ Symbol
%%+ Times-Bold
%%EOF
