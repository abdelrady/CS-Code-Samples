<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0039)http://www2.webng.com/amrlearn/113.html -->
<HTML><HEAD><TITLE>The Eight Puzzel Problem</TITLE><LINK 
href="113_files/stylesheet.css" type=text/css rel=stylesheet>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="The Eight Puzzel Problem The Eight Puzzel Problem " 
name=description>
<META 
content="C++, C++, The Eight Puzzel Problem, The, Eight, Puzzel, Problem, The, Eight, Puzzel, Problem " 
name=keywords>
<META content="Copyright 2007 Amr Saber" name=copyright>
<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
<BODY>
<CENTER>
<DIV id=header>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 728;
google_ad_height = 90;
google_ad_format = "728x90_as";
google_ad_type = "text";
//2007-02-02: header
google_ad_channel = "7161698987";
//--></SCRIPT>

<SCRIPT src="113_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV></CENTER>
<DIV id=index>
<H3>Goooooooogle</H3>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_type = "text";
//2007-02-02: header, right
google_ad_channel = "7161698987+2593520185";
//--></SCRIPT>

<SCRIPT src="113_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV>
<DIV id=index2>
<H3>Goooooooogle</H3>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_type = "text";
google_ad_channel = "";
//--></SCRIPT>

<SCRIPT src="113_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV>
<DIV id=content>
<H3>The Eight Puzzel Problem</H3>
<P></P><TEXTAREA>
/*************************************************************************
**************************************************************************
					The Eight Puzzel Problem
**************************************************************************/
#include&lt;iostream.h&gt;
const int MAX=100;
#include&lt;process.h&gt;
int I=-1,J=-1;//[ Row, Colum ]
struct elm_type
{
	int Puzzel_arr[3][3];
	bool get_Puzzel()
	{
		for(int i=0;i&lt;3;i++)
		{
			cout&lt;&lt;"\t\t\t";
			for(int a=0;a&lt;3;a++)
			{
				//cout&lt;&lt;"Enter Element At     "&lt;&lt;"[ "&lt;&lt;i&lt;&lt;" ]"&lt;&lt;"[ "&lt;&lt;a&lt;&lt;" ]"&lt;&lt;" = ";
				cin&gt;&gt;Puzzel_arr[i][a];
				if(Puzzel_arr[i][a]==-1)
				{
					I=i,J=a;
				}
			}
		}
			cout&lt;&lt;"\t\t ______________________________\n";
			return ( I==-1&amp;&amp;J==-1 )?false:true;
	}
//=======================================================================
	void show()
	{
		for(int i=0; i&lt;3; i++)
		{
			for(int j=0; j&lt;3; j++)
				cout&lt;&lt;"\t"&lt;&lt;Puzzel_arr[i][j];
					cout&lt;&lt;endl;
		}
		cout&lt;&lt;"\t________________\n";
		cout&lt;&lt;"\t________________\n";
	}
bool operator ==(elm_type e)
	{
		for(int i=0; i&lt;3; i++)
		{
			for(int j=0; j&lt;3; j++)
				if( Puzzel_arr[i][j]!=e.Puzzel_arr[i][j] )
					return false;
		}
	return true;
	}
//-----------
};
void getNew_IJ(elm_type e,int &amp;I,int &amp;J)
{
		for(int i=0;i&lt;3;i++)
			for(int a=0;a&lt;3;a++)
			{
				if(e.Puzzel_arr[i][a]==-1)
					I=i,J=a;
			}
}
//************************************************************************
class Stack
{
private:
	int top;
	elm_type data[MAX];
public:
	Stack()
	{
		top = -1;
	}
	//-------------------------------------------
	~Stack()
	{
		top = -1;
	}
	//-------------------------------------------
	bool stackIsEmpty()
	{
		if(top == -1)
			return true;
		else
			return false;
	}
	//-------------------------------------------
	bool stackIsFull()
	{
		if(top == MAX-1)
			return true;
		else
			return false;
	}
	//-------------------------------------------
	void push(elm_type e)
	{
		if(stackIsFull())
		{
			cout&lt;&lt;"Error: Stack is full"&lt;&lt;endl;
			exit(0);
		}
		data[++top] = e;
	}
	//-------------------------------------------
	elm_type pop()
	{
		elm_type e;
		if(stackIsEmpty())
		{
			cout&lt;&lt;"Error: Stack is empty"&lt;&lt;endl;
			exit(0);
		}
		e = data[top--];
		return e;
	}
	//-------------------------------------------
	void printStack()
	{
		elm_type e;
		Stack temp;
		while(!stackIsEmpty())
		{
			elm_type e;
			e = pop();
			e.show();
			temp.push(e);
		}
		while(!temp.stackIsEmpty())
		{
			e = temp.pop();
			push(e);
		}
	}
//-------------------------------------------
	void printStackUp()
	{
		elm_type e;
		Stack temp;
		while(!stackIsEmpty())
		{
			elm_type e;
			e = pop();
			temp.push(e);
		}
		while(!temp.stackIsEmpty())
		{
			e = temp.pop();
			e.show();
			push(e);
		}
	}
	bool isFound(elm_type e)
	{
		bool flage=false;
		elm_type E;
		Stack temp;
		while( !stackIsEmpty() )
		{
			E = pop();
			temp.push(E);
			if( e==E )
			{
				flage=true;
				break;
			}
		}
		while( !temp.stackIsEmpty() )
		{
			E=temp.pop();
			push(E);
		}
		return flage;
	}
};
bool DepthFirst( elm_type ,elm_type ,Stack &amp; );
//************************************************************************
//-----------------		Operations		----------------------------------
bool    Mov_Up		(elm_type	&amp;Puzzel, int  I , int  J )
	{
		if(I&gt;=2)
			return false;
		Puzzel.Puzzel_arr[I][J] = Puzzel.Puzzel_arr[I+1][J];		
				I++;
				Puzzel.Puzzel_arr[I][J]=-1;//empty	
				return true;

	}
	bool	Mov_Down	(elm_type	&amp;Puzzel, int  I , int  J )
	{
		if(I&lt;=0)
			return false;
		Puzzel.Puzzel_arr[I][J] = Puzzel.Puzzel_arr[I-1][J];
				I--;
				Puzzel.Puzzel_arr[I][J]=-1;//empty
				return true;
	}
	bool    Mov_Right	(elm_type	&amp;Puzzel, int  I , int  J )
	{
		if(J&lt;=0)
			return false;
			Puzzel.Puzzel_arr[I][J] = Puzzel.Puzzel_arr[I][J-1];
				J--;
				Puzzel.Puzzel_arr[I][J]=-1;//empty
				return true;
	}
	bool    Mov_Left	(elm_type	&amp;Puzzel, int  I , int  J )
	{
		if(J&gt;=2)
			return false;
			Puzzel.Puzzel_arr[I][J] = Puzzel.Puzzel_arr[I][J+1];
				J++;
				Puzzel.Puzzel_arr[I][J]=-1;//empty
				return true;
	}
//-----------------------------------------------------------------------
Stack PuzzelOperations( elm_type  Puzzel )
{
	Stack s;
	
	elm_type  Up_Pazzel,Down_Pazzel,Left_Pazzel,Right_Pazzel;
	Up_Pazzel		=Puzzel;	Down_Pazzel		=Puzzel;
	Left_Pazzel		=Puzzel;	Right_Pazzel	=Puzzel;
//&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
	Mov_Up		(	Up_Pazzel,   I ,   J );
	s.push(Up_Pazzel);
	Mov_Down	(	Down_Pazzel,   I ,   J );
	s.push(Down_Pazzel);	

	Mov_Right	(	Right_Pazzel,   I ,   J );
	s.push(Right_Pazzel);

	Mov_Left	(	Left_Pazzel,   I ,   J );
	s.push(Left_Pazzel);

	getNew_IJ( Puzzel, I, J);
	return s;
}
//-----------------------------------------------------------------------
void main()
{
	elm_type Puzzel_start,Puzzel_target;
	Stack cl;
	cout&lt;&lt;"\t Please Enter The Two Puzzels: \n";
	if(	Puzzel_start.get_Puzzel() )//&amp;&amp; Puzzel_target.get_Puzzel() )
	{
		cout&lt;&lt;"true construction"&lt;&lt;endl;
		cout&lt;&lt;"\n";
		cl=PuzzelOperations( Puzzel_start );
		cl.printStack();
		//---------------------------------------------
	/*	if ( DepthFirst(Puzzel_start,Puzzel_target,cl) )
			cout&lt;&lt;"Ther are Path\n";
		else
			cout&lt;&lt;"No Path Betwwen Two Puzzel\n";
		cl.printStack();*/
	}
	else 
	cout&lt;&lt;"error\n";
}
/*________________________________________________________________________
__________________________________________________________________________*/
bool DepthFirst( elm_type start,elm_type target,Stack &amp;colsed )
{
	Stack open,s;
	elm_type e,curr;
	open.push(start);
	while(!open.stackIsEmpty() )
	{
		curr=open.pop();
		colsed.push(curr);
		if(curr==target)
			return true;
		s=PuzzelOperations(curr);
		while(!s.stackIsEmpty() )
		{
			e=s.pop();
			if( !colsed.isFound(e) )
				open.push(e);
		}
	}
	return false;
}


</TEXTAREA> <!-- Search Google -->
<CENTER>
<FORM action=http://www.google.com/custom method=get target=_top>
<TABLE bgColor=#ffffff>
  <TBODY>
  <TR>
    <TD vAlign=top noWrap align=left height=32><A 
      href="http://www.google.com/"><IMG alt=Google 
      src="113_files/Logo_25wht.gif" align=middle border=0></IMG></A> <LABEL 
      style="DISPLAY: none" for=sbi>Enter your search terms</LABEL> <INPUT 
      id=sbi maxLength=255 size=40 name=q></INPUT> <LABEL style="DISPLAY: none" 
      for=sbb>Submit search form</LABEL> <INPUT id=sbb type=submit value=Search name=sa></INPUT> <INPUT type=hidden 
      value=pub-9653171024150495 name=client></INPUT> <INPUT type=hidden value=1 
      name=forid></INPUT> <INPUT type=hidden value=ISO-8859-1 name=ie></INPUT> 
      <INPUT type=hidden value=ISO-8859-1 name=oe></INPUT> <INPUT type=hidden 
      value=active name=safe></INPUT> <INPUT type=hidden 
      value=GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1 
      name=cof></INPUT> <INPUT type=hidden value=en name=hl></INPUT> 
  </TD></TR></TBODY></TABLE></FORM></CENTER><!-- Search Google -->
<H3><A 
href="http://www2.webng.com/amrlearn/Index.html">Home</A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A 
href="http://www2.webng.com/amrlearn/112.html">Previous</A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A 
href="http://www2.webng.com/amrlearn/114.html">Next</A></H3></DIV></BODY></HTML>
