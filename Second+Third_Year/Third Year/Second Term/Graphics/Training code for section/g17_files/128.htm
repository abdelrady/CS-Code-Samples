<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0039)http://www2.webng.com/amrlearn/128.html -->
<HTML><HEAD><TITLE>Polygon Clipping</TITLE><LINK 
href="128_files/stylesheet.css" type=text/css rel=stylesheet>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="Computer, Graphics, Polygon Clipping Polygon Clipping " 
name=description>
<META 
content="Computer, Graphics, Polygon, Clipping, Polygon, Clipping, Polygon Clipping " 
name=keywords>
<META content="Copyright 2007 Amr Saber" name=copyright>
<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
<BODY>
<CENTER>
<DIV id=header>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 728;
google_ad_height = 90;
google_ad_format = "728x90_as";
google_ad_type = "text";
//2007-02-02: header
google_ad_channel = "7161698987";
//--></SCRIPT>

<SCRIPT src="128_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV></CENTER>
<DIV id=index>
<H3>Goooooooogle</H3>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_type = "text";
//2007-02-02: header, right
google_ad_channel = "7161698987+2593520185";
//--></SCRIPT>

<SCRIPT src="128_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV>
<DIV id=index2>
<H3>Goooooooogle</H3>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_type = "text";
google_ad_channel = "";
//--></SCRIPT>

<SCRIPT src="128_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV>
<DIV id=content>
<H3>Polygon Clipping</H3><TEXTAREA>#include&lt;WINDOWSX.H&gt;
#include&lt;windows.h&gt;
///////////////////
LRESULT CALLBACK WndProc(HWND , UINT , WPARAM ,LPARAM);
void DDA_ALGORITHM(HDC, float, float, float, float, COLORREF);
static char gszClassName[] = "MyWindowClass";
const int MAX = 100;
static HINSTANCE ghInstance = NULL;
int X1,X2,Y1,Y2;
int Xmin = 100 ,Ymin =100 ,Xmax = 500 ,Ymax = 500;
//-----------------------------------------------
int WINAPI WinMain(HINSTANCE hInstance , HINSTANCE hprevInstance , LPSTR lpCmdLine ,int nCmdShow)
{
	WNDCLASSEX WndClass;
	HWND hwnd;
	MSG Msg;
	ghInstance = hInstance ;
	WndClass.cbSize = sizeof(WNDCLASSEX);
	WndClass.style = NULL;
	WndClass.lpfnWndProc = WndProc ;
	WndClass.cbClsExtra =0;
	WndClass.cbWndExtra = 0;
	WndClass.hInstance =ghInstance ;
	WndClass.hIcon = LoadIcon(NULL,IDI_APPLICATION);
	WndClass.hCursor =LoadCursor(NULL ,IDC_ARROW);
    WndClass.hbrBackground = (HBRUSH)(COLOR_WINDOW+20);
    WndClass.lpszMenuName = NULL ;
	WndClass.lpszClassName = gszClassName ;
	WndClass.hIconSm = LoadIcon(NULL , IDI_APPLICATION);
	if(!RegisterClassEx(&amp;WndClass))
	{
		MessageBox(0, "window registeration failed!!","error",MB_ICONSTOP|MB_OK);
		return 0;
	}

	hwnd =CreateWindowEx(WS_EX_STATICEDGE , gszClassName ," Window Title",WS_OVERLAPPEDWINDOW ,
		CW_USEDEFAULT ,CW_USEDEFAULT,800,600,NULL,NULL,ghInstance,NULL);
	if(hwnd == NULL)
	{
		MessageBox(0,"windows greated failed!!","Error" ,MB_ICONSTOP|MB_OK);
         return 0;
	}
	ShowWindow(hwnd,nCmdShow);
	UpdateWindow(hwnd);
	while(GetMessage(&amp;Msg ,NULL ,0,0))
	{
		TranslateMessage(&amp;Msg);
		DispatchMessage(&amp;Msg);
	}
	return Msg.wParam;
}
//-----------------------------------------------
struct Point
{
	int x;
	int y;
	Point()
	{}
	void setPoint(int a, int b)
	{
		x = a;
		y = b;
	}
	/*bool operator ==(Point point)
	{
		return (x==point.x &amp;&amp; y== point.y) ?true :false;
	}*/
};
//-------------------------------------------------
void leftEdgeClip(Point polygon1[], int&amp; count, Point polygon2[])
{
	int current = 0;
	float slope;
	for(int j=1; j&lt;MAX, polygon1[j-1].x&gt;=0; j++)
	{
		if((polygon1[current].x &lt;= Xmin ) &amp;&amp; (polygon1[j].x &gt;= Xmin))
		{
			polygon2[count].x = Xmin;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			// y = y + slope*dx
			polygon2[count].y = polygon1[current].y + slope*(polygon2[count].x-polygon1[current].x);
			count++;
		}
		else if((polygon1[current].x &gt;= Xmin ) &amp;&amp; (polygon1[j].x &gt;= Xmin))
		 {
			polygon2[count++] = polygon1[current];
		 }
		else if((polygon1[current].x &gt;= Xmin ) &amp;&amp; (polygon1[j].x &lt;= Xmin))
		{
			polygon2[count++] = polygon1[current];
			////
			polygon2[count].x = Xmin;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			polygon2[count].y = polygon1[current].y + slope*(polygon2[count].x - polygon1[current].x);
			count++;
		}
		current++;
	}
}
//-----------------------------------------------
void bottomEdgeClip(Point polygon1[] , int&amp; count, Point polygon2[])
{
	int current = 0;
	float slope;
	int n = 0;
	for(int j=1; j&lt;MAX, polygon1[j-1].x&gt;=0; j++)
	{
		if((polygon1[current].y &lt;= Ymin ) &amp;&amp; (polygon1[j].y &gt;= Ymin))
		{
			polygon2[n].y = Ymin;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			polygon2[n].x = polygon1[current].x + slope*(polygon2[n].y-polygon1[current].y);
			n++;
		}
		else if((polygon1[current].y &gt;= Ymin )&amp;&amp; (polygon1[j].y &gt;= Ymin))
		 {
			polygon2[n++] = polygon1[current];
		 }
		else if((polygon1[current].y &gt;= Ymin ) &amp;&amp; (polygon1[j].y &lt;= Ymin))
		{
			polygon2[n++] = polygon1[current];
			////
			if(polygon1[j].x &gt;= 0)
			{
			polygon2[n].y = Ymin;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			polygon2[n].x = polygon1[current].x + slope*(polygon2[n].y-polygon1[current].y);
			n++;
			}
		}
		else
		{
			polygon2[n].y = Ymin;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			polygon2[n].x = polygon1[current].x + slope*(polygon2[n].y-polygon1[current].y);
			n++;
		}
		current++;
	}
	count = n;
}
//--------------------------------------------------------------
void rightEdgeClip(Point polygon1[], int&amp; count, Point polygon2[])
{
	int current = 0;
	int n = 0;
	float slope;
	for(int j=1; j&lt;MAX, polygon1[j-1].x&gt;=0; j++)
	{
		if((polygon1[current].x &gt;= Xmax) &amp;&amp; (polygon1[j].x &lt;= Xmax))
		{
			polygon2[n].x = Xmax;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			polygon2[n].y = polygon1[current].y + slope*(polygon2[n].x-polygon1[current].x);
			n++;
		}
		else if((polygon1[current].x &lt;= Xmax) &amp;&amp; (polygon1[j].x &lt;= Xmax))
		 {
			polygon2[n++] = polygon1[current];
		 }
		else if((polygon1[current].x &lt;= Xmax ) &amp;&amp; (polygon1[j].x &gt;= Xmax))
		{
			polygon2[n++] = polygon1[current];
			////
			polygon2[n].x = Xmax;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			polygon2[n].y = polygon1[current].y + slope*(polygon2[n].x-polygon1[current].x);
			n++;
		}
		else
		{
			polygon2[n].x = Xmax;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			polygon2[n].y = polygon1[current].y + slope*(polygon2[n].x-polygon1[current].x);
			n++;
		}
		current++;
	}
	count = n;
}
//--------------------------------------------------------------
void topEdgeClip(Point polygon1[], int&amp; count, Point polygon2[])
{
	int current = 0;
	int n = 0;
	float slope;
	for(int j=1; j&lt;MAX, polygon1[j-1].x&gt;=0; j++)
	{
		if((polygon1[current].y &gt;= Ymax ) &amp;&amp; (polygon1[j].y &lt;= Ymax))
		{
			polygon2[n].y = Ymax;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			polygon2[n].x = polygon1[current].x + slope*(polygon2[n].y-polygon1[current].y);
			n++;
		}
		else if((polygon1[current].y &lt;= Ymax ) &amp;&amp; (polygon1[j].y &lt;= Ymax))
		 {
			polygon2[n++] = polygon1[current];
		 }
		else if((polygon1[current].y &lt;= Ymax ) &amp;&amp; (polygon1[j].y &gt;= Ymax))
		{
			polygon2[n++] = polygon1[current];
			////
			polygon2[n].y = Ymax;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			polygon2[n].x = polygon1[current].x + slope*(polygon2[n].y - polygon1[current].y);
			n++;
		}
		else
		{
			polygon2[n].y = Ymax;
			slope = float(polygon1[j].y-polygon1[current].y) / float(polygon1[j].x-polygon1[current].x);
			polygon2[n].x = polygon1[current].x + slope*(polygon2[n].y-polygon1[current].y);
			n++;
		}
		current++;
	}
	count = n;
}
//--------------------------------------------
void drawPolygon(HDC hdc, Point list[], int count)
{
	for(int i=0; i&lt;count-1; i++)
		if(list[i].x!=list[i+1].x &amp;&amp; list[i].y!=list[i+1].y)
			DDA_ALGORITHM(hdc, list[i].x, list[i].y, list[i+1].x, list[i+1].y, RGB(0, 255, 0));
}
//--------------------------------------------------------------
void ploygonClip(HDC hdc)
{
	int count = 0;
	Point polygon[MAX];
	for(int i=0; i&lt;MAX; i++)
		polygon[i].x = -1;

	//for(i=1; i&lt;20; i++)
	//{
	//	Sleep(100);
	polygon[0].setPoint(100, 200);
	polygon[1].setPoint(300, 100);
	polygon[2].setPoint(500, 200);
	polygon[3].setPoint(300, 500);
	polygon[4].setPoint(100, 200);
	//}

	Point leftList[50];
	Point rightList[50];
	Point bottomList[50];
	Point topList[50]; // last list

	leftEdgeClip(polygon, count, leftList);
    bottomEdgeClip(leftList, count, bottomList);
    rightEdgeClip(bottomList, count, rightList);
    topEdgeClip(rightList, count, topList);

	drawPolygon(hdc, topList, count);
}
//-----------------------------------------------
void DDA_ALGORITHM(HDC hdc, float xPoint1, float yPoint1, float xPoint2, float yPoint2, COLORREF col)
{
	float xBegin  =  xPoint1;
	float xFinal  =  xPoint2;
	float yBegin  =  yPoint1;
	float yFinal  =  yPoint2;
	float slope = (yPoint2 - yPoint1) / (xPoint2 - xPoint1);
	float slopeInverse  =  1 / slope;

	if(xPoint1&gt;xPoint2 &amp;&amp; yPoint1&gt;yPoint2)
	{
		xBegin  =  xPoint2;
	    xFinal  =  xPoint1;
		yBegin  =  yPoint2;
	    yFinal  =  yPoint1;
	}
	int x = int(xBegin);
	int y = int(yBegin);

	// if the line is parallel to the y coordinate
	if((xBegin - xFinal) == 0)
		if(yBegin &lt; yFinal)	// and y starting point greater than y end
			while(y &lt;= yFinal)
			{
				SetPixel(hdc, x, y, col);
				y ++;	// increment y
			}
		else
			while(y &gt;= yFinal)
			{
				SetPixel(hdc, x, y, col);
				y --;	// decrement y
			}
	// if the line is parallel to the x coordinate
	else
		if((yBegin - yFinal) == 0)
			if(xBegin &lt; xFinal) // and x starting point greater than x end
				while(x &lt;= xFinal)
				{
					SetPixel(hdc, x, y, col);
					x ++;
				}
			else
				while(x &gt;= xFinal)
				{
					SetPixel(hdc, x, y, col);
					x --;
				}
	else
		if(slope &gt;= 1 || slope &lt;= -1) // new case
		{
			if(yFinal &gt; yBegin) // from begin to end
				while(y &lt;= yFinal)
				{
					x = int(xBegin + 0.5);
					xBegin = xBegin + slopeInverse;
					SetPixel(hdc, x, y, col);
					y ++;
				}
			else		// from end to begin
				while(y &gt;= yFinal)
				{
					x = int(xBegin + 0.5);
					xBegin = xBegin - slopeInverse;
					SetPixel(hdc, x, y, col);
					y --;
				}
		}
	else
		if(slopeInverse &gt;= 1 || slopeInverse &lt;= -1) // new case
		{
			if(xFinal &gt; xBegin)	// from begin to end
				while(x &lt;= xFinal)
				{
					y = int(yBegin + 0.5);
					yBegin = yBegin + slope;
					SetPixel(hdc, x, y, col);
					x ++;
				}
			else		// from end to begin
				while(x &gt;= xFinal)
				{
					y = int(yBegin + 0.5);
					yBegin = yBegin - slope;
					SetPixel(hdc, x, y, col);
					x --;
				}
		}//if
}
//----------------------------------------
LRESULT CALLBACK WndProc(HWND hwnd ,UINT Message ,WPARAM wparam ,LPARAM lparam)
{
	COLORREF color=RGB(255, 0, 0);
	HDC  hdc = GetDC(hwnd);
	switch(Message)
	{
	case WM_PAINT:
		DDA_ALGORITHM(hdc, Xmin, Ymin, Xmin, Ymax, color);
		DDA_ALGORITHM(hdc, Xmin, Ymax, Xmax, Ymax, color);
		DDA_ALGORITHM(hdc, Xmin, Ymin, Xmax, Ymin, color);
		DDA_ALGORITHM(hdc, Xmax, Ymin, Xmax, Ymax, color);
		ploygonClip(hdc);
		break;

	case WM_CLOSE:
		DestroyWindow(hwnd);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	case WM_LBUTTONDOWN:
		break;
	case WM_RBUTTONDOWN:
		break;
	default:
		return DefWindowProc(hwnd,Message,wparam,lparam);
	}
	ReleaseDC(hwnd, hdc);
	return 0;
}//end of the program
</TEXTAREA> <BR>
<CENTER><IMG 
style="BORDER-RIGHT: #0066cf 1px solid; BORDER-TOP: #0066cf 1px solid; BORDER-LEFT: #0066cf 1px solid; WIDTH: 350px; BORDER-BOTTOM: #0066cf 1px solid; HEIGHT: 300px" 
src="128_files/polyclipp.jpg"> </CENTER><!-- Search Google -->
<CENTER>
<FORM action=http://www.google.com/custom method=get target=_top>
<TABLE bgColor=#ffffff>
  <TBODY>
  <TR>
    <TD vAlign=top noWrap align=left height=32><A 
      href="http://www.google.com/"><IMG alt=Google 
      src="128_files/Logo_25wht.gif" align=middle border=0></IMG></A> <LABEL 
      style="DISPLAY: none" for=sbi>Enter your search terms</LABEL> <INPUT 
      id=sbi maxLength=255 size=40 name=q></INPUT> <LABEL style="DISPLAY: none" 
      for=sbb>Submit search form</LABEL> <INPUT id=sbb type=submit value=Search name=sa></INPUT> <INPUT type=hidden 
      value=pub-9653171024150495 name=client></INPUT> <INPUT type=hidden value=1 
      name=forid></INPUT> <INPUT type=hidden value=ISO-8859-1 name=ie></INPUT> 
      <INPUT type=hidden value=ISO-8859-1 name=oe></INPUT> <INPUT type=hidden 
      value=active name=safe></INPUT> <INPUT type=hidden 
      value=GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1 
      name=cof></INPUT> <INPUT type=hidden value=en name=hl></INPUT> 
  </TD></TR></TBODY></TABLE></FORM></CENTER><!-- Search Google -->
<H3><A 
href="http://www2.webng.com/amrlearn/Index.html">Home</A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A 
href="http://www2.webng.com/amrlearn/125.html">Previous</A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A 
href="http://www2.webng.com/amrlearn/117.html">Next</A></H3></DIV></BODY></HTML>
