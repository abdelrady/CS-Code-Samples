<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0039)http://www2.webng.com/amrlearn/133.html -->
<HTML><HEAD><TITLE>Line Transformation Algorithms With DDA Algorithms</TITLE><LINK 
href="133_files/stylesheet.css" type=text/css rel=stylesheet>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META 
content="Computer Graphics, Line Transformation Algorithms With DDA Algorithms " 
name=description>
<META 
content="Computer, Graphics, Line, Transformation, Algorithms, With, DDA, Algorithms, Line Transformation Algorithms With DDA Algorithms " 
name=keywords>
<META content="Copyright 2007 Amr Saber" name=copyright>
<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
<BODY>
<CENTER>
<DIV id=header>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 728;
google_ad_height = 90;
google_ad_format = "728x90_as";
google_ad_type = "text";
//2007-02-02: header
google_ad_channel = "7161698987";
//--></SCRIPT>

<SCRIPT src="133_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV></CENTER>
<DIV id=index>
<H3>Goooooooogle</H3>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_type = "text";
//2007-02-02: header, right
google_ad_channel = "7161698987+2593520185";
//--></SCRIPT>

<SCRIPT src="133_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV>
<DIV id=index2>
<H3>Goooooooogle</H3>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_type = "text";
google_ad_channel = "";
//--></SCRIPT>

<SCRIPT src="133_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV>
<DIV id=content>
<H3>Line Transformation Algorithms With DDA Algorithms</H3><TEXTAREA>#include&lt;windows.h&gt;
#include"math.h"
///////////////////
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
static char gszClassName[]  =  "MyWindowClass";
static HINSTANCE ghInstance  =  NULL;
int WINAPI WinMain(HINSTANCE hInstance , HINSTANCE hprevInstance , LPSTR lpCmdLine ,int nCmdShow)
{
	WNDCLASSEX WndClass;
	HWND hwnd;
	MSG Msg;
	ghInstance  =  hInstance ;
	WndClass.cbSize  =  sizeof(WNDCLASSEX);
	WndClass.style  =  NULL;
	WndClass.lpfnWndProc  =  WndProc ;
	WndClass.cbClsExtra  = 0;
	WndClass.cbWndExtra  =  0;
	WndClass.hInstance  = ghInstance ;
	WndClass.hIcon  =  LoadIcon(NULL,IDI_APPLICATION);
	WndClass.hCursor  = LoadCursor(NULL ,IDC_ARROW);
    WndClass.hbrBackground  =  (HBRUSH)(COLOR_WINDOW+20);
    WndClass.lpszMenuName  =  NULL ;
	WndClass.lpszClassName  =  gszClassName ;
	WndClass.hIconSm  =  LoadIcon(NULL , IDI_APPLICATION);
	if(!RegisterClassEx(&amp;WndClass))
	{
		MessageBox( 0, "window registeration failed!!","error",MB_ICONSTOP|MB_OK);
		return 0;
	}

	hwnd  = CreateWindowEx(WS_EX_STATICEDGE , gszClassName ," ROTATION-SCALING-TRANSLATION LINE",WS_OVERLAPPEDWINDOW ,
		CW_USEDEFAULT ,CW_USEDEFAULT,800,600,NULL,NULL,ghInstance,NULL);
	if(hwnd == NULL)
	{
		MessageBox(0,"windows greated failed!!","Error" ,MB_ICONSTOP|MB_OK);
         return 0;
	}
	ShowWindow(hwnd,nCmdShow);
	UpdateWindow(hwnd);
	while(GetMessage(&amp;Msg ,NULL ,0,0))
	{
		TranslateMessage(&amp;Msg);
		DispatchMessage(&amp;Msg);
	}
	return Msg.wParam;
}
/*******************************************************************/
/***************** drawing line with DDA algorithm *****************/
/*******************************************************************/
void DDA(HDC hdc, float x1, float y1, float x2, float y2, COLORREF col)
{
	float xb=x1;
	float yb=y1;
	float xf=x2;
	float yf=y2;
	float M=(y2-y1)/(x2-x1);
	float MInv=1/M;
	//if 'X' and 'Y' of the begining point are both greater than 
	   //'X' and 'Y' of the ending point we swap them
	if(x1&gt;x2 &amp;&amp; y1&gt;y2)
	{
		xb=x2;
	    yb=y2;
	    xf=x1;
	    yf=y1;
	}

	int x=int(xb);
	int y=int(yb);
	if((xb-xf)==0)	//parallel to the Y coordinate
		if(yb&lt;yf)
			while(y&lt;=yf)
			{
				SetPixel(hdc,x,y,col);
				y++;
			}
		else
			while(y&gt;=yf)
			{
				SetPixel(hdc,x,y,col);
				y--;
			}
	else
		if((yb-yf)==0)	//parallel to the X coordinate
		if(xb&lt;xf)
			while(x&lt;=xf)
			{
				SetPixel(hdc,x,y,col);
				x++;
			}
		else
			while(x&gt;=xf)
			{
				SetPixel(hdc,x,y,col);
				x--;
			}
	else
		if(M&gt;=1 || M&lt;=-1)
		{
			if(yf&gt;yb)
				while(y&lt;=yf)
				{
					x=int(xb+0.5);
					xb=xb+MInv;
					SetPixel(hdc,x,y,col);
					y++;
				}
			else  
				while(y&gt;=yf)
				{
					x=int(xb+0.5);
					xb=xb-MInv;
					SetPixel(hdc,x,y,col);
					y--;
				}
		}
		else
			if(xf&gt;xb)
				while(x&lt;=xf)
				{
					y=int(yb+0.5);
					yb=yb+M;
					SetPixel(hdc,x,y,col);
					x++;
				}
			else
				while(x&gt;=xf)
				{
					y=int(yb+0.5);
					yb=yb-M;
					SetPixel(hdc,x,y,col);
					x--;
				}
}
/*******************************************************************/
///////////////////////// ROTATE_ALGORITHM //////////////////////////
/*******************************************************************/
//function 
void ROTATION_ALGORITHM(double xC, double yC, double xBegin, double yBegin, double&amp; xFinal, double&amp; yFinal, double theta)
{
	xFinal = xBegin*cos(theta)-yBegin*sin(theta)-xC*cos(theta)+yC*sin(theta)+xC;

	yFinal = xBegin*sin(theta)+yBegin*cos(theta)-xC*sin(theta)-yC*cos(theta)+yC;
}
/*******************************************************************/
///////////////////////// TRANSLATE_ALGORITHM ///////////////////////
/*******************************************************************/
//function 
void TRANSLATION_ALGORITHM(double xBegin, double yBegin, double&amp; xFinal, double&amp; yFinal, double tx, double ty)
{
	xFinal = xBegin + tx;
	yFinal = yBegin + ty;
}
/*******************************************************************/
///////////////////////// SCALE_ALGORITHM ///////////////////////////
/*******************************************************************/
//function 
void SCALING_ALGORITHM(double xBegin, double yBegin, double&amp; xFinal, double&amp; yFinal, double sx, double sy)
{
	xFinal = xBegin * sx;
	yFinal = yBegin * sy;
}
//******************************************************************
double theta = 60*((22.0/7.0)/180.0);
double tx = 50;
double ty = 50;

double sx = 2;
double sy = 2;

double currentx = 0;
double currenty = 0;
/////////////////////////////
void DRAW_SHAPES(HDC hdc, double xa, double ya, double xb , double yb)
{
	double xar = 0;
	double yar = 0;
	double xbr;
	double ybr;
	
	MoveToEx(hdc, int(xa), int(ya), NULL);
	LineTo(hdc, int(xb), int(yb));

	/*rotation and draw the line*/
	currentx = 0;
	while(currentx &lt;= theta)
	{
		ROTATION_ALGORITHM(xa, ya, xa, ya, xar, yar, currentx);
	ROTATION_ALGORITHM(xa, ya, xb, yb, xbr, ybr, currentx);
	DDA(hdc,float(xar), float(yar), float(xbr), float(ybr), RGB(255, 255, 255));
	DDA(hdc,float(xa), float(ya), float(xb), float(yb), RGB(0,0,0));
	currentx += 0.001;
	}
	DDA(hdc,float(xar), float(yar), float(xbr), float(ybr), RGB(255,0,0));
	
	/*Scaling and draw the line*/
	currentx = currenty = 1;
	while(currentx &lt;= sx || currenty &lt;= sy)
	{
	SCALING_ALGORITHM(xa, ya, xar, yar, currentx, currenty);
	SCALING_ALGORITHM(xb, yb, xbr, ybr, currentx, currenty);
	DDA(hdc,float(xar), float(yar), float(xbr), float(ybr), RGB(0, 255, 255));
	DDA(hdc,float(xa), float(ya), float(xb), float(yb), RGB(0,0,0));
	currentx += 0.001;
	currenty += 0.001;
	}
	DDA(hdc,float(xar), float(yar), float(xbr), float(ybr), RGB(0,255,0));

	/*translation and draw the line*/
	currentx = currenty = 0;
	while(currentx &lt;= tx || currenty &lt;= ty)
	{
	TRANSLATION_ALGORITHM(xa, ya, xar, yar, currentx, currenty);
	TRANSLATION_ALGORITHM(xb, yb, xbr, ybr, currentx, currenty);
	DDA(hdc,float(xar), float(yar), float(xbr), float(ybr), RGB(200, 200, 0));
	DDA(hdc,float(xa), float(ya), float(xb), float(yb), RGB(0,0,0));
	currentx += 0.1;
	currenty += 0.1;
	}
	DDA(hdc,float(xar), float(yar), float(xbr), float(ybr), RGB(0,255,0));
}
//******************************************************************
double xa = 0;
double ya = 0;
double xb = 0;
double yb = 0;
/*************************************/
LRESULT CALLBACK WndProc(HWND hwnd ,UINT Message ,WPARAM wparam ,LPARAM lparam)
{
	COLORREF boundaryColor = RGB(100, 0, 100);
	COLORREF fillColor = RGB(0, 120, 0);
	HDC hdc;
	switch(Message)
	{
	case WM_CLOSE:
		DestroyWindow(hwnd);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	case WM_RBUTTONDOWN:
		hdc = GetDC(hwnd);
		xa = LOWORD(lparam);
		ya = HIWORD(lparam);
		break;
	case WM_LBUTTONDOWN:
		hdc = GetDC(hwnd);
		xb = LOWORD(lparam);
		yb = HIWORD(lparam);
		DRAW_SHAPES(hdc, xa, ya, xb, yb);
		break;
	default:
		return DefWindowProc(hwnd, Message, wparam, lparam);
	}
	return 0;
}//end of the program
</TEXTAREA> <BR>
<CENTER><IMG 
style="BORDER-RIGHT: #0066cf 1px solid; BORDER-TOP: #0066cf 1px solid; BORDER-LEFT: #0066cf 1px solid; WIDTH: 350px; BORDER-BOTTOM: #0066cf 1px solid; HEIGHT: 300px" 
src="133_files/rotrscline2.gif"> </CENTER><!-- Search Google -->
<CENTER>
<FORM action=http://www.google.com/custom method=get target=_top>
<TABLE bgColor=#ffffff>
  <TBODY>
  <TR>
    <TD vAlign=top noWrap align=left height=32><A 
      href="http://www.google.com/"><IMG alt=Google 
      src="133_files/Logo_25wht.gif" align=middle border=0></IMG></A> <LABEL 
      style="DISPLAY: none" for=sbi>Enter your search terms</LABEL> <INPUT 
      id=sbi maxLength=255 size=40 name=q></INPUT> <LABEL style="DISPLAY: none" 
      for=sbb>Submit search form</LABEL> <INPUT id=sbb type=submit value=Search name=sa></INPUT> <INPUT type=hidden 
      value=pub-9653171024150495 name=client></INPUT> <INPUT type=hidden value=1 
      name=forid></INPUT> <INPUT type=hidden value=ISO-8859-1 name=ie></INPUT> 
      <INPUT type=hidden value=ISO-8859-1 name=oe></INPUT> <INPUT type=hidden 
      value=active name=safe></INPUT> <INPUT type=hidden 
      value=GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1 
      name=cof></INPUT> <INPUT type=hidden value=en name=hl></INPUT> 
  </TD></TR></TBODY></TABLE></FORM></CENTER><!-- Search Google -->
<H3><A 
href="http://www2.webng.com/amrlearn/Index.html">Home</A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A 
href="http://www2.webng.com/amrlearn/137.html">Previous</A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A 
href="http://www2.webng.com/amrlearn/118.html">Next</A></H3></DIV></BODY></HTML>
