<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0039)http://www2.webng.com/amrlearn/122.html -->
<HTML><HEAD><TITLE>Scan Converting A Point And DDA Line Algorithm</TITLE><LINK 
href="122_files/stylesheet.css" type=text/css rel=stylesheet>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META 
content="Computer Graphics, Scan Converting A Point And DDA Line Algorithm " 
name=description>
<META 
content="Computer Graphics, Scan, Converting, A Point, And, DDA, Line, Algorithm, Digital, differential, Analyzer, (DDA), Algorithm " 
name=keywords>
<META content="Copyright 2007 Amr Saber" name=copyright>
<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
<BODY>
<CENTER>
<DIV id=header>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 728;
google_ad_height = 90;
google_ad_format = "728x90_as";
google_ad_type = "text";
//2007-02-02: header
google_ad_channel = "7161698987";
//--></SCRIPT>

<SCRIPT src="122_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV></CENTER>
<DIV id=index>
<H3>Goooooooogle</H3>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_type = "text";
//2007-02-02: header, right
google_ad_channel = "7161698987+2593520185";
//--></SCRIPT>

<SCRIPT src="122_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV>
<DIV id=index2>
<H3>Goooooooogle</H3>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-9653171024150495";
google_alternate_color = "C3D9FF";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_type = "text";
google_ad_channel = "";
//--></SCRIPT>

<SCRIPT src="122_files/show_ads.js" type=text/javascript>
</SCRIPT>
</DIV>
<DIV id=content>
<H3>Scan Converting A Point And DDA Line Algorithm</H3><TEXTAREA>#include&lt;WINDOWSX.H&gt;
#include&lt;windows.h&gt;
///////////////////
int X1, X2, Y1, Y2;
int xMin = 50, yMin = 50, xMax = 400, yMax = 400;
struct PointCode;
void intersect(PointCode&amp;, PointCode&amp;, HDC);
/////////////////////////////////////////////////
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
static char gszClassName[]  =  "MyWindowClass";
static HINSTANCE ghInstance  =  NULL;
int WINAPI WinMain(HINSTANCE hInstance , HINSTANCE hprevInstance , LPSTR lpCmdLine ,int nCmdShow)
{
	WNDCLASSEX WndClass;
	HWND hwnd;
	MSG Msg;
	ghInstance  =  hInstance ;
	WndClass.cbSize  =  sizeof(WNDCLASSEX);
	WndClass.style  =  NULL;
	WndClass.lpfnWndProc  =  WndProc;
	WndClass.cbClsExtra  = 0;
	WndClass.cbWndExtra  =  0;
	WndClass.hInstance  = ghInstance;
	WndClass.hIcon  =  LoadIcon(NULL,IDI_APPLICATION);
	WndClass.hCursor  = LoadCursor(NULL ,IDC_ARROW);
    WndClass.hbrBackground  =  (HBRUSH)(COLOR_WINDOW+0);
    WndClass.lpszMenuName  =  NULL ;
	WndClass.lpszClassName  =  gszClassName ;
	WndClass.hIconSm  =  LoadIcon(NULL , IDI_APPLICATION);
	if(!RegisterClassEx(&amp;WndClass))
	{
		MessageBox(0, "window registeration failed!!","error",MB_ICONSTOP|MB_OK);
		return 0;
	}

	hwnd  = CreateWindowEx(WS_EX_STATICEDGE , gszClassName ," Transformations",WS_OVERLAPPEDWINDOW ,
		CW_USEDEFAULT ,CW_USEDEFAULT,800,600,NULL,NULL,ghInstance,NULL);
	if(hwnd == NULL)
	{
		MessageBox(0,"windows greated failed!!","Error" ,MB_ICONSTOP|MB_OK);
         return 0;
	}
	ShowWindow(hwnd,nCmdShow);
	UpdateWindow(hwnd);
	while(GetMessage(&amp;Msg ,NULL ,0,0))
	{
		TranslateMessage(&amp;Msg);
		DispatchMessage(&amp;Msg);
	}
	return Msg.wParam;
}
/////////////////////////////////////////////////
void DDA(HDC hdc, float xPoint1, float yPoint1, float xPoint2, float yPoint2, COLORREF col)
{
	float xBegin  =  xPoint1;
	float xFinal  =  xPoint2;
	float yBegin  =  yPoint1;
	float yFinal  =  yPoint2;
	float slope = (yPoint2 - yPoint1) / (xPoint2 - xPoint1);
	float slopeInverse  =  1 / slope;

	if(xPoint1&gt;xPoint2 &amp;&amp; yPoint1&gt;yPoint2)
	{
		xBegin  =  xPoint2;
	    xFinal  =  xPoint1;
		yBegin  =  yPoint2;
	    yFinal  =  yPoint1;
	}
	int x = int(xBegin);
	int y = int(yBegin);

	// if the line is parallel to the y coordinate
	if((xBegin - xFinal) == 0)
		if(yBegin &lt; yFinal)	// and y starting point greater than y end
			while(y &lt;= yFinal)
			{
				SetPixel(hdc, x, y, col);
				y ++;	// increment y
			}
		else
			while(y &gt;= yFinal)
			{
				SetPixel(hdc, x, y, col);
				y --;	// decrement y
			}
	// if the line is parallel to the x coordinate
	else
		if((yBegin - yFinal) == 0)
			if(xBegin &lt; xFinal) // and x starting point greater than x end
				while(x &lt;= xFinal)
				{
					SetPixel(hdc, x, y, col);
					x ++;
				}
			else
				while(x &gt;= xFinal)
				{
					SetPixel(hdc, x, y, col);
					x --;
				}
	else
		if(slope &gt;= 1 || slope &lt;= -1) // new case
		{
			if(yFinal &gt; yBegin) // from begin to end
				while(y &lt;= yFinal)
				{
					x = int(xBegin + 0.5);
					xBegin = xBegin + slopeInverse;
					SetPixel(hdc, x, y, col);
					y ++;
				}
			else		// from end to begin
				while(y &gt;= yFinal)
				{
					x = int(xBegin + 0.5);
					xBegin = xBegin - slopeInverse;
					SetPixel(hdc, x, y, col);
					y --;
				}
		}
	else
		if(slopeInverse &gt;= 1 || slopeInverse &lt;= -1) // new case
		{
			if(xFinal &gt; xBegin)	// from begin to end
				while(x &lt;= xFinal)
				{
					y = int(yBegin + 0.5);
					yBegin = yBegin + slope;
					SetPixel(hdc, x, y, col);
					x ++;
				}
			else		// from end to begin
				while(x &gt;= xFinal)
				{
					y = int(yBegin + 0.5);
					yBegin = yBegin - slope;
					SetPixel(hdc, x, y, col);
					x --;
				}
		}//if
}
//==============================================/
struct PointCode
{
	bool top;
	bool bottom;
	bool right;
	bool left;

	PointCode()
	{
		top = bottom = right = left = false;
	}

	bool all_bits_are_zero()
	{
		if(!top &amp;&amp; !bottom &amp;&amp; !right &amp;&amp; !left)
			return true;
		return false;
	}
};
/////////////////////////////////////////////////
PointCode form_code(int X, int Y)
{
	PointCode code;
	if(Y &gt; yMax)
		code.top = true;
	if(Y &lt; yMin)
		code.bottom = true;
	if(X &gt; xMax)
		code.right = true;
	if(X &lt; xMin)
		code.left = true;
	return code;
}
/////////////////////////////////////////////////
int test_code(PointCode&amp; p1, PointCode&amp; p2)
{
	if(p1.all_bits_are_zero() &amp;&amp; p2.all_bits_are_zero())
		return 0;
	else if(((p1.top &amp;&amp; p2.top) || (p1.bottom &amp;&amp; p2.bottom) || (p1.right &amp;&amp; p2.right) || (p1.left &amp;&amp; p2.left)))
		return 2;
	return 1;	//intersect with window;
}
/////////////////////////////////////////////////
void test_line(int n ,PointCode p1 , PointCode p2 ,HDC hdc)
{
	switch(n)
	{
	case 0:
		DDA(hdc, X1, Y1, X2, Y2, RGB(X1+X2, Y1+Y2, X1+X2+Y1+Y2));
		//MoveToEx(hdc, X1, Y1, NULL);
		//LineTo(hdc, X2, Y2);
		break;
	case 1:
		intersect(p1, p2, hdc);
		break; 
	}
}
/////////////////////////////////////////////////
void intersect(PointCode&amp; P1 , PointCode&amp; P2 ,HDC hdc)
{
	int x1 = X1, x2 = X2, y1 = Y1, y2 = Y2, n;
	PointCode p1, p2;
	float m = float(Y2 - Y1) / float(X2 - X1);

	if(P1.top)
	{
		y1 = yMax;
		x1 = X1 + ((y1 - Y1) / m);
		p1 = form_code(x1, y1);//if the point is in the top, left
		n = test_code(p1, P2);
		X1 = x1;
		Y1 = y1;
		test_line(n, p1, P2, hdc);
		return;
	}
	if(P1.bottom)
	{
		y1 = yMin;
		x1 = X1 + ((y1 - Y1) / m);
		p1 = form_code(x1, y1);
		n = test_code(p1, P2);
		X1 = x1;
		Y1 = y1;
		test_line(n, p1, P2, hdc);
		return;
	}
	if(P1.right)
	{
		x1 = xMax;
		y1 = Y1 + ((x1 - X1) * m);
		p1 = form_code(x1, y1);
	    n = test_code(p1, P2);
		X1 = x1;
		Y1 = y1;
		test_line(n, p1, P2, hdc);
		return;
	}
	if(P1.left)
	{
		x1 = xMin;
		y1 = Y1 + ((x1 - X1) *  m);
		p1 = form_code(x1, y1);
		n = test_code(p1, P2);
		X1 = x1;
		Y1 = y1;
		test_line(n, p1, P2, hdc);
		return;
	}
	//-----------------------
	if(P2.top)
	{
		y2 = yMax;
		x2 = X2 + ((y2 - Y2) / m);
		p2 = form_code(x2, y2);
		n = test_code(P1, p2);
		X2 = x2;
		Y2 = y2;
		test_line(n, P1, p2, hdc);
		return;
	}
	 if(P2.bottom)
	{
		y2 = yMin;
		x2 = X2 + ((y2 - Y2) / m);
		p2 = form_code(x2, y2);
		n = test_code(P1, p2);
		X2 = x2;
		Y2 = y2;
		test_line(n, P1, p2, hdc);
		return;
	}
	 if(P2.right)
	{
		x2 = xMax;
		y2 = Y2 + ((x2 - X2) * m) ;
		p2 = form_code(x2, y2);
		n = test_code(P1, p2);
		X2 = x2;
		Y2 = y2;
		test_line(n, P1, p2, hdc);
		return;
	}
	if(P2.left)
	{
		x2 = xMin;
		y2 = Y2 + ((x2 - X2) * m);
		p2 = form_code(x2, y2);
		n = test_code(P1, p2);
		X2 = x2;
		Y2 = y2;
		test_line(n, P1, p2, hdc);
		return;
	}
	//------------------------------
}
/***********************************************/
LRESULT CALLBACK WndProc(HWND hwnd ,UINT Message ,WPARAM wparam ,LPARAM lparam)
{
	PointCode p1, p2;
	int n;
	HDC hdc;
	switch(Message)
	{
	case WM_CLOSE:
		DestroyWindow(hwnd);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	case WM_LBUTTONDOWN:
		X1 = GET_X_LPARAM(lparam);
		Y1 = GET_Y_LPARAM(lparam);
		break;
	case WM_MOUSEMOVE://LBUTTONUP
		hdc = GetDC(hwnd);
		X2 = LOWORD(lparam);
		Y2 = HIWORD(lparam);
		p1 = form_code(X1, Y1);
		p2 = form_code(X2, Y2);
		n = test_code(p1, p2);
		test_line(n, p1, p2, hdc);
		break;
	case WM_RBUTTONUP:
		hdc = GetDC(hwnd);
		MoveToEx(hdc, 50, 50, NULL);
		LineTo(hdc, 400, 50);
		MoveToEx(hdc, 400, 50, NULL);
		LineTo(hdc, 400, 400);
		MoveToEx(hdc, 400, 400, NULL);
		LineTo(hdc, 50, 400);
		MoveToEx(hdc, 50, 400, NULL);
		LineTo(hdc, 50, 50);
		break;
	default:
		return DefWindowProc(hwnd, Message, wparam, lparam);
	}
	return 0;
}//end of the program
</TEXTAREA> <BR>
<CENTER><IMG 
style="BORDER-RIGHT: #0066cf 1px solid; BORDER-TOP: #0066cf 1px solid; BORDER-LEFT: #0066cf 1px solid; WIDTH: 350px; BORDER-BOTTOM: #0066cf 1px solid; HEIGHT: 300px" 
src="122_files/clipp.jpg"> </CENTER><!-- Search Google -->
<CENTER>
<FORM action=http://www.google.com/custom method=get target=_top>
<TABLE bgColor=#ffffff>
  <TBODY>
  <TR>
    <TD vAlign=top noWrap align=left height=32><A 
      href="http://www.google.com/"><IMG alt=Google 
      src="122_files/Logo_25wht.gif" align=middle border=0></IMG></A> <LABEL 
      style="DISPLAY: none" for=sbi>Enter your search terms</LABEL> <INPUT 
      id=sbi maxLength=255 size=40 name=q></INPUT> <LABEL style="DISPLAY: none" 
      for=sbb>Submit search form</LABEL> <INPUT id=sbb type=submit value=Search name=sa></INPUT> <INPUT type=hidden 
      value=pub-9653171024150495 name=client></INPUT> <INPUT type=hidden value=1 
      name=forid></INPUT> <INPUT type=hidden value=ISO-8859-1 name=ie></INPUT> 
      <INPUT type=hidden value=ISO-8859-1 name=oe></INPUT> <INPUT type=hidden 
      value=active name=safe></INPUT> <INPUT type=hidden 
      value=GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1 
      name=cof></INPUT> <INPUT type=hidden value=en name=hl></INPUT> 
  </TD></TR></TBODY></TABLE></FORM></CENTER><!-- Search Google -->
<H3><A 
href="http://www2.webng.com/amrlearn/Index.html">Home</A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A 
href="http://www2.webng.com/amrlearn/123.html">Previous</A>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A 
href="http://www2.webng.com/amrlearn/132.html">Next</A></H3></DIV></BODY></HTML>
