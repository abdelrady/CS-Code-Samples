<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0069)http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-oneli1.html -->
<HTML><HEAD><TITLE></TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1256"><!--Created by TeX4ht from theory-bk-one.tex-->
<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff>[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-oneli2.html">next</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-onese5.html">prev</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-onese5.html#tailtheory-bk-onese5.html">prev-tail</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-oneli1.html#tailtheory-bk-oneli1.html">tail</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-one.html#theory-bk-oneli1.html">up</A>] 

<H3><A name=20007-25000>&nbsp;</A><A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk.html#Q2-20007-25" 
name=Q1-20007-25>Exercises</A></H3><A name=20007-25001r1.1>&nbsp;</A><A 
name=20007-25002r1.1.1>&nbsp;</A> 
<DL>
  <DT><STRONG>1.1.1 </STRONG>
  <DD>
  <OL type=a>
    <LI><A name=20007-25003xa>&nbsp;</A>Find all the alphabets that use only 
    symbols from the set {a, b, c}. Which of the alphabets is unary? Which is 
    binary? 
    <LI><A name=20007-25004xb>&nbsp;</A>Let S be a set of t symbols. How many 
    unary alphabets can be constructed from the symbols of S? How many binary 
    alphabets?</LI></OL><A name=20007-25005r1.1.2>&nbsp;</A> 
  <DT><STRONG>1.1.2 </STRONG>
  <DD>For each of the following conditions find all the strings <IMG alt=a 
  src="theory-bk-oneli1_files/cmmi10-b.gif"> over the alphabet {a, b} that 
  satisfy the condition. 
  <OL type=a>
    <LI><A name=20007-25006xa>&nbsp;</A>No symbol is repeated in <IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif">. 
    <LI><A name=20007-25007xb>&nbsp;</A>The length of <IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif"> is 3, that is, |<IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif">| = 3.</LI></OL><A 
  name=20007-25008r1.1.3>&nbsp;</A> 
  <DT><STRONG>1.1.3 </STRONG>
  <DD>
  <OL type=a>
    <LI><A name=20007-25009xa>&nbsp;</A>Find <IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif"><IMG alt=b 
    src="theory-bk-oneli1_files/cmmi10-c.gif" align=middle>, <IMG alt=b 
    src="theory-bk-oneli1_files/cmmi10-c.gif" align=middle><IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif">, <IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif"><SUP>2</SUP>, <IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif"><SUP>0</SUP><IMG alt=b 
    src="theory-bk-oneli1_files/cmmi10-c.gif" align=middle><SUP>2</SUP>, and 
    <IMG alt=a src="theory-bk-oneli1_files/cmmi10-b.gif"><SUP>2</SUP><IMG alt=b 
    src="theory-bk-oneli1_files/cmmi10-c.gif" align=middle><SUP>2</SUP><IMG 
    alt=e src="theory-bk-oneli1_files/cmmi10-f.gif"> for the case that <IMG 
    alt=a src="theory-bk-oneli1_files/cmmi10-b.gif"> = a and <IMG alt=b 
    src="theory-bk-oneli1_files/cmmi10-c.gif" align=middle> = ab. 
    <LI><A name=20007-25010xb>&nbsp;</A>Find all the pairs of strings <IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif"> and <IMG alt=b 
    src="theory-bk-oneli1_files/cmmi10-c.gif" align=middle> over the alphabet 
    {a, b} that satisfy <IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif"><IMG alt=b 
    src="theory-bk-oneli1_files/cmmi10-c.gif" align=middle> = abb.</LI></OL><A 
  name=20007-25011r1.1.4>&nbsp;</A> 
  <DT><STRONG>1.1.4 </STRONG>
  <DD>Let <IMG alt=a src="theory-bk-oneli1_files/cmmi10-b.gif"> be the string 
  011. 
  <OL type=a>
    <LI><A name=20007-25012xa>&nbsp;</A>Find all the proper prefixes of <IMG 
    alt=a src="theory-bk-oneli1_files/cmmi10-b.gif"><SUP>2</SUP>. 
    <LI><A name=20007-25013xb>&nbsp;</A>Find all the substrings <IMG alt=b 
    src="theory-bk-oneli1_files/cmmi10-c.gif" align=middle> of <IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif"><IMG alt=a 
    src="theory-bk-oneli1_files/cmmi10-b.gif"><SUP>rev</SUP> that satisfy <IMG 
    alt=b src="theory-bk-oneli1_files/cmmi10-c.gif" align=middle> = <IMG alt=b 
    src="theory-bk-oneli1_files/cmmi10-c.gif" 
  align=middle><SUP>rev</SUP>.</LI></OL><A name=20007-25014r1.1.5>&nbsp;</A> 
  <DT><STRONG>1.1.5 </STRONG>
  <DD>How many strings of length t are in <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif">* if <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif"> is an alphabet of cardinality r. <A 
  name=20007-25015r1.1.6>&nbsp;</A> 
  <DT><STRONG>1.1.6 </STRONG>
  <DD>For each of the following cases give the first 20 strings in {a, b, c}*. 
  <OL type=a>
    <LI><A name=20007-25016xa>&nbsp;</A>{a, b, c}* is given in alphabetical 
    ordering. 
    <LI><A name=20007-25017xb>&nbsp;</A>{a, b, c}* is given in canonical 
    ordering.</LI></OL><A name=20007-25018r1.1.7>&nbsp;</A> 
  <DT><STRONG>1.1.7 </STRONG>
  <DD>Let S be the set of all the strings over the alphabet {a, b, c}, that is, 
  S = {a, b, c}*. Let S<SUB>1</SUB> and S<SUB>2</SUB> be subsets of S. Which are 
  the strings that appear both in S<SUB>1</SUB> and in S<SUB>2</SUB> in each of 
  the following cases? 
  <OL type=a>
    <LI><A name=20007-25019xa>&nbsp;</A>S<SUB>1</SUB> contains the t 
    alphabetically smallest strings in S, and S<SUB>2</SUB> contains all the 
    strings in S of length t at most. 
    <LI><A name=20007-25020xb>&nbsp;</A>S<SUB>1</SUB> contains the 127 
    alphabetically smallest strings in S, and S<SUB>2</SUB> contains the 127 
    canonically smallest strings in S.</LI></OL><A 
  name=20007-25021r1.1.8>&nbsp;</A> 
  <DT><STRONG>1.1.8 </STRONG>
  <DD>Show that if <IMG alt=S src="theory-bk-oneli1_files/cmr10-6.gif"> is an 
  alphabet, then<A name=20007-25022> </A><IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif">* has the following representations. 
  <OL type=a>
    <LI><A name=20007-25023xa>&nbsp;</A>Binary representation 
    <LI><A name=20007-25024xb>&nbsp;</A>Unary representation</LI></OL><A 
  name=20007-25025r1.1.9>&nbsp;</A> 
  <DT><STRONG>1.1.9 </STRONG>
  <DD>Find a binary representation for the set of rational numbers. <A 
  name=20007-25026r1.1.10>&nbsp;</A> 
  <DT><STRONG>1.1.10 </STRONG>
  <DD>Show that if D has a binary representation f<SUB>1</SUB>, then it also has 
  a binary representation f<SUB>2</SUB>, such that f<SUB>2</SUB>(e) is an 
  infinite set for each element e of D. <A name=20007-25027r1.1.11>&nbsp;</A> 
  <DT><STRONG>1.1.11 </STRONG>
  <DD>Let f<SUB>1</SUB> and f<SUB>2</SUB> be binary representations for 
  D<SUB>1</SUB> and D<SUB>2</SUB>, respectively. Find a binary representation f 
  for each of the following sets. 
  <OL type=a>
    <LI><A name=20007-25028xa>&nbsp;</A>D<SUB>1</SUB> <IMG alt=" U " 
    src="theory-bk-oneli1_files/cmsy10-5b.gif"> D<SUB>2</SUB> 
    <LI><A name=20007-25029xb>&nbsp;</A>D<SUB>1</SUB> × D<SUB>2</SUB> 
    <LI><A name=20007-25030xc>&nbsp;</A>D<SUB>1</SUB>*</LI></OL><A 
  name=20007-25031r1.1.12>&nbsp;</A> 
  <DT><STRONG>1.1.12 </STRONG>
  <DD>Show that the set of real numbers does not have a binary representation. 
  <A name=20007-25032r1.2>&nbsp;</A><A name=20007-25033r1.2.1>&nbsp;</A> 
  <DT><STRONG>1.2.1 </STRONG>
  <DD>Let L be the language {<IMG alt=e 
  src="theory-bk-oneli1_files/cmmi10-f.gif">, 0, 10}. Determine the following 
  sets. 
  <OL type=a>
    <LI><A name=20007-25034xa>&nbsp;</A>L <IMG alt=" U " 
    src="theory-bk-oneli1_files/cmsy10-5b.gif"> <IMG alt="--&#10;L" 
    src="theory-bk-oneli1_files/theory-bk-one53x.gif"> 
    <LI><A name=20007-25035xb>&nbsp;</A>L <IMG alt=" /~\ " 
    src="theory-bk-oneli1_files/cmsy10-5c.gif"> <IMG alt=L- 
    src="theory-bk-oneli1_files/theory-bk-one54x.gif"> 
    <LI><A name=20007-25036xc>&nbsp;</A>L<IMG alt="--&#10;L" 
    src="theory-bk-oneli1_files/theory-bk-one55x.gif"> 
    <LI><A name=20007-25037xd>&nbsp;</A><IMG alt="--&#10;L" 
    src="theory-bk-oneli1_files/theory-bk-one56x.gif">L 
    <LI><A name=20007-25038xe>&nbsp;</A>L<SUP>2</SUP> 
    <LI><A name=20007-25039xf>&nbsp;</A>L × L</LI></OL><A 
  name=20007-25040r1.2.2>&nbsp;</A> 
  <DT><STRONG>1.2.2 </STRONG>
  <DD>Let G = &lt;N, <IMG alt=S src="theory-bk-oneli1_files/cmr10-6.gif">, P, 
  S&gt; be a grammar in which N = {S}, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif"> = {a}, and each production rule 
  contains at most 3 symbols. What are the possible production rules in P? <A 
  name=20007-25041r1.2.3>&nbsp;</A> 
  <DT><STRONG>1.2.3 </STRONG>
  <DD>Let G be the grammar &lt;N, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif">, P, S&gt;, where N = {S}, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif"> = {a, b}, and P = {S <IMG alt="-->" 
  src="theory-bk-oneli1_files/cmsy10-21.gif"> <IMG alt=e 
  src="theory-bk-oneli1_files/cmmi10-f.gif">, S <IMG alt="-->" 
  src="theory-bk-oneli1_files/cmsy10-21.gif"> aSbS}. 
  <OL type=a>
    <LI><A name=20007-25042xa>&nbsp;</A>Find all the strings that are directly 
    derivable from SaS in G. 
    <LI><A name=20007-25043xb>&nbsp;</A>Find all the derivations in G that start 
    at S and end at ab. 
    <LI><A name=20007-25044xc>&nbsp;</A>Find all the sentential forms of G of 
    length 4 at most.</LI></OL><A name=20007-25045r1.2.4>&nbsp;</A> 
  <DT><STRONG>1.2.4 </STRONG>
  <DD>Find all the derivations of length 3 at most that start at S in the 
  grammar &lt;N, <IMG alt=S src="theory-bk-oneli1_files/cmr10-6.gif">, P, S&gt; 
  whose production rules are listed below. 
  <P>
  <CENTER><PRE><IMG alt="  S  -->   AS&#10;aS  -->   bb&#10; A  -->   aa" src="theory-bk-oneli1_files/theory-bk-one57x.gif"></PRE></CENTER><A 
  name=20007-25046r1.2.5>&nbsp;</A> 
  <DT><STRONG>1.2.5 </STRONG>
  <DD>For each of the following sets of production rules P find all the strings 
  of length 4 or less in the language generated by the grammar &lt;N, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif">, P, S&gt;. 
  <P>
  <CENTER><PRE><IMG alt="                             S  -->   aSA&#10;                               -->   bSB&#10;                               -->   X&#10;                           aA  -->   Aa&#10;                           bA  -->   Ab&#10;                          aB   -->   Ba&#10;S  -->   aa                  bB   -->   Bb&#10;   -->   bb                 XA   -->   Xa&#10;   -->   aSa                     -->   a&#10;   -->   bSb                XB   -->   Xb&#10;   -->   SS                      -->   b&#10;   (a)                          (b)" src="theory-bk-oneli1_files/theory-bk-one58x.gif"></PRE></CENTER><A 
  name=20007-25047r1.2.6>&nbsp;</A> 
  <DT><STRONG>1.2.6 </STRONG>
  <DD>Give two parse trees for the string aababb in the grammar G = &lt;N, <IMG 
  alt=S src="theory-bk-oneli1_files/cmr10-6.gif">, P, S&gt;, whose production 
  rules are listed below. 
  <P>
  <CENTER><PRE><IMG alt=" S   -->  b&#10;    -->  aA&#10;    -->  aS&#10;A   -->  Ab&#10;    -->  Sa&#10;    -->  a" src="theory-bk-oneli1_files/theory-bk-one59x.gif"></PRE></CENTER><A 
  name=20007-25048r1.2.7>&nbsp;</A> 
  <DT><STRONG>1.2.7 </STRONG>
  <DD>Consider the grammar G = &lt;N, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif">, P, E&gt; for arithmetic 
  expressions, where N = {E, T, F}, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif"> = {+, *, (, ), a}, and P is the set 
  consisting of the following production rules. 
  <P>
  <CENTER><PRE><IMG alt=" E  -->   E + T&#10;E  -->   T&#10;T  -->   T *F&#10;   -->   F&#10;F  -->   (E)&#10;   -->   a" src="theory-bk-oneli1_files/theory-bk-one60x.gif"></PRE></CENTER>
  <P>Give the derivation tree for the expression a * (a + a) in G. <A 
  name=20007-25049r1.2.8>&nbsp;</A> </P>
  <DT><STRONG>1.2.8 </STRONG>
  <DD>Let G = &lt;N, <IMG alt=S src="theory-bk-oneli1_files/cmr10-6.gif">, P, 
  S&gt; be the grammar with the following production rules. Find the derivation 
  graph for the string a<SUP>3</SUP>b<SUP>3</SUP>c<SUP>3</SUP> in G. 
  <P>
  <CENTER><PRE><IMG alt="  S   -->  aSBc&#10;     -->  e&#10;cB   -->  Bc&#10;aB   -->  ab&#10;bB   -->  bb" src="theory-bk-oneli1_files/theory-bk-one61x.gif"></PRE></CENTER><A 
  name=20007-25050r1.2.9>&nbsp;</A> 
  <DT><STRONG>1.2.9 </STRONG>
  <DD>For each of the following languages give a grammar that generates the 
  language. 
  <OL type=a>
    <LI><A name=20007-25051xa>&nbsp;</A>{ x01 | x is in {0, 1}* } 
    <LI><A name=20007-25052xb>&nbsp;</A>{01, 10}* 
    <LI><A name=20007-25053xc>&nbsp;</A>{ x | x is in {a, b}*, and the number of 
    a's in x or the number of b's in x is equal to 1 } 
    <LI><A name=20007-25054xd>&nbsp;</A>{ 0<SUP>i</SUP>1<SUP>j</SUP> | i <IMG 
    alt=">=" src="theory-bk-oneli1_files/cmsy10-15.gif" align=middle> j } 
    <LI><A name=20007-25055xe>&nbsp;</A>{ x | x is in {0, 1}*, and x = 
    x<SUP>rev</SUP> } 
    <LI><A name=20007-25056xf>&nbsp;</A>{ x | x is in {0, 1}*, and each 01 in x 
    is followed by 10 } 
    <LI><A name=20007-25057xg>&nbsp;</A>{ x | x is in {0, 1}*, and the length of 
    x is not divisible by 3 } 
    <LI><A name=20007-25058xh>&nbsp;</A>{ x | x is in {a, b}*, and x is of odd 
    length if and only if it ends with b } 
    <LI><A name=20007-25059xi>&nbsp;</A>{ x | x is in {a, b}*, and abb is not a 
    substring of x } 
    <LI><A name=20007-25060xj>&nbsp;</A>{ x#y | x is in {a, b}*, and y is a 
    permutation of x } 
    <LI><A name=20007-25061xk>&nbsp;</A>{ 
    a<SUP>i</SUP>b<SUP>i</SUP>c<SUP>i</SUP>d<SUP>i</SUP> | i is a natural number 
    } 
    <LI><A name=20007-25062xl>&nbsp;</A>{ 
    a<SUP>i<SUB>1</SUB></SUP>#a<SUP>i<SUB>2</SUB></SUP>#a<SUP>i<SUB>3</SUB></SUP># 
    <IMG alt=. src="theory-bk-oneli1_files/cmsy10-1.gif"> <IMG alt=. 
    src="theory-bk-oneli1_files/cmsy10-1.gif"> <IMG alt=. 
    src="theory-bk-oneli1_files/cmsy10-1.gif"> #a<SUP>i<SUB>n</SUB></SUP> | n 
    <IMG alt=">=" src="theory-bk-oneli1_files/cmsy10-15.gif" align=middle> 2 and 
    i<SUB>j</SUB> = i<SUB>k</SUB> for some 1 <IMG alt="<=" 
    src="theory-bk-oneli1_files/cmsy10-14.gif" align=middle> j &lt; k <IMG 
    alt="<=" src="theory-bk-oneli1_files/cmsy10-14.gif" align=middle> n } 
    <LI><A name=20007-25063xm>&nbsp;</A>{ 
    aba<SUP>2</SUP>b<SUP>2</SUP>a<SUP>3</SUP>b<SUP>3</SUP> <IMG alt=. 
    src="theory-bk-oneli1_files/cmsy10-1.gif"> <IMG alt=. 
    src="theory-bk-oneli1_files/cmsy10-1.gif"> <IMG alt=. 
    src="theory-bk-oneli1_files/cmsy10-1.gif"> a<SUP>n</SUP>b<SUP>n</SUP> | n is 
    a natural number }</LI></OL><A name=20007-25064r1.2.10>&nbsp;</A> 
  <DT><STRONG>1.2.10 </STRONG>
  <DD>For each of the following conditions show how, from any arbitrary given 
  pair of grammars G<SUB>1</SUB> = &lt;N<SUB>1</SUB>, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif"><SUB>1</SUB>, P<SUB>1</SUB>, 
  S<SUB>1</SUB>&gt; and G<SUB>2</SUB> = &lt;N<SUB>2</SUB>, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif"><SUB>2</SUB>, P<SUB>2</SUB>, 
  S<SUB>2</SUB>&gt;, a grammar G<SUB>3</SUB> = &lt;N<SUB>3</SUB>, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif"><SUB>3</SUB>, P<SUB>3</SUB>, 
  S<SUB>3</SUB>&gt; that satisfies the condition can be constructed. 
  <OL type=a>
    <LI><A name=20007-25065xa>&nbsp;</A>L(G<SUB>3</SUB>)&nbsp;=&nbsp;{ w | 
    w<SUP>rev</SUP> is in L(G<SUB>1</SUB>) } 
    <LI><A name=20007-25066xb>&nbsp;</A>L(G<SUB>3</SUB>) = L(G<SUB>1</SUB>) <IMG 
    alt=" U " src="theory-bk-oneli1_files/cmsy10-5b.gif"> L(G<SUB>2</SUB>) 
    <LI><A name=20007-25067xc>&nbsp;</A>L(G<SUB>3</SUB>) = 
    L(G<SUB>1</SUB>)L(G<SUB>2</SUB>) 
    <LI><A name=20007-25068xd>&nbsp;</A>L(G<SUB>3</SUB>) = (L(G<SUB>1</SUB>))* 
    <LI><A name=20007-25069xe>&nbsp;</A>L(G<SUB>3</SUB>) = L(G<SUB>1</SUB>) <IMG 
    alt=" /~\ " src="theory-bk-oneli1_files/cmsy10-5c.gif"> 
  L(G<SUB>2</SUB>)</LI></OL><A name=20007-25070r1.2.11>&nbsp;</A> 
  <DT><STRONG>1.2.11 </STRONG>
  <DD>Show that from each grammar G<SUB>1</SUB> = &lt;N, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif">, P<SUB>1</SUB>, S&gt; a 
  two-nonterminal- symbols grammar G<SUB>2</SUB> = &lt;{S, A}, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif">, P<SUB>2</SUB>, S&gt; can be 
  constructed such that L(G<SUB>1</SUB>) = L(G<SUB>2</SUB>). <A 
  name=20007-25071r1.2.12>&nbsp;</A> 
  <DT><STRONG>1.2.12 </STRONG>
  <DD>Give the leftmost derivation and a nonleftmost derivation for the string 
  abbabb in the grammar of Exercise&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-oneli1.html#20007-25046r1.2.5">1.2.5</A>. 
  <A name=20007-25072r1.2.13>&nbsp;</A> 
  <DT><STRONG>1.2.13 </STRONG>
  <DD>For each of the following cases find all the possible grammars G that 
  satisfy the case, where G = &lt;N, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif">, P, S&gt; with N = {S}, <IMG alt=S 
  src="theory-bk-oneli1_files/cmr10-6.gif"> = {a, b}, and P being a subset of {S 
  <IMG alt="-->" src="theory-bk-oneli1_files/cmsy10-21.gif"> <IMG alt=e 
  src="theory-bk-oneli1_files/cmmi10-f.gif">, S <IMG alt="-->" 
  src="theory-bk-oneli1_files/cmsy10-21.gif"> abAS, S <IMG alt="-->" 
  src="theory-bk-oneli1_files/cmsy10-21.gif"> ab, bA <IMG alt="-->" 
  src="theory-bk-oneli1_files/cmsy10-21.gif"> aS}. 
  <OL type=a>
    <LI><A name=20007-25073xa>&nbsp;</A>G is a Type 3 grammar. 
    <LI><A name=20007-25074xb>&nbsp;</A>G is a Type 2 grammar, but not of Type 
    3. 
    <LI><A name=20007-25075xc>&nbsp;</A>G is a Type 1 grammar, but not of Type 
    2.</LI></OL><A name=20007-25076r1.3>&nbsp;</A><A 
  name=20007-25077r1.3.1>&nbsp;</A> 
  <DT><STRONG>1.3.1 </STRONG>
  <DD>Consider the program P in Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-oneli1.html#20007-25078r1.E.1">1.E.1</A>(a). 
  What are the outputs of P on input "2, 2"? On input "3, 2"? 
  <HR>

  <CENTER>
  <TABLE>
    <TBODY>
    <TR>
      <TD><A name=20007-25078r1.E.1>&nbsp;</A> 
        <TABLE width="100%">
          <TBODY>
          <TR vAlign=bottom>
            <TD noWrap>
              <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
                <TBODY>
                <TR>
                  <TD><PRE><TT>sum1</TT> := 0
<TT>sum2</TT> := 0
<B>do</B>
    <B>if</B> <I>eof</I> <B>then</B> <B>accept</B>
    <B>do</B>
        <B>read</B> <TT>x</TT>
        <TT>sum1</TT> := <TT>sum1</TT> + <TT>x</TT>
    <B>or</B>
        <B>read</B> <TT>x</TT>
        <B>write</B> <TT>x</TT>
        <TT>sum2</TT> := <TT>sum2</TT> + <TT>x</TT>
    <B>until</B> <TT>sum1</TT><IMG alt=/= src="theory-bk-oneli1_files/theory-bk-one62x.gif" align=middle> <TT>sum2</TT>
<B>until</B> false                </PRE></TD></TR></TBODY></TABLE></TD>
            <TD></TD>
            <TD noWrap>
              <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
                <TBODY>
                <TR>
                  <TD><PRE><TT>x</TT> := ?
<B>write</B> <TT>x</TT>
<B>do</B>
    <B>if</B> <I>eof</I> <B>then</B> <B>accept</B>
    <B>read</B> <TT>y</TT>
<B>until</B> <TT>x</TT><IMG alt=/= src="theory-bk-oneli1_files/theory-bk-one63x.gif" align=middle> <TT>y</TT>                </PRE></TD></TR></TBODY></TABLE></TD></TR>
          <TR>
            <TD align=middle>(a) </TD>
            <TD></TD>
            <TD align=middle>(b) </TD></TR></TBODY></TABLE><A 
        name=20007-25078r1.E.1>&nbsp;</A> <BR>
        <TABLE>
          <TBODY>
          <TR vAlign=baseline>
            <TD><NOBR><STRONG>Figure 1.E.1</STRONG></NOBR></TD>
            <TD></TD></TR></TBODY></TABLE>
        <CENTER></CENTER></TD></TR></TBODY></TABLE></CENTER>
  <HR>
  <A name=20007-25079r1.3.2>&nbsp;</A> 
  <DT><STRONG>1.3.2 </STRONG>
  <DD>Consider the program P in Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-oneli1.html#20007-25078r1.E.1">1.E.1</A>(b). 
  Assume that P has the domain of variables {0, 1, 2, 3, 4, 5}. What are the 
  outputs of P on input "2, 2"? On input "3, 2"? <A 
  name=20007-25080r1.3.3>&nbsp;</A> 
  <DT><STRONG>1.3.3 </STRONG>
  <DD>For each of the following cases write a program that corresponds to the 
  case. Assume that the variables have the set of natural numbers as the domain 
  of the variables, and 0 as an initial value. 
  <OL type=a>
    <LI><A name=20007-25081xa>&nbsp;</A>The program outputs an input value v 
    such that v + 2 does not appear in the input. 
    <P><I>Example</I>: On input "1, 4, 2, 3" the program should have an 
    accepting computation with output "3", and an accepting computation with 
    output "4". Moreover, each accepting computation of the program should 
    provide either the output "3" or the output "4". </P>
    <LI><A name=20007-25082xb>&nbsp;</A>The program outputs an input value v 
    such that v + 2 also appears in the input. 
    <P><I>Example</I>: On input "1, 4, 3, 2" the program should have an 
    accepting computation with output "1", and an accepting computation with 
    output "2". Moreover, each accepting computation of the program should 
    provide either the output "1" or the output "2". </P>
    <LI><A name=20007-25083xc>&nbsp;</A>The program outputs a value that does 
    not appear exactly twice in the input. 
    <P><I>Example</I>: On input "1, 4, 1, 4, 3, 1" the program should have for 
    each i<IMG alt=/= src="theory-bk-oneli1_files/theory-bk-one64x.gif" 
    align=middle> 4 an accepting computation with output i (i.e., i = 0, 1, 2, 
    3, 5, 6,&nbsp;. . . ). Moreover, each accepting computation of the program 
    should provide one of these outputs. </P>
    <LI><A name=20007-25084xd>&nbsp;</A>The program outputs an input value v 
    that appears as the <I>v</I>th value in the input. 
    <P><I>Example</I>: On input "3, 2, 1, 2, 5, 3" the program should have an 
    accepting computation with output "2", and an accepting computation with 
    output "5". Moreover, each accepting computation of the program should 
    provide either of these outputs. </P>
    <LI><A name=20007-25085xe>&nbsp;</A>The program outputs an input value v 
    that appears exactly v times in the input. 
    <P><I>Example</I>: On input "3, 2, 1, 2, 5, 3" the program should have an 
    accepting computation with output "1", and an accepting computation with 
    output "2". Moreover, each accepting computation of the program should 
    provide either of these outputs. </P>
    <LI><A name=20007-25086xf>&nbsp;</A>The program accepts exactly those inputs 
    whose values cannot be sorted into a sequence of consecutive numbers. 
    <P><I>Example</I>: The program should accept the input "1, 2, 1", and the 
    input "1, 4, 2". On the other hand, the program should reject the input "1, 
    3, 2".</P></LI></OL><A name=20007-25087r1.3.4>&nbsp;</A> 
  <DT><STRONG>1.3.4 </STRONG>
  <DD>For each of the following cases write a program that computes the given 
  relation. 
  <OL type=a>
    <LI><A name=20007-25088xa>&nbsp;</A>{ (x, y) | There is a value in the 
    domain of the variables that does not appear in x and does not appear in y 
    }. 
    <P><I>Example</I>: With the domain of variables {1, 2, 3, 4, 5, 6} on input 
    "1, 2, 4, 5, 6" the program can have any output that does not contain the 
    value&nbsp;3. </P>
    <LI><A name=20007-25089xb>&nbsp;</A>{ (x, y) | x is not empty, and the first 
    value in x is equal to the first value in y }.</LI></OL><A 
  name=20007-25090r1.3.5>&nbsp;</A> 
  <DT><STRONG>1.3.5 </STRONG>
  <DD>Let P<SUB>1</SUB> and P<SUB>2</SUB> be any two given programs. Find a 
  program P<SUB>3</SUB> that computes the union R(P<SUB>1</SUB>) <IMG alt=" U " 
  src="theory-bk-oneli1_files/cmsy10-5b.gif"> R(P<SUB>2</SUB>). <A 
  name=20007-25091r1.3.6>&nbsp;</A> 
  <DT><STRONG>1.3.6 </STRONG>
  <DD>Let P be the program in Example&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-onese3.html#20003-19016t1.3.13">1.3.13</A>. 
  Give the sequence of moves between the configurations of P in the computation 
  of P on input "1, 2, 1" that has the minimal number of moves. <A 
  name=20007-25092r1.4>&nbsp;</A><A name=20007-25093r1.4.1>&nbsp;</A> 
  <DT><STRONG>1.4.1 </STRONG>
  <DD>Consider the following problem K<SUB>1</SUB>. 
  <DL>
    <DT><STRONG><STRONG>Domain: </STRONG></STRONG>
    <DD>{ (a, b) | a, b are natural numbers }. 
    <DT><STRONG><STRONG>Question:</STRONG> </STRONG>
    <DD>What is the value of the natural number c that satisfies the equality 
    a<SUP>2</SUP> + b<SUP>2</SUP> = c<SUP>2</SUP>?</DD></DL>Find a decision 
  problem K<SUB>2</SUB> whose solutions are defined at the same instances as for 
  K<SUB>1</SUB>. <A name=20007-25094r1.4.2>&nbsp;</A> 
  <DT><STRONG>1.4.2 </STRONG>
  <DD>Let K be the following decision problem. 
  <DL>
    <DT><STRONG><STRONG>Domain: </STRONG></STRONG>
    <DD>{ (a, b, c) | a, b, c are natural numbers }. 
    <DT><STRONG><STRONG>Question:</STRONG> </STRONG>
    <DD>Is there a pair of natural numbers x and y such that the equality 
    ax<SUP>2</SUP> + by = c holds?</DD></DL>
  <OL type=a>
    <LI><A name=20007-25095xa>&nbsp;</A>Write a program that decides K. 
    <LI><A name=20007-25096xb>&nbsp;</A>Write a program that partially decides 
    K, but does not decide K.</LI></OL><A name=20007-25097r1.4.3>&nbsp;</A> 
  <DT><STRONG>1.4.3 </STRONG>
  <DD>Show that the following problems are partially decidable<A 
  name=20007-25098> </A>for Type 0 grammars. 
  <OL type=a>
    <LI><A name=20007-25099xa>&nbsp;</A>Membership problem<A name=20007-25100> 
    </A>
    <LI><A name=20007-25101xb>&nbsp;</A>Nonemptiness problem<A name=20007-25102> 
    </A></LI></OL><A name=20007-25103r1.4.4>&nbsp;</A> 
  <DT><STRONG>1.4.4 </STRONG>
  <DD>Show that the membership problem is decidable for Type 1<A 
  name=20007-25104> </A>grammars. <A name=20007-25105r1.4.5>&nbsp;</A> 
  <DT><STRONG>1.4.5 </STRONG>
  <DD>Show that the inequivalence problem is partially decidable for<A 
  name=20007-25106> </A>Type 1 grammars. <A name=20007-25107r1.4.6>&nbsp;</A> 
  <DT><STRONG>1.4.6 </STRONG>
  <DD>Which of the following statements is correct? 
  <OL type=a>
    <LI><A name=20007-25108xa>&nbsp;</A>If the emptiness problem is decidable 
    for Type 3 grammars, then it is also decidable for Type 0 grammars. 
    <LI><A name=20007-25109xb>&nbsp;</A>If the emptiness problem is undecidable 
    for Type 3 grammars, then it is also undecidable for Type 0 grammars. 
    <LI><A name=20007-25110xc>&nbsp;</A>If the emptiness problem is decidable 
    for Type 0 grammars, then it is also decidable for Type 3 grammars. 
    <LI><A name=20007-25111xd>&nbsp;</A>If the emptiness problem is undecidable 
    for Type 0 grammars, then it is also undecidable for Type 3 
  grammars.</LI></OL></DD></DL>
<P>A <I>polynomial<A name=20007-25112> </A>expression over the natural 
numbers</I>, or simply a <I>polynomial expression</I> when the natural numbers 
are understood, is an expression defined recursively in the following manner. 
<OL type=a>
  <LI><A name=20007-25113xa>&nbsp;</A>Each natural number is a polynomial 
  expression of degree 0. 
  <LI><A name=20007-25114xb>&nbsp;</A>Each variable is a polynomial expression 
  of degree 1. 
  <LI><A name=20007-25115xc>&nbsp;</A>If E<SUB>1</SUB> and E<SUB>2</SUB> are 
  polynomial expressions of degree d<SUB>1</SUB> and d<SUB>2</SUB>, 
  respectively, then 
  <OL type=i>
    <LI><A name=20007-25116xc1>&nbsp;</A>(E<SUB>1</SUB> + E<SUB>2</SUB>) and 
    (E<SUB>1</SUB> - E<SUB>2</SUB>) are polynomial expressions of degree 
    max(d<SUB>1</SUB>, d<SUB>2</SUB>). 
    <LI><A name=20007-25117xc2>&nbsp;</A>(E<SUB>1</SUB> * E<SUB>2</SUB>) is a 
    polynomial expression of degree d<SUB>1</SUB> + 
d<SUB>2</SUB>.</LI></OL></LI></OL>
<P>A polynomial is called a <I>Diophantine<A name=20007-25118> 
</A>polynomial</I> if it can be is represented by a polynomial expression, and 
its variables are over the natural numbers. <I>Hilbert's<A name=20007-25119> 
</A>tenth problem</I> is the problem of determining for any given Diophantine 
polynomial Q(x<SUB>1</SUB>, . . . , x<SUB>n</SUB>) with variables 
x<SUB>1</SUB>,&nbsp;. . . ,&nbsp;x<SUB>n</SUB> whether or not there exist <IMG 
alt=^x src="theory-bk-oneli1_files/theory-bk-one65x.gif"><SUB>1</SUB>,&nbsp;. . 
. ,&nbsp;<IMG alt=^x 
src="theory-bk-oneli1_files/theory-bk-one66x.gif"><SUB>n</SUB> such that Q(<IMG 
alt=x^ src="theory-bk-oneli1_files/theory-bk-one67x.gif"><SUB>1</SUB>, . . . , 
<IMG alt=^x src="theory-bk-oneli1_files/theory-bk-one68x.gif"><SUB>n</SUB>) = 0. 

<P>A <I>LOOP<A name=20007-25120> </A>program</I> is a program that consists only 
of instructions of the form <TT>x</TT> <IMG alt="<--" 
src="theory-bk-oneli1_files/cmsy10-20.gif"> 0, <TT>x</TT> <IMG alt="<--" 
src="theory-bk-oneli1_files/cmsy10-20.gif"> <TT>y</TT>, <TT>x</TT> <IMG 
alt="<--" src="theory-bk-oneli1_files/cmsy10-20.gif"> <TT>x</TT> + 1, and 
<B>do</B>&nbsp;<TT>x</TT> <IMG alt=a src="theory-bk-oneli1_files/cmmi10-b.gif"> 
<B>end</B>. The variables can hold only natural numbers. <IMG alt=a 
src="theory-bk-oneli1_files/cmmi10-b.gif"> can be any sequence of instructions. 
An execution of <B>do</B>&nbsp;<TT>x</TT> <IMG alt=a 
src="theory-bk-oneli1_files/cmmi10-b.gif">&nbsp;<B>end</B> causes the execution 
of <IMG alt=a src="theory-bk-oneli1_files/cmmi10-b.gif"> for a number of times 
equal to the value of <TT>x</TT> upon encountering the <B>do</B>. Each LOOP 
program has a distinct set of variables that are initialized to hold the input 
values. Similarly, each LOOP program has a distinct set of variables, called the 
output variables, that upon halting hold the output values of the program. Two 
LOOP programs are said to be <I>equivalent</I> if on identical input values they 
produce the same output values. <A name=20007-25121r1.4.7>&nbsp;</A> 
<DL>
  <DT><STRONG>1.4.7 </STRONG>
  <DD>The following problems are known to be undecidable. Can you show that they 
  are partially decidable? 
  <OL type=a>
    <LI><A name=20007-25122xa>&nbsp;</A>Hilbert's tenth problem 
    <LI><A name=20007-25123xb>&nbsp;</A>The inequivalence problem for LOOP 
    programs<A name=20007-25124> </A><A name=20007-25125></A></LI></OL><A 
  name=20007-25126></A><A name=20007-25127r1.5>&nbsp;</A><A 
  name=20007-25128r1.5.1>&nbsp;</A> 
  <DT><STRONG>1.5.1 </STRONG>
  <DD>Let <IMG alt=Y src="theory-bk-oneli1_files/cmr10-9.gif"> be the set { m | 
  m = 2<SUP>i</SUP> for some integer i }. Show that the problem of 
  multiplication of numbers from <IMG alt=Y 
  src="theory-bk-oneli1_files/cmr10-9.gif"> is reducible to the problem of 
  addition of integer numbers. <A name=20007-25129r1.5.2>&nbsp;</A> 
  <DT><STRONG>1.5.2 </STRONG>
  <DD>Show that the nonemptiness problem for programs is reducible to the 
  acceptance problem for programs. <A name=20007-25130r1.5.3>&nbsp;</A> 
  <DT><STRONG>1.5.3 </STRONG>
  <DD>Show that Hilbert's tenth problem is reducible to the nonemptiness problem 
  for programs. <A name=20007-25131r1.5.4>&nbsp;</A> 
  <DT><STRONG>1.5.4 </STRONG>
  <DD>Show that the problem of determining the existence of solutions over the 
  natural numbers for systems of Diophantine equations of the following form is 
  reducible to Hilbert's tenth problem. Each Q<SUB>i</SUB>(x<SUB>1</SUB>, . . . 
  , x<SUB>n</SUB>) is assumed to be a Diophantine polynomial. 
  <P>
  <CENTER><PRE><IMG alt=" Q  (x ,...,x ) =   0&#10;  1 1      n   ..&#10;Q  (x ,...,x ) =.  0&#10; m  1      n" src="theory-bk-oneli1_files/theory-bk-one69x.gif"></PRE></CENTER><A 
  name=20007-25132r1.5.5>&nbsp;</A> 
  <DT><STRONG>1.5.5 </STRONG>
  <DD>For each of the following cases show that K<SUB>1</SUB> is reducible to 
  K<SUB>2</SUB>. 
  <OL type=a>
    <LI><A name=20007-25133xa>&nbsp;</A>K<SUB>1</SUB> is the emptiness problem 
    for Type 0 grammars, and K<SUB>2</SUB> is the equivalence problem for Type 0 
    grammars. 
    <LI><A name=20007-25134xb>&nbsp;</A>K<SUB>1</SUB> is the membership problem 
    for Type 0 grammars, and K<SUB>2</SUB> is the equivalence problem for Type 0 
    grammars.</LI></OL></DD></DL>
<P>
<P>
<P>[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-oneli2.html">next</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-onese5.html">prev</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-onese5.html#tailtheory-bk-onese5.html">prev-tail</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-oneli1.html">front</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-one.html#theory-bk-oneli1.html">up</A>] 
<A name=tailtheory-bk-oneli1.html>&nbsp;</A></P></BODY></HTML>
