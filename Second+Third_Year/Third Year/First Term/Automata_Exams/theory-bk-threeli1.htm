<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0071)http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html -->
<HTML><HEAD><TITLE></TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1256"><!--Created by TeX4ht from theory-bk-three.tex-->
<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff>[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli2.html">next</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threese6.html">prev</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threese6.html#tailtheory-bk-threese6.html">prev-tail</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#tailtheory-bk-threeli1.html">tail</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-three.html#theory-bk-threeli1.html">up</A>] 

<H3><A name=40007-30000>&nbsp;</A><A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk.html#Q2-40007-30" 
name=Q1-40007-30>Exercises</A></H3><A name=40007-30001r3.1>&nbsp;</A><A 
name=40007-30002r3.1.1>&nbsp;</A> 
<DL>
  <DT><STRONG>3.1.1 </STRONG>
  <DD>For each of the following relations give a recursive finite-domain program 
  that computes the relation. 
  <OL type=a>
    <LI><A name=40007-30003xa>&nbsp;</A>{ (a<SUP>i</SUP>b<SUP>i</SUP>, 
    c<SUP>i</SUP>) | i <IMG alt=">=" 
    src="theory-bk-threeli1_files/cmsy10-15.gif" align=middle> 0 } 
    <LI><A name=40007-30004xb>&nbsp;</A>{ (xy, x) | xy is in {a, b}* and |x| = 
    |y| } 
    <LI><A name=40007-30005xc>&nbsp;</A>{ (x, y) | x and y are in {0, 1}*, |x| = 
    |y|, and y<IMG alt=/= src="theory-bk-threeli1_files/theory-bk-three45x.gif" 
    align=middle> x<SUP>rev</SUP> }</LI></OL><A name=40007-30006r3.2>&nbsp;</A><A 
  name=40007-30007r3.2.1>&nbsp;</A> 
  <DT><STRONG>3.2.1 </STRONG>
  <DD>For each of the following relations give a (deterministic, if possible) 
  pushdown transducer that computes the relation. 
  <OL type=a>
    <LI><A name=40007-30008xa>&nbsp;</A>{ (a<SUP>i</SUP>b<SUP>j</SUP>, 
    a<SUP>j</SUP>b<SUP>i</SUP>) | i, j <IMG alt=">=" 
    src="theory-bk-threeli1_files/cmsy10-15.gif" align=middle> 0 } 
    <LI><A name=40007-30009xb>&nbsp;</A>{ (x, a<SUP>i</SUP>b<SUP>j</SUP>) | x is 
    in {a, b}*, i&nbsp;= (number of a's in x), and j&nbsp;= (number of b's in x) 
    } 
    <LI><A name=40007-30010xc>&nbsp;</A>{ (xyz, xy<SUP>rev</SUP>z) | xyz is in 
    {a, b}* } 
    <LI><A name=40007-30011xd>&nbsp;</A>{ (a<SUP>i</SUP>b<SUP>j</SUP>, 
    c<SUP>k</SUP>) | i <IMG alt="<=" 
    src="theory-bk-threeli1_files/cmsy10-14.gif" align=middle> k <IMG alt="<=" 
    src="theory-bk-threeli1_files/cmsy10-14.gif" align=middle> j } 
    <LI><A name=40007-30012xe>&nbsp;</A>{ (a<SUP>i</SUP>b<SUP>j</SUP>, 
    c<SUP>k</SUP>) | k = min(i, j) } 
    <LI><A name=40007-30013xf>&nbsp;</A>{ (w, c<SUP>k</SUP>) | w is in {a, b}*, 
    and k = min(number of a's in w, number of b's in w) } 
    <LI><A name=40007-30014xg>&nbsp;</A>{ (xy, yx<SUP>rev</SUP>) | x and y are 
    in {a, b}* } 
    <LI><A name=40007-30015xh>&nbsp;</A>{ (x, x<SUP>rev</SUP>x) | x is in {a, 
    b}* } 
    <LI><A name=40007-30016xi>&nbsp;</A>{ (x, y) | x and y are in {a, b}*, and y 
    is a permutation of x }</LI></OL><A name=40007-30017r3.2.2>&nbsp;</A> 
  <DT><STRONG>3.2.2 </STRONG>
  <DD>Find a pushdown transducer that simulates the computations of the 
  recursive finite-domain program of Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30018r3.E.1">3.E.1</A>. 
  Assume that the variables have the domain {0, 1}, and the initial value 0. 
  <HR>

  <CENTER>
  <TABLE>
    <TBODY>
    <TR>
      <TD><A name=40007-30018r3.E.1>&nbsp;</A> 
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
          <TR>
            <TD><PRE><B>call</B> RP(<TT>x</TT>)                         /* I<SUB>1</SUB>&nbsp;*/
<B>if</B> <I>eof</I> <B>then accept</B>                      /* I<SUB>2</SUB>&nbsp;*/
<B>reject</B>                                          /* I<SUB>3</SUB>&nbsp;*/
<B>procedure</B> RP(<TT>y</TT>)
    <B>read</B> <TT>x</TT>                                     /* I<SUB>4</SUB>&nbsp;*/
    <B>if</B> x<IMG alt=/= src="theory-bk-threeli1_files/theory-bk-three46x.gif" align=middle> y <B>then</B>                         /* I<SUB>5</SUB>&nbsp;*/
        <B>call</B> RP(<TT>x</TT>)                   /* I<SUB>6</SUB>&nbsp;*/
    <B>write</B> <TT>y</TT>                                   /* I<SUB>7</SUB>&nbsp;*/
    <B>return</B>                                     /* I<SUB>8</SUB>&nbsp;*/
<B>end</B>                                                         </PRE></TD></TR></TBODY></TABLE><A 
        name=40007-30018r3.E.1>&nbsp;</A> <BR>
        <TABLE>
          <TBODY>
          <TR vAlign=baseline>
            <TD><NOBR><STRONG>Figure 3.E.1</STRONG></NOBR></TD>
            <TD></TD></TR></TBODY></TABLE>
        <CENTER></CENTER></TD></TR></TBODY></TABLE></CENTER>
  <HR>
  <A name=40007-30019r3.2.3>&nbsp;</A> 
  <DT><STRONG>3.2.3 </STRONG>
  <DD>For each of the following languages find a (deterministic, if possible) 
  pushdown automaton that accepts the language. 
  <OL type=a>
    <LI><A name=40007-30020xa>&nbsp;</A>{ vww<SUP>rev</SUP> | v and w are in {a, 
    b}*, and |w| &gt; 0 } 
    <LI><A name=40007-30021xb>&nbsp;</A>{ x | x is in {a, b}* and each prefix of 
    x has at least as many a's as b's } 
    <LI><A name=40007-30022xc>&nbsp;</A>{ 
    a<SUP>i</SUP>b<SUP>j</SUP>a<SUP>j</SUP>b<SUP>i</SUP> | i, j &gt; 0 } 
    <LI><A name=40007-30023xd>&nbsp;</A>{ w | w is in {a, b}*, and w<IMG alt=/= 
    src="theory-bk-threeli1_files/theory-bk-three47x.gif" align=middle> 
    w<SUP>rev</SUP> } 
    <LI><A name=40007-30024xe>&nbsp;</A>{ xx<SUP>rev</SUP> | x is accepted by 
    the finite-state automaton of Figure&nbsp;<A 
    href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30025r3.E.2">3.E.2</A> 
    } 
    <HR>

    <CENTER>
    <TABLE>
      <TBODY>
      <TR>
        <TD><A name=40007-30025r3.E.2>&nbsp;</A> <A 
          name=40007-30025r3.E.2>&nbsp;</A> <BR><IMG alt=[PICT] 
          src="theory-bk-threeli1_files/theory-bk-three-3-E-2.jpg"> <BR>
          <TABLE>
            <TBODY>
            <TR vAlign=baseline>
              <TD><NOBR><STRONG>Figure 3.E.2</STRONG></NOBR></TD>
              <TD></TD></TR></TBODY></TABLE>
          <CENTER></CENTER></TD></TR></TBODY></TABLE></CENTER>
    <HR>

    <LI><A name=40007-30026xf>&nbsp;</A>{ x | x = x<SUP>rev</SUP> and x is 
    accepted by the finite-state automaton of Figure&nbsp;<A 
    href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30025r3.E.2">3.E.2</A> 
    }</LI></OL><A name=40007-30027r3.3>&nbsp;</A><A 
  name=40007-30028r3.3.1>&nbsp;</A> 
  <DT><STRONG>3.3.1 </STRONG>
  <DD>For each of the following languages construct a context-free grammar that 
  generates the language. 
  <OL type=a>
    <LI><A name=40007-30029xa>&nbsp;</A>{ x#y | x and y are in {a, b}* and have 
    the same number of a's } 
    <LI><A name=40007-30030xb>&nbsp;</A>{ 
    a<SUP>i</SUP>b<SUP>j</SUP>c<SUP>k</SUP> | i<IMG alt=/= 
    src="theory-bk-threeli1_files/theory-bk-three48x.gif" align=middle> j or 
    j<IMG alt=/= src="theory-bk-threeli1_files/theory-bk-three49x.gif" 
    align=middle> k } 
    <LI><A name=40007-30031xc>&nbsp;</A>{ x | x is in {a, b}* and each prefix of 
    x has at least as many a's as b's } 
    <LI><A name=40007-30032xd>&nbsp;</A>{ x#y | x and y are in {a, b}* and y is 
    not a permutation of x } 
    <LI><A name=40007-30033xe>&nbsp;</A>{ x#y | x and y are in {a, b}* and x<IMG 
    alt=/= src="theory-bk-threeli1_files/theory-bk-three50x.gif" align=middle> y 
    }</LI></OL><A name=40007-30034r3.3.2>&nbsp;</A> 
  <DT><STRONG>3.3.2 </STRONG>
  <DD>Find a Type 2 grammar that is equivalent to the context-free grammar G = 
  &lt;N, <IMG alt=S src="theory-bk-threeli1_files/cmr10-6.gif">, P, S&gt;, whose 
  production rules are given in Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30035r3.E.3">3.E.3</A>(a). 

  <HR>

  <CENTER>
  <TABLE>
    <TBODY>
    <TR>
      <TD><A name=40007-30035r3.E.3>&nbsp;</A> <PRE><IMG alt="&#10; S  -->   CD&#10;    -->   a        S  -->   AB&#10;C   -->   e        A  -->   BAB        S  -->   aASa&#10;    -->   SC          -->   a             -->   b         S   -->   aA&#10;    -->   b        B  -->   ABA       A   -->   aAa       A   -->   Sb&#10;D   -->   CC          -->   b             -->   b             -->   ab&#10;    (a)              (b)               (c)               (d)" src="theory-bk-threeli1_files/theory-bk-three51x.gif"></PRE><A 
        name=40007-30035r3.E.3>&nbsp;</A> <BR>
        <TABLE>
          <TBODY>
          <TR vAlign=baseline>
            <TD><NOBR><STRONG>Figure 3.E.3</STRONG></NOBR></TD>
            <TD></TD></TR></TBODY></TABLE>
        <CENTER></CENTER></TD></TR></TBODY></TABLE></CENTER>
  <HR>
  <A name=40007-30036r3.3.3>&nbsp;</A> 
  <DT><STRONG>3.3.3 </STRONG>
  <DD>Let G = &lt;N, <IMG alt=S src="theory-bk-threeli1_files/cmr10-6.gif">, P, 
  S&gt; be the context-free grammar whose production rules are listed in 
  Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30035r3.E.3">3.E.3</A>(b). 
  Find a recursive finite-domain program and a pushdown automaton that accept 
  the language generated by G. <A name=40007-30037r3.3.4>&nbsp;</A> 
  <DT><STRONG>3.3.4 </STRONG>
  <DD>Let M be the pushdown automaton whose transition diagram is given in 
  Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30038r3.E.4">3.E.4</A>. 

  <HR>

  <CENTER>
  <TABLE>
    <TBODY>
    <TR>
      <TD><A name=40007-30038r3.E.4>&nbsp;</A> <A 
        name=40007-30038r3.E.4>&nbsp;</A> <BR><IMG alt=[PICT] 
        src="theory-bk-threeli1_files/theory-bk-three-3-E-4.jpg"> <BR>
        <TABLE>
          <TBODY>
          <TR vAlign=baseline>
            <TD><NOBR><STRONG>Figure 3.E.4</STRONG></NOBR></TD>
            <TD></TD></TR></TBODY></TABLE>
        <CENTER></CENTER></TD></TR></TBODY></TABLE></CENTER>
  <HR>
  Find a context-free grammar that generates L(M).<A 
  name=40007-30039r3.3.5>&nbsp;</A> 
  <DT><STRONG>3.3.5 </STRONG>
  <DD>Find a deterministic pushdown automaton that accepts the language 
  generated by the grammar G = &lt;N, <IMG alt=S 
  src="theory-bk-threeli1_files/cmr10-6.gif">, P, S&gt;, whose production rules 
  are given in Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30035r3.E.3">3.E.3</A>(c).<A 
  name=40007-30040r3.3.6>&nbsp;</A> 
  <DT><STRONG>3.3.6 </STRONG>
  <DD>Let the program P and the grammar G be as in Example&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threese3.html#40003-19005t3.3.5">3.3.5</A>. 
  Find a derivation in G that corresponds to an accepting computation of P on 
  input bab. <A name=40007-30041r3.3.7>&nbsp;</A> 
  <DT><STRONG>3.3.7 </STRONG>
  <DD>Find the context-free grammar that accepts the same language as the 
  program P in Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30042r3.E.5">3.E.5</A>, 
  according to the proof of Theorem&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threese3.html#40003-15001t3.3.3">3.3.3</A>. 
  Assume that the domain of the variables is equal to {a, b}, with a as initial 
  value. 
  <HR>

  <CENTER>
  <TABLE>
    <TBODY>
    <TR>
      <TD><A name=40007-30042r3.E.5>&nbsp;</A> 
        <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
          <TBODY>
          <TR>
            <TD><PRE><B>do</B>                                               /* I<SUB>1</SUB>&nbsp;*/
    <B>call</B> f(<TT>x</TT>)                                 /* I<SUB>2</SUB>&nbsp;*/
    <B>if</B> <I>eof</I> <B>then accept</B>                  /* I<SUB>3</SUB>&nbsp;*/
<B>until</B> false                        /* I<SUB>4</SUB>&nbsp;*/
<B>procedure</B> f(<TT>x</TT>)
    <B>if</B> <TT>x</TT> = b <B>then</B>                          /* I<SUB>5</SUB>&nbsp;*/
        <B>return</B>                                 /* I<SUB>6</SUB>&nbsp;*/
    <B>read</B> <TT>x</TT>                                     /* I<SUB>7</SUB>&nbsp;*/
    <B>call</B> f(<TT>x</TT>)                                 /* I<SUB>8</SUB>&nbsp;*/
    <B>return</B>                                     /* I<SUB>9</SUB>&nbsp;*/
<B>end</B>                                                         </PRE></TD></TR></TBODY></TABLE><A 
        name=40007-30042r3.E.5>&nbsp;</A> <BR>
        <TABLE>
          <TBODY>
          <TR vAlign=baseline>
            <TD><NOBR><STRONG>Figure 3.E.5</STRONG></NOBR></TD>
            <TD></TD></TR></TBODY></TABLE>
        <CENTER></CENTER></TD></TR></TBODY></TABLE></CENTER>
  <HR>
  <A name=40007-30043r3.4>&nbsp;</A><A name=40007-30044r3.4.1>&nbsp;</A> 
  <DT><STRONG>3.4.1 </STRONG>
  <DD>Redo Example&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threese4.html#40004-21005t3.4.1">3.4.1</A> 
  for the case that G has the production rules listed in Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30035r3.E.3">3.E.3</A>(d) 
  and w = a<SUP>5</SUP>b<SUP>4</SUP>. <A name=40007-30045r3.4.2>&nbsp;</A> 
  <DT><STRONG>3.4.2 </STRONG>
  <DD>Show that each of the following sets is not a context-free language. 
  <OL type=a>
    <LI><A name=40007-30046xa>&nbsp;</A>{ 
    a<SUP>n</SUP>b<SUP>l</SUP>c<SUP>t</SUP> | t &gt; l &gt; n &gt; 0 } 
    <LI><A name=40007-30047xb>&nbsp;</A>{ <IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"><IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"><SUP>rev</SUP><IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"> | <IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"> is in {a, b}* } 
    <LI><A name=40007-30048xc>&nbsp;</A>{ <IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"><IMG alt=b 
    src="theory-bk-threeli1_files/cmmi10-c.gif" align=middle><IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"><SUP>rev</SUP><IMG alt=b 
    src="theory-bk-threeli1_files/cmmi10-c.gif" align=middle><SUP>rev</SUP> | 
    <IMG alt=a src="theory-bk-threeli1_files/cmmi10-b.gif"> and <IMG alt=b 
    src="theory-bk-threeli1_files/cmmi10-c.gif" align=middle> are in {a, b}* } 
    <LI><A name=40007-30049xd>&nbsp;</A>{ a<SUP>n</SUP><IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif">a<SUP>n</SUP><IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"> | <IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"> is in {a, b}*, and n&nbsp;= 
    (the number of a's in <IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif">) } 
    <LI><A name=40007-30050xe>&nbsp;</A>{ <IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif">#<IMG alt=b 
    src="theory-bk-threeli1_files/cmmi10-c.gif" align=middle> | <IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"> and <IMG alt=b 
    src="theory-bk-threeli1_files/cmmi10-c.gif" align=middle> are in {a, b}* and 
    <IMG alt=b src="theory-bk-threeli1_files/cmmi10-c.gif" align=middle> is a 
    permutation of <IMG alt=a src="theory-bk-threeli1_files/cmmi10-b.gif"> } 
    <LI><A name=40007-30051xf>&nbsp;</A>{ <IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"><IMG alt=b 
    src="theory-bk-threeli1_files/cmmi10-c.gif" align=middle> | The finite-state 
    transducer whose transition diagram is given in Figure&nbsp;<A 
    href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30052r3.E.6">3.E.6</A> 

    <HR>

    <CENTER>
    <TABLE>
      <TBODY>
      <TR>
        <TD><A name=40007-30052r3.E.6>&nbsp;</A> <A 
          name=40007-30052r3.E.6>&nbsp;</A> <BR><IMG alt=[PICT] 
          src="theory-bk-threeli1_files/theory-bk-three-3-E-6.jpg"> <BR>
          <TABLE>
            <TBODY>
            <TR vAlign=baseline>
              <TD><NOBR><STRONG>Figure 3.E.6</STRONG></NOBR></TD>
              <TD></TD></TR></TBODY></TABLE>
          <CENTER></CENTER></TD></TR></TBODY></TABLE></CENTER>
    <HR>
    has output <IMG alt=b src="theory-bk-threeli1_files/cmmi10-c.gif" 
    align=middle> on input <IMG alt=a 
    src="theory-bk-threeli1_files/cmmi10-b.gif"> } 
    <LI><A name=40007-30053xg>&nbsp;</A>{ a<SUP>n!</SUP> | n <IMG alt=">=" 
    src="theory-bk-threeli1_files/cmsy10-15.gif" align=middle> 1 }</LI></OL><A 
  name=40007-30054r3.4.3>&nbsp;</A> 
  <DT><STRONG>3.4.3 </STRONG>
  <DD>Show that the relation { (x, d<SUP>n</SUP>) | x is in {a, b, c}* and 
  n&nbsp;= min(number of a's in x, number of b's in x, number of c's in x) } is 
  not computable by a pushdown transducer. <A name=40007-30055r3.5>&nbsp;</A><A 
  name=40007-30056r3.5.1>&nbsp;</A> 
  <DT><STRONG>3.5.1 </STRONG>
  <DD>Show that the class of the relations computable by <A 
  name=40007-30057></A>pushdown transducers is closed under each of the 
  following operations <IMG alt=Y src="theory-bk-threeli1_files/cmr10-9.gif">. 
  <OL type=a>
    <LI><A name=40007-30058xa>&nbsp;</A>Inverse, that is, <IMG alt=Y 
    src="theory-bk-threeli1_files/cmr10-9.gif">(R) = 
    R<SUP>-1</SUP>&nbsp;=&nbsp;{ (y, x) | (x, y) is in R }. 
    <LI><A name=40007-30059xb>&nbsp;</A>Composition<A name=40007-30060> </A>, 
    that is, <IMG alt=Y 
    src="theory-bk-threeli1_files/cmr10-9.gif">(R<SUB>1</SUB>, 
    R<SUB>2</SUB>)&nbsp;=&nbsp;{ (x, y) | x = x<SUB>1</SUB>x<SUB>2</SUB> and y = 
    y<SUB>1</SUB>y<SUB>2</SUB> for some (x<SUB>1</SUB>, y<SUB>1</SUB>) in 
    R<SUB>1</SUB> and some (x<SUB>2</SUB>, y<SUB>2</SUB>) in R<SUB>2</SUB> }. 
    <LI><A name=40007-30061xc>&nbsp;</A>Reversal, that is, <IMG alt=Y 
    src="theory-bk-threeli1_files/cmr10-9.gif">&nbsp;= { (x<SUP>rev</SUP>, 
    y<SUP>rev</SUP>) | (x, y) is in R }.</LI></OL><A 
  name=40007-30062r3.5.2>&nbsp;</A> 
  <DT><STRONG>3.5.2 </STRONG>
  <DD>Show that the class of context-free languages is not closed under the 
  operation <IMG alt=Y 
  src="theory-bk-threeli1_files/cmr10-9.gif">(L<SUB>1</SUB>, 
  L<SUB>2</SUB>)&nbsp;=&nbsp;{ xyzw | xz is in L<SUB>1</SUB> and yw is in 
  L<SUB>2</SUB> }. <A name=40007-30063></A><A name=40007-30064r3.5.3>&nbsp;</A> 
  <DT><STRONG>3.5.3 </STRONG>
  <DD>Find a pushdown automaton that accepts the intersection of the language 
  accepted by the pushdown automaton whose transition diagram is given in 
  Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30065r3.E.7">3.E.7</A>(a), 
  and the language accepted by the finite-state automaton whose transition 
  diagram is given in Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threese5.html#40005-24012r3.5.1">3.5.1</A>(b). 

  <HR>

  <CENTER>
  <TABLE>
    <TBODY>
    <TR>
      <TD><A name=40007-30065r3.E.7>&nbsp;</A> <A 
        name=40007-30065r3.E.7>&nbsp;</A> <BR><IMG alt=[PICT] 
        src="theory-bk-threeli1_files/theory-bk-three-3-E-7.jpg"> <BR>
        <TABLE>
          <TBODY>
          <TR vAlign=baseline>
            <TD><NOBR><STRONG>Figure 3.E.7</STRONG></NOBR></TD>
            <TD></TD></TR></TBODY></TABLE>
        <CENTER></CENTER></TD></TR></TBODY></TABLE></CENTER>
  <HR>
  <A name=40007-30066r3.5.4>&nbsp;</A> 
  <DT><STRONG>3.5.4 </STRONG>
  <DD>Let M be the deterministic pushdown automaton given in Figure&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html#40007-30065r3.E.7">3.E.7</A>(b). 
  Find the pushdown automaton that accepts the complementation of L(M) in 
  accordance with the proof of Theorem&nbsp;<A 
  href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threese5.html#40005-24018t3.5.2">3.5.2</A>. 
  <A name=40007-30067r3.5.5>&nbsp;</A> 
  <DT><STRONG>3.5.5 </STRONG>
  <DD>Show that if a relation is computable by a deterministic pushdown 
  transducer, then its complementation is computable by a pushdown transducer.<A 
  name=40007-30068> </A><A name=40007-30069r3.6>&nbsp;</A><A 
  name=40007-30070r3.6.1>&nbsp;</A> 
  <DT><STRONG>3.6.1 </STRONG>
  <DD>Show that the membership problem is decidable for pushdown<A 
  name=40007-30071> </A>automata. <A name=40007-30072r3.6.2>&nbsp;</A> 
  <DT><STRONG>3.6.2 </STRONG>
  <DD>Show that the single valuedness problem is decidable for finite-state<A 
  name=40007-30073> </A>transducers. <A name=40007-30074r3.6.3>&nbsp;</A> 
  <DT><STRONG>3.6.3 </STRONG>
  <DD>Show that the equivalence problem for finite-state transducers is 
  reducible to the equivalence problem for pushdown automata.</DD></DL>
<P>
<P>[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli2.html">next</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threese6.html">prev</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threese6.html#tailtheory-bk-threese6.html">prev-tail</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-threeli1.html">front</A>] 
[<A 
href="http://www.cse.ohio-state.edu/~gurari/theory-bk/theory-bk-three.html#theory-bk-threeli1.html">up</A>] 
<A name=tailtheory-bk-threeli1.html>&nbsp;</A></P></BODY></HTML>
