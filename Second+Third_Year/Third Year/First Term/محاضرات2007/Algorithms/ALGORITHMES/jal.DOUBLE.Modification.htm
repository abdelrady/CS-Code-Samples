<!--NewPage-->
<html>
<head>
<!-- Generated by javadoc on Fri Feb 09 16:06:21 PST 1996 -->
<a name="_top_"></a>
<title>
  Class jal.DOUBLE.Modification
</title>
</head>
<body>
<pre>
<a href="packages.html">All Packages</a>  <a href="tree.html">Class Hierarchy</a>  <a href="Package-jal.DOUBLE.html">This Package</a>  <a href="jal.DOUBLE.Inspection.html#_top_">Previous</a>  <a href="jal.DOUBLE.Numeric.html#_top_">Next</a>  <a href="AllNames.html">Index</a></pre>
<hr>
<h1>
  Class jal.DOUBLE.Modification
</h1>
<pre>
<a href="java.lang.Object.html#_top_">java.lang.Object</a>
   |
   +----jal.DOUBLE.Modification
</pre>
<hr>
<dl>
  <dt> public final class <b>Modification</b>
  <dt> extends <a href="java.lang.Object.html#_top_">Object</a>
</dl>
A class that encapsulates mutating sequence algorithms on one
and two arrays.  All methods are static and all variables are
static and final, so this class has no constructors.
<P>
Most methods operate on a range of elements.  A range is described
by the index of its first element and an index that is 
<strong>one past</strong> its last element.  So, for example,
<code>[n, n+1)</code> is a range that contains one element,
<code>[n, n)</code> is a range that contains zero elements,
and <code>[n, n-1)</code> is not a valid range.
<P>Copyright &copy; 1996
Silicon Graphics, Inc.
<BR>Permission to use, copy, modify, distribute and sell this software
and its documentation for any purpose is hereby granted without fee,
provided that the above copyright notice appear in all copies and
that both that copyright notice and this permission notice appear
in supporting documentation.  Silicon Graphics makes no
representations about the suitability of this software for any
purpose.  It is provided &quot;as is&quot; without express or 
implied warranty.
<dl>
    <dt> <b>See Also:</b>
    <dd> <a href="jal.DOUBLE.Inspection.html#_top_">Inspection</a>, <a href="jal.DOUBLE.Sorting.html#_top_">Sorting</a>, <a href="jal.DOUBLE.Numeric.html#_top_">Numeric</a>
</dl>
<hr>
<a name="index"></a>
<h2>
  <img src="images/method-index.gif" width=207 height=38 alt="Method Index">
</h2>
<dl>
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#copy(double[], double[], int, int, int)"><b>copy</b></a>(double[], double[], int, int, int)
  <dd> Copy elements from one location to another.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#fill(double[], int, int, double)"><b>fill</b></a>(double[], int, int, double)
  <dd> 
Assigns a value to every element in a range.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#generate(double[], int, int, jal.DOUBLE.Generator)"><b>generate</b></a>(double[], int, int, Generator)
  <dd> Assigns values, produced by a function object that takes no arguments,
to each element of a range.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#partition(double[], int, int, jal.DOUBLE.Predicate)"><b>partition</b></a>(double[], int, int, Predicate)
  <dd> 
Rearranges elements in a range such that all elements that satisfy 
a condition are placed before all elements that do not satisfy it.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#random_shuffle(double[], int, int, java.util.Random)"><b>random_shuffle</b></a>(double[], int, int, Random)
  <dd> 
Shuffles elements in a range, with uniform distribution.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#random_shuffle(double[], int, int)"><b>random_shuffle</b></a>(double[], int, int)
  <dd> 
Shuffles elements in a range, with uniform distribution.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#remove_copy(double[], double[], int, int, int, double)"><b>remove_copy</b></a>(double[], double[], int, int, int, double)
  <dd> Copies all of the elements in a range except for those that are
equal to a given value.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#remove_copy_if(double[], double[], int, int, int, jal.DOUBLE.Predicate)"><b>remove_copy_if</b></a>(double[], double[], int, int, int, Predicate)
  <dd> Copies all of the elements in a range except for those that satisfy
a given condition.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#remove_if(double[], int, int, double)"><b>remove_if</b></a>(double[], int, int, double)
  <dd> Remove all elements from a range that are equal to a given value.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#remove_if(double[], int, int, jal.DOUBLE.Predicate)"><b>remove_if</b></a>(double[], int, int, Predicate)
  <dd> Remove all elements from a range that satisfy a specified condition.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#replace(double[], int, int, double, double)"><b>replace</b></a>(double[], int, int, double, double)
  <dd> Performs in-place substitution on a range of elements.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#replace_copy(double[], double[], int, int, int, double, double)"><b>replace_copy</b></a>(double[], double[], int, int, int, double, double)
  <dd> Performs copying and substitution on a range of elements.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#replace_copy_if(double[], double[], int, int, int, jal.DOUBLE.Predicate, double)"><b>replace_copy_if</b></a>(double[], double[], int, int, int, Predicate, double)
  <dd> Performs copying and substitution on a range of elements.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#replace_if(double[], int, int, jal.DOUBLE.Predicate, double)"><b>replace_if</b></a>(double[], int, int, Predicate, double)
  <dd> Performs in-place substitution on a range of elements.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#reverse(double[], int, int)"><b>reverse</b></a>(double[], int, int)
  <dd> 
Reverses a sequence of elements.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#reverse_copy(double[], int, int, int)"><b>reverse_copy</b></a>(double[], int, int, int)
  <dd> 
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#reverse_copy(double[], double[], int, int, int)"><b>reverse_copy</b></a>(double[], double[], int, int, int)
  <dd> Creates a copy of an input range consisting of that range in
reverse order; equivalent to copy followed by reverse, but faster.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#rotate(double[], int, int, int)"><b>rotate</b></a>(double[], int, int, int)
  <dd> Rotate a range in place: <code>array[middle]</code> is put in
<code>array[first]</code>, <code>array[middle+1]</code> is put in
<code>array[first+1]</code>, etc.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#rotate_copy(double[], double[], int, int, int, int)"><b>rotate_copy</b></a>(double[], double[], int, int, int, int)
  <dd> Creates a copy of an input range consisting of a rotation of that
range.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#stable_partition(double[], int, int, jal.DOUBLE.Predicate)"><b>stable_partition</b></a>(double[], int, int, Predicate)
  <dd> Rearranges elements in a range such that all elements that satisfy 
a condition are placed before all elements that do not satisfy it.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#stable_remove(double[], int, int, double)"><b>stable_remove</b></a>(double[], int, int, double)
  <dd> Remove all elements from a range that are equal to a given value.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#stable_remove_if(double[], int, int, jal.DOUBLE.Predicate)"><b>stable_remove_if</b></a>(double[], int, int, Predicate)
  <dd> Remove all elements from a range that satisfy a specified condition.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#swap_ranges(double[], double[], int, int, int)"><b>swap_ranges</b></a>(double[], double[], int, int, int)
  <dd> Performs a pairwise swap of two ranges.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#transform(double[], double[], int, int, int, jal.DOUBLE.UnaryOperator)"><b>transform</b></a>(double[], double[], int, int, int, UnaryOperator)
  <dd> Performs an operation on every element of a range and assigns the result
to elements in another range.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#transform(double[], double[], double[], int, int, int, int, jal.DOUBLE.BinaryOperator)"><b>transform</b></a>(double[], double[], double[], int, int, int, int, BinaryOperator)
  <dd> Performs a binary operation on elements of two ranges, assigning the
result to elements of another range.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#unique(double[], int, int)"><b>unique</b></a>(double[], int, int)
  <dd> Eliminates all but the first element of every consecutive group
of equal elements.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#unique(double[], int, int, jal.DOUBLE.BinaryPredicate)"><b>unique</b></a>(double[], int, int, BinaryPredicate)
  <dd> Eliminates all but the first element of every consecutive group
of equivalent elements, where equivalence is determined by a
supplied predicate.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#unique_copy(double[], double[], int, int, int)"><b>unique_copy</b></a>(double[], double[], int, int, int)
  <dd> Copies elements from an input range to an output range, except that
only the first element is copied from every consecutive group of 
equal elements.
  <dt> <img src="images/green-ball-small.gif" width=6 height=6 alt=" o ">
	<a href="#unique_copy(double[], double[], int, int, int, jal.DOUBLE.BinaryPredicate)"><b>unique_copy</b></a>(double[], double[], int, int, int, BinaryPredicate)
  <dd> Copies elements from an input range to an output range, except that
only the first element is copied from every consecutive group of 
equivalent elements; equivalence is determined by a
supplied predicate.
</dl>
<a name="methods"></a>
<h2>
  <img src="images/methods.gif" width=151 height=38 alt="Methods">
</h2>
<a name="copy(double[], double[], int, int, int)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="copy"><b>copy</b></a>
<pre>
  public static void copy(double source[],
                          double destination[],
                          int first,
                          int last,
                          int to)
</pre>
<dl>
  <dd> Copy elements from one location to another.  There must be
enough space in the destination array, and existing elements 
will be overwritten.  Note: the source and destination ranges are
permitted to be in the same range and are permitted to overlap.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source - Array from which elements are copied
    <dd> destination - Array to which elements are copied
    <dd> first - Beginning of the range from which elements are copied
    <dd> last - One past the end of the range
    <dd> to - Beginning of the range to which elements will be
                   copied.
    <dt> <b>Throws:</b> <a href="java.lang.ArrayIndexOutOfBoundsException.html#_top_">ArrayIndexOutOfBoundsException</a>
    <dd> If the input or
                   output range is invalid.
  </dl>
</dl>
<a name="swap_ranges(double[], double[], int, int, int)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="swap_ranges"><b>swap_ranges</b></a>
<pre>
  public static void swap_ranges(double array1[],
                                 double array2[],
                                 int first1,
                                 int last1,
                                 int first2)
</pre>
<dl>
  <dd> Performs a pairwise swap of two ranges.  That is: for every index
<code>i</code> in the range <code>[first1,last1)</code>, swaps
<code>array1[i]</code> and <code>array2[first2 + (i-first1)]</code>.
Note: if the two ranges are in the same array, they are not
permitted to overlap.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array1 - Array containing the first range.
    <dd> array2 - Array containing the second range.
    <dd> first1 - Beginning of the first range.
    <dd> last1 - One past the end of the first range
    <dd> first2 - Beginning of the second range.
  </dl>
</dl>
<a name="transform(double[], double[], int, int, int, jal.DOUBLE.UnaryOperator)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="transform"><b>transform</b></a>
<pre>
  public static void transform(double source[],
                               double destination[],
                               int first,
                               int last,
                               int to,
                               <a href="jal.DOUBLE.UnaryOperator.html#_top_">UnaryOperator</a> f)
</pre>
<dl>
  <dd> Performs an operation on every element of a range and assigns the result
to elements in another range.  That is: for every index <code>i</code>
in the range <code>[first,last)</code>, performs the operation
<code>destination[to + (i-first)] = f.apply(source[i])</code>.
The destination array must contain
sufficient space, and existing elements will be overwritten.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source - Array containing the elements to be operated on.
    <dd> destination - Array in which results of the operation will be
                   stored.
    <dd> first - Beginning of the input range.
    <dd> last - One past the end of the input range.
    <dd> to - Beginning of the output range.
    <dd> f - Operation to perform on elements of the
                   input range.
  </dl>
</dl>
<a name="transform(double[], double[], double[], int, int, int, int, jal.DOUBLE.BinaryOperator)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="transform"><b>transform</b></a>
<pre>
  public static void transform(double source1[],
                               double source2[],
                               double destination[],
                               int first1,
                               int last1,
                               int first2,
                               int to,
                               <a href="jal.DOUBLE.BinaryOperator.html#_top_">BinaryOperator</a> f)
</pre>
<dl>
  <dd> Performs a binary operation on elements of two ranges, assigning the
result to elements of another range.  That is: for every index <code>i</code>
in the range <code>[first1,last1)</code>, performs the operation
<code>destination[to + (i-first1)] =</code>
<code>f.apply(source1[i], source2[first2 + (i-first1)])</code>.
The destination array must contain
sufficient space, and existing elements will be overwritten.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source1 - Array containing first range of input elements.
    <dd> source2 - Array containing second range of input elements.
    <dd> destination - Array in which results of the operation will be
                   stored.
    <dd> first1 - Beginning of the first input range.
    <dd> last1 - One past the end of the first input range.
    <dd> first2 - Beginning of the second input range.
    <dd> to - Beginning of the output range.
    <dd> f - Operation to perform on elements of the
                   input range.
  </dl>
</dl>
<a name="replace(double[], int, int, double, double)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="replace"><b>replace</b></a>
<pre>
  public static void replace(double array[],
                             int first,
                             int last,
                             double old_value,
                             double new_value)
</pre>
<dl>
  <dd> Performs in-place substitution on a range of elements.  All elements
equal to <code>old_value</code> are replaced by <code>new_value</code>.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range.
    <dd> first - Beginning of the range.
    <dd> last - One past the end of the range.
    <dd> old_value - Value that will be replaced.
    <dd> new_value - Value that old_value will be replaced with.
  </dl>
</dl>
<a name="replace_if(double[], int, int, jal.DOUBLE.Predicate, double)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="replace_if"><b>replace_if</b></a>
<pre>
  public static void replace_if(double array[],
                                int first,
                                int last,
                                <a href="jal.DOUBLE.Predicate.html#_top_">Predicate</a> p,
                                double new_value)
</pre>
<dl>
  <dd> Performs in-place substitution on a range of elements.  Every element
<code>E</code> for which <code>p.apply(E)</code> is <code>true</code>
are replaced by <code>new_value</code>.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range.
    <dd> first - Beginning of the range.
    <dd> last - One past the end of the range.
    <dd> p - Condition for replacement.
    <dd> new_value - Value to be substituted for replaced elements.
  </dl>
</dl>
<a name="replace_copy(double[], double[], int, int, int, double, double)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="replace_copy"><b>replace_copy</b></a>
<pre>
  public static void replace_copy(double source[],
                                  double destination[],
                                  int first,
                                  int last,
                                  int to,
                                  double old_value,
                                  double new_value)
</pre>
<dl>
  <dd> Performs copying and substitution on a range of elements.  The elements
in the input range are copied to an output range, except that 
<code>new_value</code> is substituted for any elements that are equal
to <code>old_value</code>.
The destination array must contain
sufficient space, and existing elements will be overwritten.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source - Array containing the input range.
    <dd> destination - Array containing the output range.
    <dd> first - Beginning of the input range.
    <dd> last - One past the end of the input range.
    <dd> to - Beginning of the output range.
    <dd> old_value - Value to be replaced.
    <dd> new_value - Value that old_value will be replaced with.
  </dl>
</dl>
<a name="replace_copy_if(double[], double[], int, int, int, jal.DOUBLE.Predicate, double)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="replace_copy_if"><b>replace_copy_if</b></a>
<pre>
  public static void replace_copy_if(double source[],
                                     double destination[],
                                     int first,
                                     int last,
                                     int to,
                                     <a href="jal.DOUBLE.Predicate.html#_top_">Predicate</a> p,
                                     double new_value)
</pre>
<dl>
  <dd> Performs copying and substitution on a range of elements.  The elements
in the input range are copied to an output range, except that 
<code>new_value</code> is substituted for any elements <code>E</code>
that satisfy the condition <code>p.apply(E)</code>.
The destination array must contain
sufficient space, and existing elements will be overwritten.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source - Array containing the input range.
    <dd> destination - Array containing the output range.
    <dd> first - Beginning of the input range.
    <dd> last - One past the end of the input range.
    <dd> to - Beginning of the output range.
    <dd> p - Condition for replacement.
    <dd> new_value - Value to be substituted for replaced elements.
  </dl>
</dl>
<a name="fill(double[], int, int, double)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="fill"><b>fill</b></a>
<pre>
  public static void fill(double array[],
                          int first,
                          int last,
                          double x)
</pre>
<dl>
  <dd> Assigns a value to every element in a range.  The array must contain
sufficient space, and existing elements will be overwritten.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range
    <dd> first - Beginning of the range
    <dd> last - One past the end of the range
    <dd> x - Value to be assigned to elements in the range
  </dl>
</dl>
<a name="generate(double[], int, int, jal.DOUBLE.Generator)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="generate"><b>generate</b></a>
<pre>
  public static void generate(double array[],
                              int first,
                              int last,
                              <a href="jal.DOUBLE.Generator.html#_top_">Generator</a> f)
</pre>
<dl>
  <dd> Assigns values, produced by a function object that takes no arguments,
to each element of a range.  The array must contain
sufficient space, and existing elements will be overwritten.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range
    <dd> first - Beginning of the range
    <dd> last - One past the end of the range
    <dd> f - Source of values to be assigned to elements in
                the range.  <code>f.apply()</code> is evaluated
                exactly <code>last-first</code> times.
  </dl>
</dl>
<a name="remove_if(double[], int, int, double)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="remove_if"><b>remove_if</b></a>
<pre>
  public static int remove_if(double array[],
                              int first,
                              int last,
                              double x)
</pre>
<dl>
  <dd> Remove all elements from a range that are equal to a given value.
It is not guaranteed that the relative order of remaining elements is
unchanged.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range
    <dd> first - Beginning of the range
    <dd> last - One past the end of the range
    <dd> x - Value to be removed.
    <dt> <b>Returns:</b>
    <dd> An index <code>i</code> such that all remaining elements
                are contained in the range <code>[first, i)</code>.
  </dl>
</dl>
<a name="remove_if(double[], int, int, jal.DOUBLE.Predicate)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="remove_if"><b>remove_if</b></a>
<pre>
  public static int remove_if(double array[],
                              int first,
                              int last,
                              <a href="jal.DOUBLE.Predicate.html#_top_">Predicate</a> p)
</pre>
<dl>
  <dd> Remove all elements from a range that satisfy a specified condition.
It is not guaranteed that the relative order of remaining elements is
unchanged.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range
    <dd> first - Beginning of the range
    <dd> last - One past the end of the range
    <dd> p - Condition being tested
    <dt> <b>Returns:</b>
    <dd> An index <code>i</code> such that all remaining elements
                are contained in the range <code>[first, i)</code>.
  </dl>
</dl>
<a name="stable_remove(double[], int, int, double)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="stable_remove"><b>stable_remove</b></a>
<pre>
  public static int stable_remove(double array[],
                                  int first,
                                  int last,
                                  double x)
</pre>
<dl>
  <dd> Remove all elements from a range that are equal to a given value.
It is guaranteed that the relative order of remaining elements is
unchanged.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range.
    <dd> first - Beginning of the range.
    <dd> last - One past the end of the range.
    <dd> x - Value to be removed.
    <dt> <b>Returns:</b>
    <dd> An index <code>i</code> such that all remaining elements
                are contained in the range <code>[first, i)</code>.
  </dl>
</dl>
<a name="stable_remove_if(double[], int, int, jal.DOUBLE.Predicate)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="stable_remove_if"><b>stable_remove_if</b></a>
<pre>
  public static int stable_remove_if(double array[],
                                     int first,
                                     int last,
                                     <a href="jal.DOUBLE.Predicate.html#_top_">Predicate</a> p)
</pre>
<dl>
  <dd> Remove all elements from a range that satisfy a specified condition.
It is guaranteed that the relative order of remaining elements is
unchanged.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range
    <dd> first - Beginning of the range
    <dd> last - One past the end of the range
    <dd> p - Condition being tested
    <dt> <b>Returns:</b>
    <dd> An index <code>i</code> such that all remaining elements
                are contained in the range <code>[first, i)</code>.
  </dl>
</dl>
<a name="remove_copy(double[], double[], int, int, int, double)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="remove_copy"><b>remove_copy</b></a>
<pre>
  public static int remove_copy(double source[],
                                double destination[],
                                int first,
                                int last,
                                int to,
                                double value)
</pre>
<dl>
  <dd> Copies all of the elements in a range except for those that are
equal to a given value.  It is guaranteed that the relative order of 
elements that are copied is the same as in the input range.
The output array must contain
sufficient space, and existing elements will be overwritten.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source - Array containing the input range.
    <dd> destination - Array containing the output range.
    <dd> first - Beginning of the input range
    <dd> last - One past the end of the input range
    <dd> to - Beginning of the output range.
    <dd> value - Value to be removed.
    <dt> <b>Returns:</b>
    <dd> An index i such that the resulting output range
                   is <code>[to, i)</code>.
  </dl>
</dl>
<a name="remove_copy_if(double[], double[], int, int, int, jal.DOUBLE.Predicate)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="remove_copy_if"><b>remove_copy_if</b></a>
<pre>
  public static int remove_copy_if(double source[],
                                   double destination[],
                                   int first,
                                   int last,
                                   int to,
                                   <a href="jal.DOUBLE.Predicate.html#_top_">Predicate</a> p)
</pre>
<dl>
  <dd> Copies all of the elements in a range except for those that satisfy
a given condition.  It is guaranteed that the relative order of 
elements that are copied is the same as in the input range.
The output array must contain
sufficient space, and existing elements will be overwritten.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source - Array containing the input range.
    <dd> destination - Array containing the output range.
    <dd> first - Beginning of the input range
    <dd> last - One past the end of the input range
    <dd> to - Beginning of the output range.
    <dd> p - Condition for removal.
    <dt> <b>Returns:</b>
    <dd> An index i such that the resulting output range
                   is <code>[to, i)</code>.
  </dl>
</dl>
<a name="unique(double[], int, int)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="unique"><b>unique</b></a>
<pre>
  public static int unique(double array[],
                           int first,
                           int last)
</pre>
<dl>
  <dd> Eliminates all but the first element of every consecutive group
of equal elements.  The relative order of remaining elements is
guaranteed to be unchanged.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range
    <dd> first - Beginning of the input range
    <dd> last - One past the end of the input range
    <dt> <b>Returns:</b>
    <dd> An index i such that the resulting output range
                   is <code>[first, i)</code>.
  </dl>
</dl>
<a name="unique(double[], int, int, jal.DOUBLE.BinaryPredicate)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="unique"><b>unique</b></a>
<pre>
  public static int unique(double array[],
                           int first,
                           int last,
                           <a href="jal.DOUBLE.BinaryPredicate.html#_top_">BinaryPredicate</a> p)
</pre>
<dl>
  <dd> Eliminates all but the first element of every consecutive group
of equivalent elements, where equivalence is determined by a
supplied predicate.
The relative order of remaining elements is
guaranteed to be unchanged.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range
    <dd> first - Beginning of the input range
    <dd> last - One past the end of the input range
    <dd> p - Predicate used to determine equivalence.
    <dt> <b>Returns:</b>
    <dd> An index i such that the resulting output range
                   is <code>[first, i)</code>.
  </dl>
</dl>
<a name="unique_copy(double[], double[], int, int, int)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="unique_copy"><b>unique_copy</b></a>
<pre>
  public static int unique_copy(double source[],
                                double destination[],
                                int first,
                                int last,
                                int to)
</pre>
<dl>
  <dd> Copies elements from an input range to an output range, except that
only the first element is copied from every consecutive group of 
equal elements.
The relative order of elements that are copied is
guaranteed to be the same as in the input range.
The output array must contain
sufficient space, and existing elements will be overwritten.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source - Array containing the input range.
    <dd> destination - Array containing the output range.
    <dd> first - Beginning of the input range.
    <dd> last - One past the end of the input range.
    <dd> to - Beginning of the output range.
    <dt> <b>Returns:</b>
    <dd> An index i such that the resulting output range
                   is <code>[to, i)</code>.
  </dl>
</dl>
<a name="unique_copy(double[], double[], int, int, int, jal.DOUBLE.BinaryPredicate)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="unique_copy"><b>unique_copy</b></a>
<pre>
  public static int unique_copy(double source[],
                                double destination[],
                                int first,
                                int last,
                                int to,
                                <a href="jal.DOUBLE.BinaryPredicate.html#_top_">BinaryPredicate</a> p)
</pre>
<dl>
  <dd> Copies elements from an input range to an output range, except that
only the first element is copied from every consecutive group of 
equivalent elements; equivalence is determined by a
supplied predicate.
The relative order of elements that are copied is
guaranteed to be the same as in the input range.
The output array must contain
sufficient space, and existing elements will be overwritten.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source - Array containing the input range.
    <dd> destination - Array containing the output range.
    <dd> first - Beginning of the input range.
    <dd> last - One past the end of the input range.
    <dd> to - Beginning of the output range.
    <dd> p - Predicate used to determine equivalence.
    <dt> <b>Returns:</b>
    <dd> An index i such that the resulting output range
                   is <code>[to, i)</code>.
  </dl>
</dl>
<a name="reverse(double[], int, int)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="reverse"><b>reverse</b></a>
<pre>
  public static void reverse(double array[],
                             int first,
                             int last)
</pre>
<dl>
  <dd> Reverses a sequence of elements.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the sequence
    <dd> first - Beginning of the range
    <dd> last - One past the end of the range
    <dt> <b>Throws:</b> <a href="java.lang.ArrayIndexOutOfBoundsException.html#_top_">ArrayIndexOutOfBoundsException</a>
    <dd> If the range
                  is invalid.
  </dl>
</dl>
<a name="reverse_copy(double[], int, int, int)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="reverse_copy"><b>reverse_copy</b></a>
<pre>
  public static void reverse_copy(double array[],
                                  int first,
                                  int last,
                                  int to)
</pre>
<a name="reverse_copy(double[], double[], int, int, int)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="reverse_copy"><b>reverse_copy</b></a>
<pre>
  public static void reverse_copy(double source[],
                                  double destination[],
                                  int first,
                                  int last,
                                  int to)
</pre>
<dl>
  <dd> Creates a copy of an input range consisting of that range in
reverse order; equivalent to copy followed by reverse, but faster.
There must be enough space in the array, and existing elements will
be overwritten.  Note: if <code>source</code> and
<code>destination</code> are the same array, the input and output
ranges are <strong>not</strong> permitted to overlap.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source - Array containing the input range.
    <dd> destination - Array containing the output range.
    <dd> first - Beginning of the input range
    <dd> last - One past the end of the input range
    <dd> to - First element of the output range
  </dl>
</dl>
<a name="rotate(double[], int, int, int)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="rotate"><b>rotate</b></a>
<pre>
  public static void rotate(double array[],
                            int first,
                            int middle,
                            int last)
</pre>
<dl>
  <dd> Rotate a range in place: <code>array[middle]</code> is put in
<code>array[first]</code>, <code>array[middle+1]</code> is put in
<code>array[first+1]</code>, etc.  Generally, the element in position
<code>i</code> is put into position 
<code>(i + (last-middle)) % (last-first)</code>.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range
    <dd> first - Beginning of the range
    <dd> middle - Index of the element that will be put in
                <code>array[first]</code>
    <dd> last - One past the end of the range
  </dl>
</dl>
<a name="rotate_copy(double[], double[], int, int, int, int)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="rotate_copy"><b>rotate_copy</b></a>
<pre>
  public static void rotate_copy(double source[],
                                 double destination[],
                                 int first,
                                 int middle,
                                 int last,
                                 int to)
</pre>
<dl>
  <dd> Creates a copy of an input range consisting of a rotation of that
range.  Specifically: for each i, <code>first + i</code> is assigned to
<code>to + (i + (last-middle)) % (last-first)</code>.  
There must be enough space in the output array, and existing elements 
will be overwritten.  Note: if <code>source</code> and
<code>destination</code> are the same array, the input and output
ranges are <strong>not</strong> permitted to overlap.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> source - Array containing the input range.
    <dd> destination - Array containing the output range.
    <dd> first - Beginning of the input range
    <dd> middle - Element that is mapped to <code>to</code>.
    <dd> last - One past the end of the input range
    <dd> to - First element of the output range
  </dl>
</dl>
<a name="random_shuffle(double[], int, int, java.util.Random)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="random_shuffle"><b>random_shuffle</b></a>
<pre>
  public static void random_shuffle(double array[],
                                    int first,
                                    int last,
                                    <a href="java.util.Random.html#_top_">Random</a> RNG)
</pre>
<dl>
  <dd> Shuffles elements in a range, with uniform distribution.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range to be shuffled
    <dd> first - Beginning of the range
    <dd> last - One past the end of the range
    <dd> RNG - Object of class <code>java.util.Random</code>,
                 used to supply random numbers.
  </dl>
</dl>
<a name="random_shuffle(double[], int, int)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="random_shuffle"><b>random_shuffle</b></a>
<pre>
  public static void random_shuffle(double array[],
                                    int first,
                                    int last)
</pre>
<dl>
  <dd> Shuffles elements in a range, with uniform distribution.  
Uses a default random number generator.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range to be shuffled
    <dd> first - Beginning of the range
    <dd> last - One past the end of the range
  </dl>
</dl>
<a name="partition(double[], int, int, jal.DOUBLE.Predicate)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="partition"><b>partition</b></a>
<pre>
  public static int partition(double array[],
                              int first,
                              int last,
                              <a href="jal.DOUBLE.Predicate.html#_top_">Predicate</a> p)
</pre>
<dl>
  <dd> Rearranges elements in a range such that all elements that satisfy 
a condition are placed before all elements that do not satisfy it.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range
    <dd> first - Beginning of the range
    <dd> last - One past the end of the range
    <dd> p - Condition being tested
    <dt> <b>Returns:</b>
    <dd> An index <code>a</code> such that for all
                <code>first <= i < a</code>,
                <code>p.apply(array[i])</code> is <code>true</code>
                and such that for all
                <code>a <= i < last</code>, 
                <code>p.apply(array[i])</code> is <code>false</code>.
    <dt> <b>See Also:</b>
    <dd> <a href="jal.DOUBLE.Predicate.html#_top_">Predicate</a>
  </dl>
</dl>
<a name="stable_partition(double[], int, int, jal.DOUBLE.Predicate)"><img src="images/green-ball.gif" width=12 height=12 alt=" o "></a>
<a name="stable_partition"><b>stable_partition</b></a>
<pre>
  public static int stable_partition(double array[],
                                     int first,
                                     int last,
                                     <a href="jal.DOUBLE.Predicate.html#_top_">Predicate</a> p)
</pre>
<dl>
  <dd> Rearranges elements in a range such that all elements that satisfy 
a condition are placed before all elements that do not satisfy it.
It is guaranteed that the relative ordering within each group is
unchanged.
  <dl>
    <dt> <b>Parameters:</b>
    <dd> array - Array containing the range
    <dd> first - Beginning of the range
    <dd> last - One past the end of the range
    <dd> p - Condition being tested
    <dt> <b>Returns:</b>
    <dd> An index <code>a</code> such that for all
                <code>first <= i < a</code>,
                <code>p.apply(array[i])</code> is <code>true</code>
                and such that for all
                <code>a <= i < last</code>, 
                <code>p.apply(array[i])</code> is <code>false</code>.
    <dt> <b>See Also:</b>
    <dd> <a href="jal.DOUBLE.Predicate.html#_top_">Predicate</a>
  </dl>
</dl>
<hr>
<pre>
<a href="packages.html">All Packages</a>  <a href="tree.html">Class Hierarchy</a>  <a href="Package-jal.DOUBLE.html">This Package</a>  <a href="jal.DOUBLE.Inspection.html#_top_">Previous</a>  <a href="jal.DOUBLE.Numeric.html#_top_">Next</a>  <a href="AllNames.html">Index</a></pre>
</body>
</html>
