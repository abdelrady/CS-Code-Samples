<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>