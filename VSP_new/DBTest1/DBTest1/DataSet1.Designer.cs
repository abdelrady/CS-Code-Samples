//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DBTest1 {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : System.Data.DataSet {
        
        private UsersDataTable tableUsers;
        
        private GroupsDataTable tableGroups;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Groups"] != null)) {
                    base.Tables.Add(new GroupsDataTable(ds.Tables["Groups"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GroupsDataTable Groups {
            get {
                return this.tableGroups;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Groups"] != null)) {
                    base.Tables.Add(new GroupsDataTable(ds.Tables["Groups"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUsers = ((UsersDataTable)(base.Tables["Users"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
            this.tableGroups = ((GroupsDataTable)(base.Tables["Groups"]));
            if ((initTable == true)) {
                if ((this.tableGroups != null)) {
                    this.tableGroups.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            this.tableGroups = new GroupsDataTable();
            base.Tables.Add(this.tableGroups);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGroups() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        public delegate void GroupsRowChangeEventHandler(object sender, GroupsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnuserID;
            
            private System.Data.DataColumn columnuserfName;
            
            private System.Data.DataColumn columnuserlName;
            
            private System.Data.DataColumn columnuserValid;
            
            private System.Data.DataColumn columnuserEmail;
            
            private System.Data.DataColumn columnuserPhone;
            
            private System.Data.DataColumn columnuserDescription;
            
            private System.Data.DataColumn columnuserStage;
            
            private System.Data.DataColumn columnuserImage;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersDataTable() {
                this.TableName = "Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userIDColumn {
                get {
                    return this.columnuserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userfNameColumn {
                get {
                    return this.columnuserfName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userlNameColumn {
                get {
                    return this.columnuserlName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userValidColumn {
                get {
                    return this.columnuserValid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userEmailColumn {
                get {
                    return this.columnuserEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userPhoneColumn {
                get {
                    return this.columnuserPhone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userDescriptionColumn {
                get {
                    return this.columnuserDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userStageColumn {
                get {
                    return this.columnuserStage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userImageColumn {
                get {
                    return this.columnuserImage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow AddUsersRow(string userID, string userfName, string userlName, bool userValid, string userEmail, string userPhone, string userDescription, string userStage, byte[] userImage) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                rowUsersRow.ItemArray = new object[] {
                        userID,
                        userfName,
                        userlName,
                        userValid,
                        userEmail,
                        userPhone,
                        userDescription,
                        userStage,
                        userImage};
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow FindByuserID(string userID) {
                return ((UsersRow)(this.Rows.Find(new object[] {
                            userID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuserID = base.Columns["userID"];
                this.columnuserfName = base.Columns["userfName"];
                this.columnuserlName = base.Columns["userlName"];
                this.columnuserValid = base.Columns["userValid"];
                this.columnuserEmail = base.Columns["userEmail"];
                this.columnuserPhone = base.Columns["userPhone"];
                this.columnuserDescription = base.Columns["userDescription"];
                this.columnuserStage = base.Columns["userStage"];
                this.columnuserImage = base.Columns["userImage"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuserID = new System.Data.DataColumn("userID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserID);
                this.columnuserfName = new System.Data.DataColumn("userfName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserfName);
                this.columnuserlName = new System.Data.DataColumn("userlName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserlName);
                this.columnuserValid = new System.Data.DataColumn("userValid", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserValid);
                this.columnuserEmail = new System.Data.DataColumn("userEmail", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserEmail);
                this.columnuserPhone = new System.Data.DataColumn("userPhone", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserPhone);
                this.columnuserDescription = new System.Data.DataColumn("userDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserDescription);
                this.columnuserStage = new System.Data.DataColumn("userStage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserStage);
                this.columnuserImage = new System.Data.DataColumn("userImage", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserImage);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnuserID}, true));
                this.columnuserID.AllowDBNull = false;
                this.columnuserID.Unique = true;
                this.columnuserID.MaxLength = 50;
                this.columnuserfName.MaxLength = 150;
                this.columnuserlName.MaxLength = 150;
                this.columnuserEmail.MaxLength = 50;
                this.columnuserPhone.MaxLength = 2147483647;
                this.columnuserDescription.MaxLength = 2147483647;
                this.columnuserStage.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GroupsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columngroupNum;
            
            private System.Data.DataColumn columngroupName;
            
            private System.Data.DataColumn columnuserID;
            
            private System.Data.DataColumn columnuserfName;
            
            private System.Data.DataColumn columnuserlName;
            
            private System.Data.DataColumn columnuserValid;
            
            private System.Data.DataColumn columnuserEmail;
            
            private System.Data.DataColumn columnuserPhone;
            
            private System.Data.DataColumn columnuserDescription;
            
            private System.Data.DataColumn columnuserStage;
            
            private System.Data.DataColumn columnuserImage;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsDataTable() {
                this.TableName = "Groups";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GroupsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn groupNumColumn {
                get {
                    return this.columngroupNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn groupNameColumn {
                get {
                    return this.columngroupName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userIDColumn {
                get {
                    return this.columnuserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userfNameColumn {
                get {
                    return this.columnuserfName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userlNameColumn {
                get {
                    return this.columnuserlName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userValidColumn {
                get {
                    return this.columnuserValid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userEmailColumn {
                get {
                    return this.columnuserEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userPhoneColumn {
                get {
                    return this.columnuserPhone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userDescriptionColumn {
                get {
                    return this.columnuserDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userStageColumn {
                get {
                    return this.columnuserStage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userImageColumn {
                get {
                    return this.columnuserImage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow this[int index] {
                get {
                    return ((GroupsRow)(this.Rows[index]));
                }
            }
            
            public event GroupsRowChangeEventHandler GroupsRowChanging;
            
            public event GroupsRowChangeEventHandler GroupsRowChanged;
            
            public event GroupsRowChangeEventHandler GroupsRowDeleting;
            
            public event GroupsRowChangeEventHandler GroupsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGroupsRow(GroupsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow AddGroupsRow(int groupNum, string groupName, string userID, string userfName, string userlName, bool userValid, string userEmail, string userPhone, string userDescription, string userStage, byte[] userImage) {
                GroupsRow rowGroupsRow = ((GroupsRow)(this.NewRow()));
                rowGroupsRow.ItemArray = new object[] {
                        groupNum,
                        groupName,
                        userID,
                        userfName,
                        userlName,
                        userValid,
                        userEmail,
                        userPhone,
                        userDescription,
                        userStage,
                        userImage};
                this.Rows.Add(rowGroupsRow);
                return rowGroupsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GroupsDataTable cln = ((GroupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GroupsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columngroupNum = base.Columns["groupNum"];
                this.columngroupName = base.Columns["groupName"];
                this.columnuserID = base.Columns["userID"];
                this.columnuserfName = base.Columns["userfName"];
                this.columnuserlName = base.Columns["userlName"];
                this.columnuserValid = base.Columns["userValid"];
                this.columnuserEmail = base.Columns["userEmail"];
                this.columnuserPhone = base.Columns["userPhone"];
                this.columnuserDescription = base.Columns["userDescription"];
                this.columnuserStage = base.Columns["userStage"];
                this.columnuserImage = base.Columns["userImage"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columngroupNum = new System.Data.DataColumn("groupNum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngroupNum);
                this.columngroupName = new System.Data.DataColumn("groupName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngroupName);
                this.columnuserID = new System.Data.DataColumn("userID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserID);
                this.columnuserfName = new System.Data.DataColumn("userfName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserfName);
                this.columnuserlName = new System.Data.DataColumn("userlName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserlName);
                this.columnuserValid = new System.Data.DataColumn("userValid", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserValid);
                this.columnuserEmail = new System.Data.DataColumn("userEmail", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserEmail);
                this.columnuserPhone = new System.Data.DataColumn("userPhone", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserPhone);
                this.columnuserDescription = new System.Data.DataColumn("userDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserDescription);
                this.columnuserStage = new System.Data.DataColumn("userStage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserStage);
                this.columnuserImage = new System.Data.DataColumn("userImage", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserImage);
                this.columngroupNum.AllowDBNull = false;
                this.columngroupName.MaxLength = 100;
                this.columnuserID.AllowDBNull = false;
                this.columnuserID.MaxLength = 50;
                this.columnuserfName.MaxLength = 150;
                this.columnuserlName.MaxLength = 150;
                this.columnuserEmail.MaxLength = 50;
                this.columnuserPhone.MaxLength = 2147483647;
                this.columnuserDescription.MaxLength = 150;
                this.columnuserStage.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow NewGroupsRow() {
                return ((GroupsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GroupsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GroupsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GroupsRowChanged != null)) {
                    this.GroupsRowChanged(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GroupsRowChanging != null)) {
                    this.GroupsRowChanging(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GroupsRowDeleted != null)) {
                    this.GroupsRowDeleted(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GroupsRowDeleting != null)) {
                    this.GroupsRowDeleting(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGroupsRow(GroupsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GroupsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersRow : System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userID {
                get {
                    return ((string)(this[this.tableUsers.userIDColumn]));
                }
                set {
                    this[this.tableUsers.userIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userfName {
                get {
                    try {
                        return ((string)(this[this.tableUsers.userfNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userfName\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userfNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userlName {
                get {
                    try {
                        return ((string)(this[this.tableUsers.userlNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userlName\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userlNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool userValid {
                get {
                    try {
                        return ((bool)(this[this.tableUsers.userValidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userValid\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userValidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userEmail {
                get {
                    try {
                        return ((string)(this[this.tableUsers.userEmailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userEmail\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userEmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userPhone {
                get {
                    try {
                        return ((string)(this[this.tableUsers.userPhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userPhone\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userPhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userDescription {
                get {
                    try {
                        return ((string)(this[this.tableUsers.userDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userDescription\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userStage {
                get {
                    try {
                        return ((string)(this[this.tableUsers.userStageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userStage\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userStageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] userImage {
                get {
                    try {
                        return ((byte[])(this[this.tableUsers.userImageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userImage\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userImageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserfNameNull() {
                return this.IsNull(this.tableUsers.userfNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserfNameNull() {
                this[this.tableUsers.userfNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserlNameNull() {
                return this.IsNull(this.tableUsers.userlNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserlNameNull() {
                this[this.tableUsers.userlNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserValidNull() {
                return this.IsNull(this.tableUsers.userValidColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserValidNull() {
                this[this.tableUsers.userValidColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserEmailNull() {
                return this.IsNull(this.tableUsers.userEmailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserEmailNull() {
                this[this.tableUsers.userEmailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserPhoneNull() {
                return this.IsNull(this.tableUsers.userPhoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserPhoneNull() {
                this[this.tableUsers.userPhoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserDescriptionNull() {
                return this.IsNull(this.tableUsers.userDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserDescriptionNull() {
                this[this.tableUsers.userDescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserStageNull() {
                return this.IsNull(this.tableUsers.userStageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserStageNull() {
                this[this.tableUsers.userStageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserImageNull() {
                return this.IsNull(this.tableUsers.userImageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserImageNull() {
                this[this.tableUsers.userImageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GroupsRow : System.Data.DataRow {
            
            private GroupsDataTable tableGroups;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroups = ((GroupsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int groupNum {
                get {
                    return ((int)(this[this.tableGroups.groupNumColumn]));
                }
                set {
                    this[this.tableGroups.groupNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string groupName {
                get {
                    try {
                        return ((string)(this[this.tableGroups.groupNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'groupName\' in table \'Groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.groupNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userID {
                get {
                    return ((string)(this[this.tableGroups.userIDColumn]));
                }
                set {
                    this[this.tableGroups.userIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userfName {
                get {
                    try {
                        return ((string)(this[this.tableGroups.userfNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userfName\' in table \'Groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.userfNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userlName {
                get {
                    try {
                        return ((string)(this[this.tableGroups.userlNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userlName\' in table \'Groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.userlNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool userValid {
                get {
                    try {
                        return ((bool)(this[this.tableGroups.userValidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userValid\' in table \'Groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.userValidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userEmail {
                get {
                    try {
                        return ((string)(this[this.tableGroups.userEmailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userEmail\' in table \'Groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.userEmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userPhone {
                get {
                    try {
                        return ((string)(this[this.tableGroups.userPhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userPhone\' in table \'Groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.userPhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userDescription {
                get {
                    try {
                        return ((string)(this[this.tableGroups.userDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userDescription\' in table \'Groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.userDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userStage {
                get {
                    try {
                        return ((string)(this[this.tableGroups.userStageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userStage\' in table \'Groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.userStageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] userImage {
                get {
                    try {
                        return ((byte[])(this[this.tableGroups.userImageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userImage\' in table \'Groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.userImageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroupNameNull() {
                return this.IsNull(this.tableGroups.groupNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroupNameNull() {
                this[this.tableGroups.groupNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserfNameNull() {
                return this.IsNull(this.tableGroups.userfNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserfNameNull() {
                this[this.tableGroups.userfNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserlNameNull() {
                return this.IsNull(this.tableGroups.userlNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserlNameNull() {
                this[this.tableGroups.userlNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserValidNull() {
                return this.IsNull(this.tableGroups.userValidColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserValidNull() {
                this[this.tableGroups.userValidColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserEmailNull() {
                return this.IsNull(this.tableGroups.userEmailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserEmailNull() {
                this[this.tableGroups.userEmailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserPhoneNull() {
                return this.IsNull(this.tableGroups.userPhoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserPhoneNull() {
                this[this.tableGroups.userPhoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserDescriptionNull() {
                return this.IsNull(this.tableGroups.userDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserDescriptionNull() {
                this[this.tableGroups.userDescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserStageNull() {
                return this.IsNull(this.tableGroups.userStageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserStageNull() {
                this[this.tableGroups.userStageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserImageNull() {
                return this.IsNull(this.tableGroups.userImageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserImageNull() {
                this[this.tableGroups.userImageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersRowChangeEvent : System.EventArgs {
            
            private UsersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRowChangeEvent(UsersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GroupsRowChangeEvent : System.EventArgs {
            
            private GroupsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRowChangeEvent(GroupsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591