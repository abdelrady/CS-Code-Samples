// MCIWndWrapperDlg.cpp : implementation file
//

#include "stdafx.h"
#include "MCIWndWrapper.h"
#include "MCIWndWrapperDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


/******************************************************************************
*******************************************************************************
**
** Interesting CMCIWnd stuff - the whole purpose for this sample app.
** See MCIWnd.h/cpp for more info.  And refer to MCIWnd in MSDN.
**
******************************************************************************/

/******************************************************************************
**
** MFC Message Map.  Notice the ON_MESSAGE entries for CMCIWnd notifications.
**
******************************************************************************/

BEGIN_MESSAGE_MAP(CWrapperDlg, CDialog)
	//{{AFX_MSG_MAP(CWrapperDlg)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDB_PLAY, OnPlayAVI)
	ON_MESSAGE( MCIWNDM_NOTIFYERROR, OnMCIWnd_NotifyError )
	ON_MESSAGE( MCIWNDM_NOTIFYMEDIA, OnMCIWnd_NotifyMedia )
	ON_MESSAGE( MCIWNDM_NOTIFYMODE, OnMCIWnd_NotifyMode )
	ON_MESSAGE( MCIWNDM_NOTIFYPOS, OnMCIWnd_NotifyPos )
	ON_MESSAGE( MCIWNDM_NOTIFYSIZE, OnMCIWnd_NotifySize )
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/******************************************************************************
**
** Play the test AVI file.
**
******************************************************************************/

void CWrapperDlg::OnPlayAVI()
{
	// Create the window like you would any Windows control.
	m_mciWnd.Create(WS_CHILD | WS_VISIBLE  | MCIWNDF_NOPLAYBAR | MCIWNDF_NOERRORDLG | MCIWNDF_NOTIFYERROR, CRect(0, 0, 300,300), this, 1234);
	
	// Open the AVI file.
	CString strAVIPath = MakePathToInstalledFile(_T("CLOCKTXT.AVI"));
	m_mciWnd.Open(strAVIPath);

	// Play the opened AVI file.
	m_mciWnd.Play();

	// To keep the demo simple - can't play the AVI file more than one time.
	((CButton *)GetDlgItem(IDB_PLAY))->EnableWindow(FALSE);
}

/******************************************************************************
**
** Sample message handlers for the CMCIWnd window: MCIWNDM_NOTIFYERROR,
** MCIWNDM_NOTIFYMEDIA, MCIWNDM_NOTIFYMODE, MCIWNDM_NOTIFYPOS, MCIWNDM_NOTIFYSIZE
** so you'll know how to do this...
**
******************************************************************************/
LRESULT CWrapperDlg::OnMCIWnd_NotifyError(WPARAM wParam, LPARAM lParam)
{
	return 0;
}
LRESULT CWrapperDlg::OnMCIWnd_NotifyMedia(WPARAM wParam, LPARAM lParam)
{
	return 0;
}
LRESULT CWrapperDlg::OnMCIWnd_NotifyMode(WPARAM wParam, LPARAM lParam)
{
	return 0;
}
LRESULT CWrapperDlg::OnMCIWnd_NotifyPos(WPARAM wParam, LPARAM lParam)
{
	return 0;
}
LRESULT CWrapperDlg::OnMCIWnd_NotifySize(WPARAM wParam, LPARAM lParam)
{
	return 0;
}


/******************************************************************************
**
** A utility function unrelated to CMCIWnd window usage but still useful
** perhaps to you.  Returns a full path to a file located where the program
** is running from.  Appends the filename passed in.
**
******************************************************************************/

CString CWrapperDlg::MakePathToInstalledFile(CString strFileName)
{
	// get path of skin file.
	TCHAR szBuff[_MAX_PATH];
	VERIFY(::GetModuleFileName(AfxGetInstanceHandle(), szBuff, _MAX_PATH));
	char *tmp = strrchr(szBuff, '\\');
	if(tmp != NULL)
		*(tmp + 1) = 0;
	lstrcat(szBuff, strFileName);
	return szBuff;
}

/******************************************************************************
*******************************************************************************
**
** Boring stuff generated by the wizard...don't bother looking below here
** unless you never seen what the Microsoft project wizard generates.
**
******************************************************************************/


CWrapperDlg::CWrapperDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CWrapperDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CWrapperDlg)
		// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}


BOOL CWrapperDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Set the icon for this dialog.  The framework does this automatically
	// when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon
	
	// TODO: Add extra initialization here
	
	return TRUE;  // return TRUE  unless you set the focus to a control
}

void CWrapperDlg::OnPaint() 
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

HCURSOR CWrapperDlg::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}
