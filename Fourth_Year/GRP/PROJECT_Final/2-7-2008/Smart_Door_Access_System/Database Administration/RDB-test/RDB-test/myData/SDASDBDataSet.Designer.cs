//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RDB_test.myData {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("SDASDBDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SDASDBDataSet : System.Data.DataSet {
        
        private AdminUsersDataTable tableAdminUsers;
        
        private DoorsDataTable tableDoors;
        
        private GroupsDataTable tableGroups;
        
        private Groups_DoorsDataTable tableGroups_Doors;
        
        private LogsDataTable tableLogs;
        
        private ServerSettingsDataTable tableServerSettings;
        
        private UsersDataTable tableUsers;
        
        private Users_DoorsDataTable tableUsers_Doors;
        
        private Users_GroupsDataTable tableUsers_Groups;
        
        private UsersINGroupDataTable tableUsersINGroup;
        
        private DoorsInGroupDataTable tableDoorsInGroup;
        
        private UsersInDoorsDataTable tableUsersInDoors;
        
        private GroupsInDoorDataTable tableGroupsInDoor;
        
        private System.Data.DataRelation relationFK_Groups_Doors_Doors;
        
        private System.Data.DataRelation relationFK_Groups_Doors_Groups;
        
        private System.Data.DataRelation relationFK_Logs_Doors;
        
        private System.Data.DataRelation relationFK_Logs_Users;
        
        private System.Data.DataRelation relationFK_Users_Doors_Doors;
        
        private System.Data.DataRelation relationFK_Users_Doors_Users;
        
        private System.Data.DataRelation relationFK_Users_Groups_Groups;
        
        private System.Data.DataRelation relationFK_Users_Groups_Users;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SDASDBDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SDASDBDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AdminUsers"] != null)) {
                    base.Tables.Add(new AdminUsersDataTable(ds.Tables["AdminUsers"]));
                }
                if ((ds.Tables["Doors"] != null)) {
                    base.Tables.Add(new DoorsDataTable(ds.Tables["Doors"]));
                }
                if ((ds.Tables["Groups"] != null)) {
                    base.Tables.Add(new GroupsDataTable(ds.Tables["Groups"]));
                }
                if ((ds.Tables["Groups_Doors"] != null)) {
                    base.Tables.Add(new Groups_DoorsDataTable(ds.Tables["Groups_Doors"]));
                }
                if ((ds.Tables["Logs"] != null)) {
                    base.Tables.Add(new LogsDataTable(ds.Tables["Logs"]));
                }
                if ((ds.Tables["ServerSettings"] != null)) {
                    base.Tables.Add(new ServerSettingsDataTable(ds.Tables["ServerSettings"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Users_Doors"] != null)) {
                    base.Tables.Add(new Users_DoorsDataTable(ds.Tables["Users_Doors"]));
                }
                if ((ds.Tables["Users_Groups"] != null)) {
                    base.Tables.Add(new Users_GroupsDataTable(ds.Tables["Users_Groups"]));
                }
                if ((ds.Tables["UsersINGroup"] != null)) {
                    base.Tables.Add(new UsersINGroupDataTable(ds.Tables["UsersINGroup"]));
                }
                if ((ds.Tables["DoorsInGroup"] != null)) {
                    base.Tables.Add(new DoorsInGroupDataTable(ds.Tables["DoorsInGroup"]));
                }
                if ((ds.Tables["UsersInDoors"] != null)) {
                    base.Tables.Add(new UsersInDoorsDataTable(ds.Tables["UsersInDoors"]));
                }
                if ((ds.Tables["GroupsInDoor"] != null)) {
                    base.Tables.Add(new GroupsInDoorDataTable(ds.Tables["GroupsInDoor"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AdminUsersDataTable AdminUsers {
            get {
                return this.tableAdminUsers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DoorsDataTable Doors {
            get {
                return this.tableDoors;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GroupsDataTable Groups {
            get {
                return this.tableGroups;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Groups_DoorsDataTable Groups_Doors {
            get {
                return this.tableGroups_Doors;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LogsDataTable Logs {
            get {
                return this.tableLogs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerSettingsDataTable ServerSettings {
            get {
                return this.tableServerSettings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Users_DoorsDataTable Users_Doors {
            get {
                return this.tableUsers_Doors;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Users_GroupsDataTable Users_Groups {
            get {
                return this.tableUsers_Groups;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersINGroupDataTable UsersINGroup {
            get {
                return this.tableUsersINGroup;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DoorsInGroupDataTable DoorsInGroup {
            get {
                return this.tableDoorsInGroup;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersInDoorsDataTable UsersInDoors {
            get {
                return this.tableUsersInDoors;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GroupsInDoorDataTable GroupsInDoor {
            get {
                return this.tableGroupsInDoor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            SDASDBDataSet cln = ((SDASDBDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AdminUsers"] != null)) {
                    base.Tables.Add(new AdminUsersDataTable(ds.Tables["AdminUsers"]));
                }
                if ((ds.Tables["Doors"] != null)) {
                    base.Tables.Add(new DoorsDataTable(ds.Tables["Doors"]));
                }
                if ((ds.Tables["Groups"] != null)) {
                    base.Tables.Add(new GroupsDataTable(ds.Tables["Groups"]));
                }
                if ((ds.Tables["Groups_Doors"] != null)) {
                    base.Tables.Add(new Groups_DoorsDataTable(ds.Tables["Groups_Doors"]));
                }
                if ((ds.Tables["Logs"] != null)) {
                    base.Tables.Add(new LogsDataTable(ds.Tables["Logs"]));
                }
                if ((ds.Tables["ServerSettings"] != null)) {
                    base.Tables.Add(new ServerSettingsDataTable(ds.Tables["ServerSettings"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Users_Doors"] != null)) {
                    base.Tables.Add(new Users_DoorsDataTable(ds.Tables["Users_Doors"]));
                }
                if ((ds.Tables["Users_Groups"] != null)) {
                    base.Tables.Add(new Users_GroupsDataTable(ds.Tables["Users_Groups"]));
                }
                if ((ds.Tables["UsersINGroup"] != null)) {
                    base.Tables.Add(new UsersINGroupDataTable(ds.Tables["UsersINGroup"]));
                }
                if ((ds.Tables["DoorsInGroup"] != null)) {
                    base.Tables.Add(new DoorsInGroupDataTable(ds.Tables["DoorsInGroup"]));
                }
                if ((ds.Tables["UsersInDoors"] != null)) {
                    base.Tables.Add(new UsersInDoorsDataTable(ds.Tables["UsersInDoors"]));
                }
                if ((ds.Tables["GroupsInDoor"] != null)) {
                    base.Tables.Add(new GroupsInDoorDataTable(ds.Tables["GroupsInDoor"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAdminUsers = ((AdminUsersDataTable)(base.Tables["AdminUsers"]));
            if ((initTable == true)) {
                if ((this.tableAdminUsers != null)) {
                    this.tableAdminUsers.InitVars();
                }
            }
            this.tableDoors = ((DoorsDataTable)(base.Tables["Doors"]));
            if ((initTable == true)) {
                if ((this.tableDoors != null)) {
                    this.tableDoors.InitVars();
                }
            }
            this.tableGroups = ((GroupsDataTable)(base.Tables["Groups"]));
            if ((initTable == true)) {
                if ((this.tableGroups != null)) {
                    this.tableGroups.InitVars();
                }
            }
            this.tableGroups_Doors = ((Groups_DoorsDataTable)(base.Tables["Groups_Doors"]));
            if ((initTable == true)) {
                if ((this.tableGroups_Doors != null)) {
                    this.tableGroups_Doors.InitVars();
                }
            }
            this.tableLogs = ((LogsDataTable)(base.Tables["Logs"]));
            if ((initTable == true)) {
                if ((this.tableLogs != null)) {
                    this.tableLogs.InitVars();
                }
            }
            this.tableServerSettings = ((ServerSettingsDataTable)(base.Tables["ServerSettings"]));
            if ((initTable == true)) {
                if ((this.tableServerSettings != null)) {
                    this.tableServerSettings.InitVars();
                }
            }
            this.tableUsers = ((UsersDataTable)(base.Tables["Users"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
            this.tableUsers_Doors = ((Users_DoorsDataTable)(base.Tables["Users_Doors"]));
            if ((initTable == true)) {
                if ((this.tableUsers_Doors != null)) {
                    this.tableUsers_Doors.InitVars();
                }
            }
            this.tableUsers_Groups = ((Users_GroupsDataTable)(base.Tables["Users_Groups"]));
            if ((initTable == true)) {
                if ((this.tableUsers_Groups != null)) {
                    this.tableUsers_Groups.InitVars();
                }
            }
            this.tableUsersINGroup = ((UsersINGroupDataTable)(base.Tables["UsersINGroup"]));
            if ((initTable == true)) {
                if ((this.tableUsersINGroup != null)) {
                    this.tableUsersINGroup.InitVars();
                }
            }
            this.tableDoorsInGroup = ((DoorsInGroupDataTable)(base.Tables["DoorsInGroup"]));
            if ((initTable == true)) {
                if ((this.tableDoorsInGroup != null)) {
                    this.tableDoorsInGroup.InitVars();
                }
            }
            this.tableUsersInDoors = ((UsersInDoorsDataTable)(base.Tables["UsersInDoors"]));
            if ((initTable == true)) {
                if ((this.tableUsersInDoors != null)) {
                    this.tableUsersInDoors.InitVars();
                }
            }
            this.tableGroupsInDoor = ((GroupsInDoorDataTable)(base.Tables["GroupsInDoor"]));
            if ((initTable == true)) {
                if ((this.tableGroupsInDoor != null)) {
                    this.tableGroupsInDoor.InitVars();
                }
            }
            this.relationFK_Groups_Doors_Doors = this.Relations["FK_Groups_Doors_Doors"];
            this.relationFK_Groups_Doors_Groups = this.Relations["FK_Groups_Doors_Groups"];
            this.relationFK_Logs_Doors = this.Relations["FK_Logs_Doors"];
            this.relationFK_Logs_Users = this.Relations["FK_Logs_Users"];
            this.relationFK_Users_Doors_Doors = this.Relations["FK_Users_Doors_Doors"];
            this.relationFK_Users_Doors_Users = this.Relations["FK_Users_Doors_Users"];
            this.relationFK_Users_Groups_Groups = this.Relations["FK_Users_Groups_Groups"];
            this.relationFK_Users_Groups_Users = this.Relations["FK_Users_Groups_Users"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SDASDBDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SDASDBDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAdminUsers = new AdminUsersDataTable();
            base.Tables.Add(this.tableAdminUsers);
            this.tableDoors = new DoorsDataTable();
            base.Tables.Add(this.tableDoors);
            this.tableGroups = new GroupsDataTable();
            base.Tables.Add(this.tableGroups);
            this.tableGroups_Doors = new Groups_DoorsDataTable();
            base.Tables.Add(this.tableGroups_Doors);
            this.tableLogs = new LogsDataTable();
            base.Tables.Add(this.tableLogs);
            this.tableServerSettings = new ServerSettingsDataTable();
            base.Tables.Add(this.tableServerSettings);
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            this.tableUsers_Doors = new Users_DoorsDataTable();
            base.Tables.Add(this.tableUsers_Doors);
            this.tableUsers_Groups = new Users_GroupsDataTable();
            base.Tables.Add(this.tableUsers_Groups);
            this.tableUsersINGroup = new UsersINGroupDataTable();
            base.Tables.Add(this.tableUsersINGroup);
            this.tableDoorsInGroup = new DoorsInGroupDataTable();
            base.Tables.Add(this.tableDoorsInGroup);
            this.tableUsersInDoors = new UsersInDoorsDataTable();
            base.Tables.Add(this.tableUsersInDoors);
            this.tableGroupsInDoor = new GroupsInDoorDataTable();
            base.Tables.Add(this.tableGroupsInDoor);
            this.relationFK_Groups_Doors_Doors = new System.Data.DataRelation("FK_Groups_Doors_Doors", new System.Data.DataColumn[] {
                        this.tableDoors.doorNumColumn}, new System.Data.DataColumn[] {
                        this.tableGroups_Doors.doorNumColumn}, false);
            this.Relations.Add(this.relationFK_Groups_Doors_Doors);
            this.relationFK_Groups_Doors_Groups = new System.Data.DataRelation("FK_Groups_Doors_Groups", new System.Data.DataColumn[] {
                        this.tableGroups.groupNumColumn}, new System.Data.DataColumn[] {
                        this.tableGroups_Doors.groupNumColumn}, false);
            this.Relations.Add(this.relationFK_Groups_Doors_Groups);
            this.relationFK_Logs_Doors = new System.Data.DataRelation("FK_Logs_Doors", new System.Data.DataColumn[] {
                        this.tableDoors.doorNumColumn}, new System.Data.DataColumn[] {
                        this.tableLogs.doorNumberColumn}, false);
            this.Relations.Add(this.relationFK_Logs_Doors);
            this.relationFK_Logs_Users = new System.Data.DataRelation("FK_Logs_Users", new System.Data.DataColumn[] {
                        this.tableUsers.userIDColumn}, new System.Data.DataColumn[] {
                        this.tableLogs.IDColumn}, false);
            this.Relations.Add(this.relationFK_Logs_Users);
            this.relationFK_Users_Doors_Doors = new System.Data.DataRelation("FK_Users_Doors_Doors", new System.Data.DataColumn[] {
                        this.tableDoors.doorNumColumn}, new System.Data.DataColumn[] {
                        this.tableUsers_Doors.doorNumColumn}, false);
            this.Relations.Add(this.relationFK_Users_Doors_Doors);
            this.relationFK_Users_Doors_Users = new System.Data.DataRelation("FK_Users_Doors_Users", new System.Data.DataColumn[] {
                        this.tableUsers.userIDColumn}, new System.Data.DataColumn[] {
                        this.tableUsers_Doors.userIDColumn}, false);
            this.Relations.Add(this.relationFK_Users_Doors_Users);
            this.relationFK_Users_Groups_Groups = new System.Data.DataRelation("FK_Users_Groups_Groups", new System.Data.DataColumn[] {
                        this.tableGroups.groupNumColumn}, new System.Data.DataColumn[] {
                        this.tableUsers_Groups.GroupNumColumn}, false);
            this.Relations.Add(this.relationFK_Users_Groups_Groups);
            this.relationFK_Users_Groups_Users = new System.Data.DataRelation("FK_Users_Groups_Users", new System.Data.DataColumn[] {
                        this.tableUsers.userIDColumn}, new System.Data.DataColumn[] {
                        this.tableUsers_Groups.userIDColumn}, false);
            this.Relations.Add(this.relationFK_Users_Groups_Users);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAdminUsers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDoors() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGroups() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGroups_Doors() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLogs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerSettings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers_Doors() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers_Groups() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsersINGroup() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDoorsInGroup() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsersInDoors() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGroupsInDoor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            SDASDBDataSet ds = new SDASDBDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void AdminUsersRowChangeEventHandler(object sender, AdminUsersRowChangeEvent e);
        
        public delegate void DoorsRowChangeEventHandler(object sender, DoorsRowChangeEvent e);
        
        public delegate void GroupsRowChangeEventHandler(object sender, GroupsRowChangeEvent e);
        
        public delegate void Groups_DoorsRowChangeEventHandler(object sender, Groups_DoorsRowChangeEvent e);
        
        public delegate void LogsRowChangeEventHandler(object sender, LogsRowChangeEvent e);
        
        public delegate void ServerSettingsRowChangeEventHandler(object sender, ServerSettingsRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        public delegate void Users_DoorsRowChangeEventHandler(object sender, Users_DoorsRowChangeEvent e);
        
        public delegate void Users_GroupsRowChangeEventHandler(object sender, Users_GroupsRowChangeEvent e);
        
        public delegate void UsersINGroupRowChangeEventHandler(object sender, UsersINGroupRowChangeEvent e);
        
        public delegate void DoorsInGroupRowChangeEventHandler(object sender, DoorsInGroupRowChangeEvent e);
        
        public delegate void UsersInDoorsRowChangeEventHandler(object sender, UsersInDoorsRowChangeEvent e);
        
        public delegate void GroupsInDoorRowChangeEventHandler(object sender, GroupsInDoorRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AdminUsersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnPassword;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminUsersDataTable() {
                this.TableName = "AdminUsers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdminUsersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AdminUsersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminUsersRow this[int index] {
                get {
                    return ((AdminUsersRow)(this.Rows[index]));
                }
            }
            
            public event AdminUsersRowChangeEventHandler AdminUsersRowChanging;
            
            public event AdminUsersRowChangeEventHandler AdminUsersRowChanged;
            
            public event AdminUsersRowChangeEventHandler AdminUsersRowDeleting;
            
            public event AdminUsersRowChangeEventHandler AdminUsersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAdminUsersRow(AdminUsersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminUsersRow AddAdminUsersRow(string Name, string Password) {
                AdminUsersRow rowAdminUsersRow = ((AdminUsersRow)(this.NewRow()));
                rowAdminUsersRow.ItemArray = new object[] {
                        Name,
                        Password};
                this.Rows.Add(rowAdminUsersRow);
                return rowAdminUsersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminUsersRow FindByName(string Name) {
                return ((AdminUsersRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AdminUsersDataTable cln = ((AdminUsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AdminUsersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnPassword = base.Columns["Password"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.MaxLength = 10;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminUsersRow NewAdminUsersRow() {
                return ((AdminUsersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AdminUsersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AdminUsersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AdminUsersRowChanged != null)) {
                    this.AdminUsersRowChanged(this, new AdminUsersRowChangeEvent(((AdminUsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AdminUsersRowChanging != null)) {
                    this.AdminUsersRowChanging(this, new AdminUsersRowChangeEvent(((AdminUsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AdminUsersRowDeleted != null)) {
                    this.AdminUsersRowDeleted(this, new AdminUsersRowChangeEvent(((AdminUsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AdminUsersRowDeleting != null)) {
                    this.AdminUsersRowDeleting(this, new AdminUsersRowChangeEvent(((AdminUsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAdminUsersRow(AdminUsersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AdminUsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DoorsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndoorNum;
            
            private System.Data.DataColumn columndoorName;
            
            private System.Data.DataColumn columndoorLastLogRecieved;
            
            private System.Data.DataColumn columndoorLastListUpdate;
            
            private System.Data.DataColumn columndoorIP;
            
            private System.Data.DataColumn columndoorPassword;
            
            private System.Data.DataColumn columndoorMAC;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsDataTable() {
                this.TableName = "Doors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DoorsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DoorsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorNumColumn {
                get {
                    return this.columndoorNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorNameColumn {
                get {
                    return this.columndoorName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorLastLogRecievedColumn {
                get {
                    return this.columndoorLastLogRecieved;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorLastListUpdateColumn {
                get {
                    return this.columndoorLastListUpdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorIPColumn {
                get {
                    return this.columndoorIP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorPasswordColumn {
                get {
                    return this.columndoorPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorMACColumn {
                get {
                    return this.columndoorMAC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsRow this[int index] {
                get {
                    return ((DoorsRow)(this.Rows[index]));
                }
            }
            
            public event DoorsRowChangeEventHandler DoorsRowChanging;
            
            public event DoorsRowChangeEventHandler DoorsRowChanged;
            
            public event DoorsRowChangeEventHandler DoorsRowDeleting;
            
            public event DoorsRowChangeEventHandler DoorsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDoorsRow(DoorsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsRow AddDoorsRow(int doorNum, string doorName, System.DateTime doorLastLogRecieved, System.DateTime doorLastListUpdate, string doorIP, string doorPassword, string doorMAC) {
                DoorsRow rowDoorsRow = ((DoorsRow)(this.NewRow()));
                rowDoorsRow.ItemArray = new object[] {
                        doorNum,
                        doorName,
                        doorLastLogRecieved,
                        doorLastListUpdate,
                        doorIP,
                        doorPassword,
                        doorMAC};
                this.Rows.Add(rowDoorsRow);
                return rowDoorsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsRow FindBydoorNum(int doorNum) {
                return ((DoorsRow)(this.Rows.Find(new object[] {
                            doorNum})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DoorsDataTable cln = ((DoorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DoorsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndoorNum = base.Columns["doorNum"];
                this.columndoorName = base.Columns["doorName"];
                this.columndoorLastLogRecieved = base.Columns["doorLastLogRecieved"];
                this.columndoorLastListUpdate = base.Columns["doorLastListUpdate"];
                this.columndoorIP = base.Columns["doorIP"];
                this.columndoorPassword = base.Columns["doorPassword"];
                this.columndoorMAC = base.Columns["doorMAC"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndoorNum = new System.Data.DataColumn("doorNum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorNum);
                this.columndoorName = new System.Data.DataColumn("doorName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorName);
                this.columndoorLastLogRecieved = new System.Data.DataColumn("doorLastLogRecieved", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorLastLogRecieved);
                this.columndoorLastListUpdate = new System.Data.DataColumn("doorLastListUpdate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorLastListUpdate);
                this.columndoorIP = new System.Data.DataColumn("doorIP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorIP);
                this.columndoorPassword = new System.Data.DataColumn("doorPassword", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorPassword);
                this.columndoorMAC = new System.Data.DataColumn("doorMAC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorMAC);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columndoorNum}, true));
                this.columndoorNum.AllowDBNull = false;
                this.columndoorNum.Unique = true;
                this.columndoorName.MaxLength = 100;
                this.columndoorIP.MaxLength = 20;
                this.columndoorPassword.MaxLength = 20;
                this.columndoorMAC.MaxLength = 60;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsRow NewDoorsRow() {
                return ((DoorsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DoorsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DoorsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DoorsRowChanged != null)) {
                    this.DoorsRowChanged(this, new DoorsRowChangeEvent(((DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DoorsRowChanging != null)) {
                    this.DoorsRowChanging(this, new DoorsRowChangeEvent(((DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DoorsRowDeleted != null)) {
                    this.DoorsRowDeleted(this, new DoorsRowChangeEvent(((DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DoorsRowDeleting != null)) {
                    this.DoorsRowDeleting(this, new DoorsRowChangeEvent(((DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDoorsRow(DoorsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DoorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GroupsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columngroupNum;
            
            private System.Data.DataColumn columngroupName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsDataTable() {
                this.TableName = "Groups";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GroupsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn groupNumColumn {
                get {
                    return this.columngroupNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn groupNameColumn {
                get {
                    return this.columngroupName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow this[int index] {
                get {
                    return ((GroupsRow)(this.Rows[index]));
                }
            }
            
            public event GroupsRowChangeEventHandler GroupsRowChanging;
            
            public event GroupsRowChangeEventHandler GroupsRowChanged;
            
            public event GroupsRowChangeEventHandler GroupsRowDeleting;
            
            public event GroupsRowChangeEventHandler GroupsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGroupsRow(GroupsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow AddGroupsRow(int groupNum, string groupName) {
                GroupsRow rowGroupsRow = ((GroupsRow)(this.NewRow()));
                rowGroupsRow.ItemArray = new object[] {
                        groupNum,
                        groupName};
                this.Rows.Add(rowGroupsRow);
                return rowGroupsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow FindBygroupNum(int groupNum) {
                return ((GroupsRow)(this.Rows.Find(new object[] {
                            groupNum})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GroupsDataTable cln = ((GroupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GroupsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columngroupNum = base.Columns["groupNum"];
                this.columngroupName = base.Columns["groupName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columngroupNum = new System.Data.DataColumn("groupNum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngroupNum);
                this.columngroupName = new System.Data.DataColumn("groupName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngroupName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columngroupNum}, true));
                this.columngroupNum.AllowDBNull = false;
                this.columngroupNum.Unique = true;
                this.columngroupName.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow NewGroupsRow() {
                return ((GroupsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GroupsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GroupsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GroupsRowChanged != null)) {
                    this.GroupsRowChanged(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GroupsRowChanging != null)) {
                    this.GroupsRowChanging(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GroupsRowDeleted != null)) {
                    this.GroupsRowDeleted(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GroupsRowDeleting != null)) {
                    this.GroupsRowDeleting(this, new GroupsRowChangeEvent(((GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGroupsRow(GroupsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GroupsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Groups_DoorsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columngroupNum;
            
            private System.Data.DataColumn columndoorNum;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Groups_DoorsDataTable() {
                this.TableName = "Groups_Doors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Groups_DoorsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Groups_DoorsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn groupNumColumn {
                get {
                    return this.columngroupNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorNumColumn {
                get {
                    return this.columndoorNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Groups_DoorsRow this[int index] {
                get {
                    return ((Groups_DoorsRow)(this.Rows[index]));
                }
            }
            
            public event Groups_DoorsRowChangeEventHandler Groups_DoorsRowChanging;
            
            public event Groups_DoorsRowChangeEventHandler Groups_DoorsRowChanged;
            
            public event Groups_DoorsRowChangeEventHandler Groups_DoorsRowDeleting;
            
            public event Groups_DoorsRowChangeEventHandler Groups_DoorsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGroups_DoorsRow(Groups_DoorsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Groups_DoorsRow AddGroups_DoorsRow(GroupsRow parentGroupsRowByFK_Groups_Doors_Groups, DoorsRow parentDoorsRowByFK_Groups_Doors_Doors) {
                Groups_DoorsRow rowGroups_DoorsRow = ((Groups_DoorsRow)(this.NewRow()));
                rowGroups_DoorsRow.ItemArray = new object[] {
                        parentGroupsRowByFK_Groups_Doors_Groups[0],
                        parentDoorsRowByFK_Groups_Doors_Doors[0]};
                this.Rows.Add(rowGroups_DoorsRow);
                return rowGroups_DoorsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Groups_DoorsRow FindBygroupNumdoorNum(int groupNum, int doorNum) {
                return ((Groups_DoorsRow)(this.Rows.Find(new object[] {
                            groupNum,
                            doorNum})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Groups_DoorsDataTable cln = ((Groups_DoorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Groups_DoorsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columngroupNum = base.Columns["groupNum"];
                this.columndoorNum = base.Columns["doorNum"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columngroupNum = new System.Data.DataColumn("groupNum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngroupNum);
                this.columndoorNum = new System.Data.DataColumn("doorNum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorNum);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columngroupNum,
                                this.columndoorNum}, true));
                this.columngroupNum.AllowDBNull = false;
                this.columndoorNum.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Groups_DoorsRow NewGroups_DoorsRow() {
                return ((Groups_DoorsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Groups_DoorsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Groups_DoorsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Groups_DoorsRowChanged != null)) {
                    this.Groups_DoorsRowChanged(this, new Groups_DoorsRowChangeEvent(((Groups_DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Groups_DoorsRowChanging != null)) {
                    this.Groups_DoorsRowChanging(this, new Groups_DoorsRowChangeEvent(((Groups_DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Groups_DoorsRowDeleted != null)) {
                    this.Groups_DoorsRowDeleted(this, new Groups_DoorsRowChangeEvent(((Groups_DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Groups_DoorsRowDeleting != null)) {
                    this.Groups_DoorsRowDeleting(this, new Groups_DoorsRowChangeEvent(((Groups_DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGroups_DoorsRow(Groups_DoorsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Groups_DoorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LogsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEnter_time;
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columndoorNumber;
            
            private System.Data.DataColumn columnallowed;
            
            private System.Data.DataColumn columndoorName;
            
            private System.Data.DataColumn columnUser_Name;
            
            private System.Data.DataColumn columnStatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogsDataTable() {
                this.TableName = "Logs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LogsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Enter_timeColumn {
                get {
                    return this.columnEnter_time;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorNumberColumn {
                get {
                    return this.columndoorNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn allowedColumn {
                get {
                    return this.columnallowed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorNameColumn {
                get {
                    return this.columndoorName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn User_NameColumn {
                get {
                    return this.columnUser_Name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogsRow this[int index] {
                get {
                    return ((LogsRow)(this.Rows[index]));
                }
            }
            
            public event LogsRowChangeEventHandler LogsRowChanging;
            
            public event LogsRowChangeEventHandler LogsRowChanged;
            
            public event LogsRowChangeEventHandler LogsRowDeleting;
            
            public event LogsRowChangeEventHandler LogsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLogsRow(LogsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogsRow AddLogsRow(System.DateTime Enter_time, UsersRow parentUsersRowByFK_Logs_Users, DoorsRow parentDoorsRowByFK_Logs_Doors, bool allowed, string doorName, string User_Name, string Status) {
                LogsRow rowLogsRow = ((LogsRow)(this.NewRow()));
                rowLogsRow.ItemArray = new object[] {
                        Enter_time,
                        parentUsersRowByFK_Logs_Users[0],
                        parentDoorsRowByFK_Logs_Doors[0],
                        allowed,
                        doorName,
                        User_Name,
                        Status};
                this.Rows.Add(rowLogsRow);
                return rowLogsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogsRow FindByEnter_timeIDdoorNumber(System.DateTime Enter_time, string ID, int doorNumber) {
                return ((LogsRow)(this.Rows.Find(new object[] {
                            Enter_time,
                            ID,
                            doorNumber})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LogsDataTable cln = ((LogsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LogsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEnter_time = base.Columns["Enter_time"];
                this.columnID = base.Columns["ID"];
                this.columndoorNumber = base.Columns["doorNumber"];
                this.columnallowed = base.Columns["allowed"];
                this.columndoorName = base.Columns["doorName"];
                this.columnUser_Name = base.Columns["User Name"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEnter_time = new System.Data.DataColumn("Enter_time", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnter_time);
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columndoorNumber = new System.Data.DataColumn("doorNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorNumber);
                this.columnallowed = new System.Data.DataColumn("allowed", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnallowed);
                this.columndoorName = new System.Data.DataColumn("doorName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorName);
                this.columnUser_Name = new System.Data.DataColumn("User Name", typeof(string), null, System.Data.MappingType.Element);
                this.columnUser_Name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "User_Name");
                this.columnUser_Name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "User_NameColumn");
                this.columnUser_Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUser_Name");
                this.columnUser_Name.ExtendedProperties.Add("Generator_UserColumnName", "User Name");
                base.Columns.Add(this.columnUser_Name);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEnter_time,
                                this.columnID,
                                this.columndoorNumber}, true));
                this.columnEnter_time.AllowDBNull = false;
                this.columnID.AllowDBNull = false;
                this.columnID.MaxLength = 50;
                this.columndoorNumber.AllowDBNull = false;
                this.columnallowed.AllowDBNull = false;
                this.columndoorName.MaxLength = 100;
                this.columnUser_Name.ReadOnly = true;
                this.columnUser_Name.MaxLength = 301;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 30;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogsRow NewLogsRow() {
                return ((LogsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LogsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LogsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LogsRowChanged != null)) {
                    this.LogsRowChanged(this, new LogsRowChangeEvent(((LogsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LogsRowChanging != null)) {
                    this.LogsRowChanging(this, new LogsRowChangeEvent(((LogsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LogsRowDeleted != null)) {
                    this.LogsRowDeleted(this, new LogsRowChangeEvent(((LogsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LogsRowDeleting != null)) {
                    this.LogsRowDeleting(this, new LogsRowChangeEvent(((LogsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLogsRow(LogsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LogsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerSettingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnvalue;
            
            private System.Data.DataColumn columndescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingsDataTable() {
                this.TableName = "ServerSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerSettingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerSettingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingsRow this[int index] {
                get {
                    return ((ServerSettingsRow)(this.Rows[index]));
                }
            }
            
            public event ServerSettingsRowChangeEventHandler ServerSettingsRowChanging;
            
            public event ServerSettingsRowChangeEventHandler ServerSettingsRowChanged;
            
            public event ServerSettingsRowChangeEventHandler ServerSettingsRowDeleting;
            
            public event ServerSettingsRowChangeEventHandler ServerSettingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerSettingsRow(ServerSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingsRow AddServerSettingsRow(string name, string value, string description) {
                ServerSettingsRow rowServerSettingsRow = ((ServerSettingsRow)(this.NewRow()));
                rowServerSettingsRow.ItemArray = new object[] {
                        name,
                        value,
                        description};
                this.Rows.Add(rowServerSettingsRow);
                return rowServerSettingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingsRow FindByname(string name) {
                return ((ServerSettingsRow)(this.Rows.Find(new object[] {
                            name})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerSettingsDataTable cln = ((ServerSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerSettingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnvalue = base.Columns["value"];
                this.columndescription = base.Columns["description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnvalue = new System.Data.DataColumn("value", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.MaxLength = 150;
                this.columnvalue.MaxLength = 2147483647;
                this.columndescription.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingsRow NewServerSettingsRow() {
                return ((ServerSettingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerSettingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerSettingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerSettingsRowChanged != null)) {
                    this.ServerSettingsRowChanged(this, new ServerSettingsRowChangeEvent(((ServerSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerSettingsRowChanging != null)) {
                    this.ServerSettingsRowChanging(this, new ServerSettingsRowChangeEvent(((ServerSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerSettingsRowDeleted != null)) {
                    this.ServerSettingsRowDeleted(this, new ServerSettingsRowChangeEvent(((ServerSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerSettingsRowDeleting != null)) {
                    this.ServerSettingsRowDeleting(this, new ServerSettingsRowChangeEvent(((ServerSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerSettingsRow(ServerSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnuserID;
            
            private System.Data.DataColumn columnuserfName;
            
            private System.Data.DataColumn columnuserlName;
            
            private System.Data.DataColumn columnuserValid;
            
            private System.Data.DataColumn columnuserEmail;
            
            private System.Data.DataColumn columnuserPhone;
            
            private System.Data.DataColumn columnuserDescription;
            
            private System.Data.DataColumn columnuserStage;
            
            private System.Data.DataColumn columnuserImage;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersDataTable() {
                this.TableName = "Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userIDColumn {
                get {
                    return this.columnuserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userfNameColumn {
                get {
                    return this.columnuserfName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userlNameColumn {
                get {
                    return this.columnuserlName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userValidColumn {
                get {
                    return this.columnuserValid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userEmailColumn {
                get {
                    return this.columnuserEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userPhoneColumn {
                get {
                    return this.columnuserPhone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userDescriptionColumn {
                get {
                    return this.columnuserDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userStageColumn {
                get {
                    return this.columnuserStage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userImageColumn {
                get {
                    return this.columnuserImage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow AddUsersRow(string userID, string userfName, string userlName, bool userValid, string userEmail, string userPhone, string userDescription, string userStage, byte[] userImage) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                rowUsersRow.ItemArray = new object[] {
                        userID,
                        userfName,
                        userlName,
                        userValid,
                        userEmail,
                        userPhone,
                        userDescription,
                        userStage,
                        userImage};
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow FindByuserID(string userID) {
                return ((UsersRow)(this.Rows.Find(new object[] {
                            userID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuserID = base.Columns["userID"];
                this.columnuserfName = base.Columns["userfName"];
                this.columnuserlName = base.Columns["userlName"];
                this.columnuserValid = base.Columns["userValid"];
                this.columnuserEmail = base.Columns["userEmail"];
                this.columnuserPhone = base.Columns["userPhone"];
                this.columnuserDescription = base.Columns["userDescription"];
                this.columnuserStage = base.Columns["userStage"];
                this.columnuserImage = base.Columns["userImage"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuserID = new System.Data.DataColumn("userID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserID);
                this.columnuserfName = new System.Data.DataColumn("userfName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserfName);
                this.columnuserlName = new System.Data.DataColumn("userlName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserlName);
                this.columnuserValid = new System.Data.DataColumn("userValid", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserValid);
                this.columnuserEmail = new System.Data.DataColumn("userEmail", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserEmail);
                this.columnuserPhone = new System.Data.DataColumn("userPhone", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserPhone);
                this.columnuserDescription = new System.Data.DataColumn("userDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserDescription);
                this.columnuserStage = new System.Data.DataColumn("userStage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserStage);
                this.columnuserImage = new System.Data.DataColumn("userImage", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserImage);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnuserID}, true));
                this.columnuserID.AllowDBNull = false;
                this.columnuserID.Unique = true;
                this.columnuserID.MaxLength = 50;
                this.columnuserfName.MaxLength = 150;
                this.columnuserlName.MaxLength = 150;
                this.columnuserEmail.MaxLength = 50;
                this.columnuserPhone.MaxLength = 2147483647;
                this.columnuserDescription.MaxLength = 150;
                this.columnuserStage.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Users_DoorsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnuserID;
            
            private System.Data.DataColumn columndoorNum;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_DoorsDataTable() {
                this.TableName = "Users_Doors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Users_DoorsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Users_DoorsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userIDColumn {
                get {
                    return this.columnuserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorNumColumn {
                get {
                    return this.columndoorNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_DoorsRow this[int index] {
                get {
                    return ((Users_DoorsRow)(this.Rows[index]));
                }
            }
            
            public event Users_DoorsRowChangeEventHandler Users_DoorsRowChanging;
            
            public event Users_DoorsRowChangeEventHandler Users_DoorsRowChanged;
            
            public event Users_DoorsRowChangeEventHandler Users_DoorsRowDeleting;
            
            public event Users_DoorsRowChangeEventHandler Users_DoorsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsers_DoorsRow(Users_DoorsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_DoorsRow AddUsers_DoorsRow(UsersRow parentUsersRowByFK_Users_Doors_Users, DoorsRow parentDoorsRowByFK_Users_Doors_Doors) {
                Users_DoorsRow rowUsers_DoorsRow = ((Users_DoorsRow)(this.NewRow()));
                rowUsers_DoorsRow.ItemArray = new object[] {
                        parentUsersRowByFK_Users_Doors_Users[0],
                        parentDoorsRowByFK_Users_Doors_Doors[0]};
                this.Rows.Add(rowUsers_DoorsRow);
                return rowUsers_DoorsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_DoorsRow FindByuserIDdoorNum(string userID, int doorNum) {
                return ((Users_DoorsRow)(this.Rows.Find(new object[] {
                            userID,
                            doorNum})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Users_DoorsDataTable cln = ((Users_DoorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Users_DoorsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuserID = base.Columns["userID"];
                this.columndoorNum = base.Columns["doorNum"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuserID = new System.Data.DataColumn("userID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserID);
                this.columndoorNum = new System.Data.DataColumn("doorNum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorNum);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnuserID,
                                this.columndoorNum}, true));
                this.columnuserID.AllowDBNull = false;
                this.columnuserID.MaxLength = 50;
                this.columndoorNum.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_DoorsRow NewUsers_DoorsRow() {
                return ((Users_DoorsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Users_DoorsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Users_DoorsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Users_DoorsRowChanged != null)) {
                    this.Users_DoorsRowChanged(this, new Users_DoorsRowChangeEvent(((Users_DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Users_DoorsRowChanging != null)) {
                    this.Users_DoorsRowChanging(this, new Users_DoorsRowChangeEvent(((Users_DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Users_DoorsRowDeleted != null)) {
                    this.Users_DoorsRowDeleted(this, new Users_DoorsRowChangeEvent(((Users_DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Users_DoorsRowDeleting != null)) {
                    this.Users_DoorsRowDeleting(this, new Users_DoorsRowChangeEvent(((Users_DoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsers_DoorsRow(Users_DoorsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Users_DoorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Users_GroupsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnuserID;
            
            private System.Data.DataColumn columnGroupNum;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_GroupsDataTable() {
                this.TableName = "Users_Groups";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Users_GroupsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Users_GroupsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userIDColumn {
                get {
                    return this.columnuserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GroupNumColumn {
                get {
                    return this.columnGroupNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_GroupsRow this[int index] {
                get {
                    return ((Users_GroupsRow)(this.Rows[index]));
                }
            }
            
            public event Users_GroupsRowChangeEventHandler Users_GroupsRowChanging;
            
            public event Users_GroupsRowChangeEventHandler Users_GroupsRowChanged;
            
            public event Users_GroupsRowChangeEventHandler Users_GroupsRowDeleting;
            
            public event Users_GroupsRowChangeEventHandler Users_GroupsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsers_GroupsRow(Users_GroupsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_GroupsRow AddUsers_GroupsRow(UsersRow parentUsersRowByFK_Users_Groups_Users, GroupsRow parentGroupsRowByFK_Users_Groups_Groups) {
                Users_GroupsRow rowUsers_GroupsRow = ((Users_GroupsRow)(this.NewRow()));
                rowUsers_GroupsRow.ItemArray = new object[] {
                        parentUsersRowByFK_Users_Groups_Users[0],
                        parentGroupsRowByFK_Users_Groups_Groups[0]};
                this.Rows.Add(rowUsers_GroupsRow);
                return rowUsers_GroupsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_GroupsRow FindByuserIDGroupNum(string userID, int GroupNum) {
                return ((Users_GroupsRow)(this.Rows.Find(new object[] {
                            userID,
                            GroupNum})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Users_GroupsDataTable cln = ((Users_GroupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Users_GroupsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuserID = base.Columns["userID"];
                this.columnGroupNum = base.Columns["GroupNum"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuserID = new System.Data.DataColumn("userID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserID);
                this.columnGroupNum = new System.Data.DataColumn("GroupNum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupNum);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnuserID,
                                this.columnGroupNum}, true));
                this.columnuserID.AllowDBNull = false;
                this.columnuserID.MaxLength = 50;
                this.columnGroupNum.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_GroupsRow NewUsers_GroupsRow() {
                return ((Users_GroupsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Users_GroupsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Users_GroupsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Users_GroupsRowChanged != null)) {
                    this.Users_GroupsRowChanged(this, new Users_GroupsRowChangeEvent(((Users_GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Users_GroupsRowChanging != null)) {
                    this.Users_GroupsRowChanging(this, new Users_GroupsRowChangeEvent(((Users_GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Users_GroupsRowDeleted != null)) {
                    this.Users_GroupsRowDeleted(this, new Users_GroupsRowChangeEvent(((Users_GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Users_GroupsRowDeleting != null)) {
                    this.Users_GroupsRowDeleting(this, new Users_GroupsRowChangeEvent(((Users_GroupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsers_GroupsRow(Users_GroupsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Users_GroupsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersINGroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnuserID;
            
            private System.Data.DataColumn columnuserfName;
            
            private System.Data.DataColumn columnuserlName;
            
            private System.Data.DataColumn columnuserEmail;
            
            private System.Data.DataColumn columnuserStage;
            
            private System.Data.DataColumn columnIncluded;
            
            private System.Data.DataColumn columnuserImage;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersINGroupDataTable() {
                this.TableName = "UsersINGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersINGroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersINGroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userIDColumn {
                get {
                    return this.columnuserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userfNameColumn {
                get {
                    return this.columnuserfName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userlNameColumn {
                get {
                    return this.columnuserlName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userEmailColumn {
                get {
                    return this.columnuserEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userStageColumn {
                get {
                    return this.columnuserStage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncludedColumn {
                get {
                    return this.columnIncluded;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userImageColumn {
                get {
                    return this.columnuserImage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersINGroupRow this[int index] {
                get {
                    return ((UsersINGroupRow)(this.Rows[index]));
                }
            }
            
            public event UsersINGroupRowChangeEventHandler UsersINGroupRowChanging;
            
            public event UsersINGroupRowChangeEventHandler UsersINGroupRowChanged;
            
            public event UsersINGroupRowChangeEventHandler UsersINGroupRowDeleting;
            
            public event UsersINGroupRowChangeEventHandler UsersINGroupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersINGroupRow(UsersINGroupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersINGroupRow AddUsersINGroupRow(string userID, string userfName, string userlName, string userEmail, string userStage, byte Included, byte[] userImage) {
                UsersINGroupRow rowUsersINGroupRow = ((UsersINGroupRow)(this.NewRow()));
                rowUsersINGroupRow.ItemArray = new object[] {
                        userID,
                        userfName,
                        userlName,
                        userEmail,
                        userStage,
                        Included,
                        userImage};
                this.Rows.Add(rowUsersINGroupRow);
                return rowUsersINGroupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersINGroupRow FindByuserID(string userID) {
                return ((UsersINGroupRow)(this.Rows.Find(new object[] {
                            userID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UsersINGroupDataTable cln = ((UsersINGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UsersINGroupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuserID = base.Columns["userID"];
                this.columnuserfName = base.Columns["userfName"];
                this.columnuserlName = base.Columns["userlName"];
                this.columnuserEmail = base.Columns["userEmail"];
                this.columnuserStage = base.Columns["userStage"];
                this.columnIncluded = base.Columns["Included"];
                this.columnuserImage = base.Columns["userImage"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuserID = new System.Data.DataColumn("userID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserID);
                this.columnuserfName = new System.Data.DataColumn("userfName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserfName);
                this.columnuserlName = new System.Data.DataColumn("userlName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserlName);
                this.columnuserEmail = new System.Data.DataColumn("userEmail", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserEmail);
                this.columnuserStage = new System.Data.DataColumn("userStage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserStage);
                this.columnIncluded = new System.Data.DataColumn("Included", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncluded);
                this.columnuserImage = new System.Data.DataColumn("userImage", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserImage);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnuserID}, true));
                this.columnuserID.AllowDBNull = false;
                this.columnuserID.Unique = true;
                this.columnuserID.MaxLength = 50;
                this.columnuserfName.MaxLength = 150;
                this.columnuserlName.MaxLength = 150;
                this.columnuserEmail.MaxLength = 50;
                this.columnuserStage.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersINGroupRow NewUsersINGroupRow() {
                return ((UsersINGroupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UsersINGroupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UsersINGroupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersINGroupRowChanged != null)) {
                    this.UsersINGroupRowChanged(this, new UsersINGroupRowChangeEvent(((UsersINGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersINGroupRowChanging != null)) {
                    this.UsersINGroupRowChanging(this, new UsersINGroupRowChangeEvent(((UsersINGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersINGroupRowDeleted != null)) {
                    this.UsersINGroupRowDeleted(this, new UsersINGroupRowChangeEvent(((UsersINGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersINGroupRowDeleting != null)) {
                    this.UsersINGroupRowDeleting(this, new UsersINGroupRowChangeEvent(((UsersINGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersINGroupRow(UsersINGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersINGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DoorsInGroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndoorNum;
            
            private System.Data.DataColumn columndoorName;
            
            private System.Data.DataColumn columndoorMAC;
            
            private System.Data.DataColumn columnIncluded;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsInGroupDataTable() {
                this.TableName = "DoorsInGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DoorsInGroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DoorsInGroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorNumColumn {
                get {
                    return this.columndoorNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorNameColumn {
                get {
                    return this.columndoorName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn doorMACColumn {
                get {
                    return this.columndoorMAC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncludedColumn {
                get {
                    return this.columnIncluded;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsInGroupRow this[int index] {
                get {
                    return ((DoorsInGroupRow)(this.Rows[index]));
                }
            }
            
            public event DoorsInGroupRowChangeEventHandler DoorsInGroupRowChanging;
            
            public event DoorsInGroupRowChangeEventHandler DoorsInGroupRowChanged;
            
            public event DoorsInGroupRowChangeEventHandler DoorsInGroupRowDeleting;
            
            public event DoorsInGroupRowChangeEventHandler DoorsInGroupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDoorsInGroupRow(DoorsInGroupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsInGroupRow AddDoorsInGroupRow(int doorNum, string doorName, string doorMAC, int Included) {
                DoorsInGroupRow rowDoorsInGroupRow = ((DoorsInGroupRow)(this.NewRow()));
                rowDoorsInGroupRow.ItemArray = new object[] {
                        doorNum,
                        doorName,
                        doorMAC,
                        Included};
                this.Rows.Add(rowDoorsInGroupRow);
                return rowDoorsInGroupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsInGroupRow FindBydoorNum(int doorNum) {
                return ((DoorsInGroupRow)(this.Rows.Find(new object[] {
                            doorNum})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DoorsInGroupDataTable cln = ((DoorsInGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DoorsInGroupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndoorNum = base.Columns["doorNum"];
                this.columndoorName = base.Columns["doorName"];
                this.columndoorMAC = base.Columns["doorMAC"];
                this.columnIncluded = base.Columns["Included"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndoorNum = new System.Data.DataColumn("doorNum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorNum);
                this.columndoorName = new System.Data.DataColumn("doorName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorName);
                this.columndoorMAC = new System.Data.DataColumn("doorMAC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndoorMAC);
                this.columnIncluded = new System.Data.DataColumn("Included", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncluded);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columndoorNum}, true));
                this.columndoorNum.AllowDBNull = false;
                this.columndoorNum.Unique = true;
                this.columndoorName.MaxLength = 100;
                this.columndoorMAC.MaxLength = 60;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsInGroupRow NewDoorsInGroupRow() {
                return ((DoorsInGroupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DoorsInGroupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DoorsInGroupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DoorsInGroupRowChanged != null)) {
                    this.DoorsInGroupRowChanged(this, new DoorsInGroupRowChangeEvent(((DoorsInGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DoorsInGroupRowChanging != null)) {
                    this.DoorsInGroupRowChanging(this, new DoorsInGroupRowChangeEvent(((DoorsInGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DoorsInGroupRowDeleted != null)) {
                    this.DoorsInGroupRowDeleted(this, new DoorsInGroupRowChangeEvent(((DoorsInGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DoorsInGroupRowDeleting != null)) {
                    this.DoorsInGroupRowDeleting(this, new DoorsInGroupRowChangeEvent(((DoorsInGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDoorsInGroupRow(DoorsInGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DoorsInGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersInDoorsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnuserID;
            
            private System.Data.DataColumn columnUser_Name;
            
            private System.Data.DataColumn columnValid;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersInDoorsDataTable() {
                this.TableName = "UsersInDoors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersInDoorsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersInDoorsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userIDColumn {
                get {
                    return this.columnuserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn User_NameColumn {
                get {
                    return this.columnUser_Name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValidColumn {
                get {
                    return this.columnValid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersInDoorsRow this[int index] {
                get {
                    return ((UsersInDoorsRow)(this.Rows[index]));
                }
            }
            
            public event UsersInDoorsRowChangeEventHandler UsersInDoorsRowChanging;
            
            public event UsersInDoorsRowChangeEventHandler UsersInDoorsRowChanged;
            
            public event UsersInDoorsRowChangeEventHandler UsersInDoorsRowDeleting;
            
            public event UsersInDoorsRowChangeEventHandler UsersInDoorsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersInDoorsRow(UsersInDoorsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersInDoorsRow AddUsersInDoorsRow(string userID, string User_Name, int Valid) {
                UsersInDoorsRow rowUsersInDoorsRow = ((UsersInDoorsRow)(this.NewRow()));
                rowUsersInDoorsRow.ItemArray = new object[] {
                        userID,
                        User_Name,
                        Valid};
                this.Rows.Add(rowUsersInDoorsRow);
                return rowUsersInDoorsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersInDoorsRow FindByuserID(string userID) {
                return ((UsersInDoorsRow)(this.Rows.Find(new object[] {
                            userID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UsersInDoorsDataTable cln = ((UsersInDoorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UsersInDoorsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuserID = base.Columns["userID"];
                this.columnUser_Name = base.Columns["User Name"];
                this.columnValid = base.Columns["Valid"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuserID = new System.Data.DataColumn("userID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserID);
                this.columnUser_Name = new System.Data.DataColumn("User Name", typeof(string), null, System.Data.MappingType.Element);
                this.columnUser_Name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "User_Name");
                this.columnUser_Name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "User_NameColumn");
                this.columnUser_Name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUser_Name");
                this.columnUser_Name.ExtendedProperties.Add("Generator_UserColumnName", "User Name");
                base.Columns.Add(this.columnUser_Name);
                this.columnValid = new System.Data.DataColumn("Valid", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValid);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnuserID}, true));
                this.columnuserID.AllowDBNull = false;
                this.columnuserID.Unique = true;
                this.columnuserID.MaxLength = 50;
                this.columnUser_Name.ReadOnly = true;
                this.columnUser_Name.MaxLength = 301;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersInDoorsRow NewUsersInDoorsRow() {
                return ((UsersInDoorsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UsersInDoorsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UsersInDoorsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersInDoorsRowChanged != null)) {
                    this.UsersInDoorsRowChanged(this, new UsersInDoorsRowChangeEvent(((UsersInDoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersInDoorsRowChanging != null)) {
                    this.UsersInDoorsRowChanging(this, new UsersInDoorsRowChangeEvent(((UsersInDoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersInDoorsRowDeleted != null)) {
                    this.UsersInDoorsRowDeleted(this, new UsersInDoorsRowChangeEvent(((UsersInDoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersInDoorsRowDeleting != null)) {
                    this.UsersInDoorsRowDeleting(this, new UsersInDoorsRowChangeEvent(((UsersInDoorsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersInDoorsRow(UsersInDoorsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersInDoorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GroupsInDoorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columngroupNum;
            
            private System.Data.DataColumn columngroupName;
            
            private System.Data.DataColumn columnIncluded;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsInDoorDataTable() {
                this.TableName = "GroupsInDoor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupsInDoorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GroupsInDoorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn groupNumColumn {
                get {
                    return this.columngroupNum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn groupNameColumn {
                get {
                    return this.columngroupName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncludedColumn {
                get {
                    return this.columnIncluded;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsInDoorRow this[int index] {
                get {
                    return ((GroupsInDoorRow)(this.Rows[index]));
                }
            }
            
            public event GroupsInDoorRowChangeEventHandler GroupsInDoorRowChanging;
            
            public event GroupsInDoorRowChangeEventHandler GroupsInDoorRowChanged;
            
            public event GroupsInDoorRowChangeEventHandler GroupsInDoorRowDeleting;
            
            public event GroupsInDoorRowChangeEventHandler GroupsInDoorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGroupsInDoorRow(GroupsInDoorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsInDoorRow AddGroupsInDoorRow(int groupNum, string groupName, int Included) {
                GroupsInDoorRow rowGroupsInDoorRow = ((GroupsInDoorRow)(this.NewRow()));
                rowGroupsInDoorRow.ItemArray = new object[] {
                        groupNum,
                        groupName,
                        Included};
                this.Rows.Add(rowGroupsInDoorRow);
                return rowGroupsInDoorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsInDoorRow FindBygroupNum(int groupNum) {
                return ((GroupsInDoorRow)(this.Rows.Find(new object[] {
                            groupNum})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GroupsInDoorDataTable cln = ((GroupsInDoorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GroupsInDoorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columngroupNum = base.Columns["groupNum"];
                this.columngroupName = base.Columns["groupName"];
                this.columnIncluded = base.Columns["Included"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columngroupNum = new System.Data.DataColumn("groupNum", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngroupNum);
                this.columngroupName = new System.Data.DataColumn("groupName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columngroupName);
                this.columnIncluded = new System.Data.DataColumn("Included", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncluded);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columngroupNum}, true));
                this.columngroupNum.AllowDBNull = false;
                this.columngroupNum.Unique = true;
                this.columngroupName.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsInDoorRow NewGroupsInDoorRow() {
                return ((GroupsInDoorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GroupsInDoorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GroupsInDoorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GroupsInDoorRowChanged != null)) {
                    this.GroupsInDoorRowChanged(this, new GroupsInDoorRowChangeEvent(((GroupsInDoorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GroupsInDoorRowChanging != null)) {
                    this.GroupsInDoorRowChanging(this, new GroupsInDoorRowChangeEvent(((GroupsInDoorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GroupsInDoorRowDeleted != null)) {
                    this.GroupsInDoorRowDeleted(this, new GroupsInDoorRowChangeEvent(((GroupsInDoorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GroupsInDoorRowDeleting != null)) {
                    this.GroupsInDoorRowDeleting(this, new GroupsInDoorRowChangeEvent(((GroupsInDoorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGroupsInDoorRow(GroupsInDoorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDASDBDataSet ds = new SDASDBDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GroupsInDoorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AdminUsersRow : System.Data.DataRow {
            
            private AdminUsersDataTable tableAdminUsers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AdminUsersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAdminUsers = ((AdminUsersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableAdminUsers.NameColumn]));
                }
                set {
                    this[this.tableAdminUsers.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableAdminUsers.PasswordColumn]));
                }
                set {
                    this[this.tableAdminUsers.PasswordColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DoorsRow : System.Data.DataRow {
            
            private DoorsDataTable tableDoors;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DoorsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDoors = ((DoorsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int doorNum {
                get {
                    return ((int)(this[this.tableDoors.doorNumColumn]));
                }
                set {
                    this[this.tableDoors.doorNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string doorName {
                get {
                    try {
                        return ((string)(this[this.tableDoors.doorNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'doorName\' in table \'Doors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoors.doorNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime doorLastLogRecieved {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDoors.doorLastLogRecievedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'doorLastLogRecieved\' in table \'Doors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoors.doorLastLogRecievedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime doorLastListUpdate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDoors.doorLastListUpdateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'doorLastListUpdate\' in table \'Doors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoors.doorLastListUpdateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string doorIP {
                get {
                    try {
                        return ((string)(this[this.tableDoors.doorIPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'doorIP\' in table \'Doors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoors.doorIPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string doorPassword {
                get {
                    try {
                        return ((string)(this[this.tableDoors.doorPasswordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'doorPassword\' in table \'Doors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoors.doorPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string doorMAC {
                get {
                    try {
                        return ((string)(this[this.tableDoors.doorMACColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'doorMAC\' in table \'Doors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoors.doorMACColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoorNameNull() {
                return this.IsNull(this.tableDoors.doorNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoorNameNull() {
                this[this.tableDoors.doorNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoorLastLogRecievedNull() {
                return this.IsNull(this.tableDoors.doorLastLogRecievedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoorLastLogRecievedNull() {
                this[this.tableDoors.doorLastLogRecievedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoorLastListUpdateNull() {
                return this.IsNull(this.tableDoors.doorLastListUpdateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoorLastListUpdateNull() {
                this[this.tableDoors.doorLastListUpdateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoorIPNull() {
                return this.IsNull(this.tableDoors.doorIPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoorIPNull() {
                this[this.tableDoors.doorIPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoorPasswordNull() {
                return this.IsNull(this.tableDoors.doorPasswordColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoorPasswordNull() {
                this[this.tableDoors.doorPasswordColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoorMACNull() {
                return this.IsNull(this.tableDoors.doorMACColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoorMACNull() {
                this[this.tableDoors.doorMACColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Groups_DoorsRow[] GetGroups_DoorsRows() {
                return ((Groups_DoorsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Groups_Doors_Doors"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogsRow[] GetLogsRows() {
                return ((LogsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Logs_Doors"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_DoorsRow[] GetUsers_DoorsRows() {
                return ((Users_DoorsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Users_Doors_Doors"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GroupsRow : System.Data.DataRow {
            
            private GroupsDataTable tableGroups;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroups = ((GroupsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int groupNum {
                get {
                    return ((int)(this[this.tableGroups.groupNumColumn]));
                }
                set {
                    this[this.tableGroups.groupNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string groupName {
                get {
                    try {
                        return ((string)(this[this.tableGroups.groupNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'groupName\' in table \'Groups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroups.groupNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroupNameNull() {
                return this.IsNull(this.tableGroups.groupNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroupNameNull() {
                this[this.tableGroups.groupNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Groups_DoorsRow[] GetGroups_DoorsRows() {
                return ((Groups_DoorsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Groups_Doors_Groups"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_GroupsRow[] GetUsers_GroupsRows() {
                return ((Users_GroupsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Users_Groups_Groups"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Groups_DoorsRow : System.Data.DataRow {
            
            private Groups_DoorsDataTable tableGroups_Doors;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Groups_DoorsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroups_Doors = ((Groups_DoorsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int groupNum {
                get {
                    return ((int)(this[this.tableGroups_Doors.groupNumColumn]));
                }
                set {
                    this[this.tableGroups_Doors.groupNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int doorNum {
                get {
                    return ((int)(this[this.tableGroups_Doors.doorNumColumn]));
                }
                set {
                    this[this.tableGroups_Doors.doorNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsRow DoorsRow {
                get {
                    return ((DoorsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Groups_Doors_Doors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Groups_Doors_Doors"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow GroupsRow {
                get {
                    return ((GroupsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Groups_Doors_Groups"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Groups_Doors_Groups"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LogsRow : System.Data.DataRow {
            
            private LogsDataTable tableLogs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LogsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLogs = ((LogsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Enter_time {
                get {
                    return ((System.DateTime)(this[this.tableLogs.Enter_timeColumn]));
                }
                set {
                    this[this.tableLogs.Enter_timeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableLogs.IDColumn]));
                }
                set {
                    this[this.tableLogs.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int doorNumber {
                get {
                    return ((int)(this[this.tableLogs.doorNumberColumn]));
                }
                set {
                    this[this.tableLogs.doorNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool allowed {
                get {
                    return ((bool)(this[this.tableLogs.allowedColumn]));
                }
                set {
                    this[this.tableLogs.allowedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string doorName {
                get {
                    try {
                        return ((string)(this[this.tableLogs.doorNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'doorName\' in table \'Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogs.doorNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string User_Name {
                get {
                    try {
                        return ((string)(this[this.tableLogs.User_NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'User Name\' in table \'Logs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLogs.User_NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableLogs.StatusColumn]));
                }
                set {
                    this[this.tableLogs.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsRow DoorsRow {
                get {
                    return ((DoorsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Logs_Doors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Logs_Doors"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Logs_Users"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Logs_Users"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoorNameNull() {
                return this.IsNull(this.tableLogs.doorNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoorNameNull() {
                this[this.tableLogs.doorNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUser_NameNull() {
                return this.IsNull(this.tableLogs.User_NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUser_NameNull() {
                this[this.tableLogs.User_NameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerSettingsRow : System.Data.DataRow {
            
            private ServerSettingsDataTable tableServerSettings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerSettingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerSettings = ((ServerSettingsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableServerSettings.nameColumn]));
                }
                set {
                    this[this.tableServerSettings.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string value {
                get {
                    try {
                        return ((string)(this[this.tableServerSettings.valueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'value\' in table \'ServerSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerSettings.valueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableServerSettings.descriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'description\' in table \'ServerSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerSettings.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tableServerSettings.valueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tableServerSettings.valueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableServerSettings.descriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableServerSettings.descriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersRow : System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userID {
                get {
                    return ((string)(this[this.tableUsers.userIDColumn]));
                }
                set {
                    this[this.tableUsers.userIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userfName {
                get {
                    if (this.IsuserfNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.userfNameColumn]));
                    }
                }
                set {
                    this[this.tableUsers.userfNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userlName {
                get {
                    if (this.IsuserlNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.userlNameColumn]));
                    }
                }
                set {
                    this[this.tableUsers.userlNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool userValid {
                get {
                    try {
                        return ((bool)(this[this.tableUsers.userValidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userValid\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userValidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userEmail {
                get {
                    if (this.IsuserEmailNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.userEmailColumn]));
                    }
                }
                set {
                    this[this.tableUsers.userEmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userPhone {
                get {
                    if (this.IsuserPhoneNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.userPhoneColumn]));
                    }
                }
                set {
                    this[this.tableUsers.userPhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userDescription {
                get {
                    if (this.IsuserDescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUsers.userDescriptionColumn]));
                    }
                }
                set {
                    this[this.tableUsers.userDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userStage {
                get {
                    try {
                        return ((string)(this[this.tableUsers.userStageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userStage\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userStageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] userImage {
                get {
                    try {
                        return ((byte[])(this[this.tableUsers.userImageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userImage\' in table \'Users\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsers.userImageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserfNameNull() {
                return this.IsNull(this.tableUsers.userfNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserfNameNull() {
                this[this.tableUsers.userfNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserlNameNull() {
                return this.IsNull(this.tableUsers.userlNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserlNameNull() {
                this[this.tableUsers.userlNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserValidNull() {
                return this.IsNull(this.tableUsers.userValidColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserValidNull() {
                this[this.tableUsers.userValidColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserEmailNull() {
                return this.IsNull(this.tableUsers.userEmailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserEmailNull() {
                this[this.tableUsers.userEmailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserPhoneNull() {
                return this.IsNull(this.tableUsers.userPhoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserPhoneNull() {
                this[this.tableUsers.userPhoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserDescriptionNull() {
                return this.IsNull(this.tableUsers.userDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserDescriptionNull() {
                this[this.tableUsers.userDescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserStageNull() {
                return this.IsNull(this.tableUsers.userStageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserStageNull() {
                this[this.tableUsers.userStageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserImageNull() {
                return this.IsNull(this.tableUsers.userImageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserImageNull() {
                this[this.tableUsers.userImageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogsRow[] GetLogsRows() {
                return ((LogsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Logs_Users"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_DoorsRow[] GetUsers_DoorsRows() {
                return ((Users_DoorsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Users_Doors_Users"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_GroupsRow[] GetUsers_GroupsRows() {
                return ((Users_GroupsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Users_Groups_Users"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Users_DoorsRow : System.Data.DataRow {
            
            private Users_DoorsDataTable tableUsers_Doors;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Users_DoorsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers_Doors = ((Users_DoorsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userID {
                get {
                    return ((string)(this[this.tableUsers_Doors.userIDColumn]));
                }
                set {
                    this[this.tableUsers_Doors.userIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int doorNum {
                get {
                    return ((int)(this[this.tableUsers_Doors.doorNumColumn]));
                }
                set {
                    this[this.tableUsers_Doors.doorNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsRow DoorsRow {
                get {
                    return ((DoorsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Users_Doors_Doors"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Users_Doors_Doors"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Users_Doors_Users"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Users_Doors_Users"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Users_GroupsRow : System.Data.DataRow {
            
            private Users_GroupsDataTable tableUsers_Groups;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Users_GroupsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers_Groups = ((Users_GroupsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userID {
                get {
                    return ((string)(this[this.tableUsers_Groups.userIDColumn]));
                }
                set {
                    this[this.tableUsers_Groups.userIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupNum {
                get {
                    return ((int)(this[this.tableUsers_Groups.GroupNumColumn]));
                }
                set {
                    this[this.tableUsers_Groups.GroupNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow GroupsRow {
                get {
                    return ((GroupsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Users_Groups_Groups"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Users_Groups_Groups"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Users_Groups_Users"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Users_Groups_Users"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersINGroupRow : System.Data.DataRow {
            
            private UsersINGroupDataTable tableUsersINGroup;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersINGroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsersINGroup = ((UsersINGroupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userID {
                get {
                    return ((string)(this[this.tableUsersINGroup.userIDColumn]));
                }
                set {
                    this[this.tableUsersINGroup.userIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userfName {
                get {
                    try {
                        return ((string)(this[this.tableUsersINGroup.userfNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userfName\' in table \'UsersINGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsersINGroup.userfNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userlName {
                get {
                    try {
                        return ((string)(this[this.tableUsersINGroup.userlNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userlName\' in table \'UsersINGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsersINGroup.userlNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userEmail {
                get {
                    try {
                        return ((string)(this[this.tableUsersINGroup.userEmailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userEmail\' in table \'UsersINGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsersINGroup.userEmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userStage {
                get {
                    try {
                        return ((string)(this[this.tableUsersINGroup.userStageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userStage\' in table \'UsersINGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsersINGroup.userStageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Included {
                get {
                    try {
                        return ((byte)(this[this.tableUsersINGroup.IncludedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Included\' in table \'UsersINGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsersINGroup.IncludedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] userImage {
                get {
                    try {
                        return ((byte[])(this[this.tableUsersINGroup.userImageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userImage\' in table \'UsersINGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsersINGroup.userImageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserfNameNull() {
                return this.IsNull(this.tableUsersINGroup.userfNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserfNameNull() {
                this[this.tableUsersINGroup.userfNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserlNameNull() {
                return this.IsNull(this.tableUsersINGroup.userlNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserlNameNull() {
                this[this.tableUsersINGroup.userlNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserEmailNull() {
                return this.IsNull(this.tableUsersINGroup.userEmailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserEmailNull() {
                this[this.tableUsersINGroup.userEmailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserStageNull() {
                return this.IsNull(this.tableUsersINGroup.userStageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserStageNull() {
                this[this.tableUsersINGroup.userStageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncludedNull() {
                return this.IsNull(this.tableUsersINGroup.IncludedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncludedNull() {
                this[this.tableUsersINGroup.IncludedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserImageNull() {
                return this.IsNull(this.tableUsersINGroup.userImageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserImageNull() {
                this[this.tableUsersINGroup.userImageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DoorsInGroupRow : System.Data.DataRow {
            
            private DoorsInGroupDataTable tableDoorsInGroup;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DoorsInGroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDoorsInGroup = ((DoorsInGroupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int doorNum {
                get {
                    return ((int)(this[this.tableDoorsInGroup.doorNumColumn]));
                }
                set {
                    this[this.tableDoorsInGroup.doorNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string doorName {
                get {
                    try {
                        return ((string)(this[this.tableDoorsInGroup.doorNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'doorName\' in table \'DoorsInGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoorsInGroup.doorNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string doorMAC {
                get {
                    try {
                        return ((string)(this[this.tableDoorsInGroup.doorMACColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'doorMAC\' in table \'DoorsInGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoorsInGroup.doorMACColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Included {
                get {
                    try {
                        return ((int)(this[this.tableDoorsInGroup.IncludedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Included\' in table \'DoorsInGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDoorsInGroup.IncludedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoorNameNull() {
                return this.IsNull(this.tableDoorsInGroup.doorNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoorNameNull() {
                this[this.tableDoorsInGroup.doorNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoorMACNull() {
                return this.IsNull(this.tableDoorsInGroup.doorMACColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoorMACNull() {
                this[this.tableDoorsInGroup.doorMACColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncludedNull() {
                return this.IsNull(this.tableDoorsInGroup.IncludedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncludedNull() {
                this[this.tableDoorsInGroup.IncludedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersInDoorsRow : System.Data.DataRow {
            
            private UsersInDoorsDataTable tableUsersInDoors;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersInDoorsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsersInDoors = ((UsersInDoorsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userID {
                get {
                    return ((string)(this[this.tableUsersInDoors.userIDColumn]));
                }
                set {
                    this[this.tableUsersInDoors.userIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string User_Name {
                get {
                    try {
                        return ((string)(this[this.tableUsersInDoors.User_NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'User Name\' in table \'UsersInDoors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsersInDoors.User_NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Valid {
                get {
                    try {
                        return ((int)(this[this.tableUsersInDoors.ValidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Valid\' in table \'UsersInDoors\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUsersInDoors.ValidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUser_NameNull() {
                return this.IsNull(this.tableUsersInDoors.User_NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUser_NameNull() {
                this[this.tableUsersInDoors.User_NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidNull() {
                return this.IsNull(this.tableUsersInDoors.ValidColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidNull() {
                this[this.tableUsersInDoors.ValidColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GroupsInDoorRow : System.Data.DataRow {
            
            private GroupsInDoorDataTable tableGroupsInDoor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GroupsInDoorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGroupsInDoor = ((GroupsInDoorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int groupNum {
                get {
                    return ((int)(this[this.tableGroupsInDoor.groupNumColumn]));
                }
                set {
                    this[this.tableGroupsInDoor.groupNumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string groupName {
                get {
                    try {
                        return ((string)(this[this.tableGroupsInDoor.groupNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'groupName\' in table \'GroupsInDoor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroupsInDoor.groupNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Included {
                get {
                    try {
                        return ((int)(this[this.tableGroupsInDoor.IncludedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Included\' in table \'GroupsInDoor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGroupsInDoor.IncludedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroupNameNull() {
                return this.IsNull(this.tableGroupsInDoor.groupNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroupNameNull() {
                this[this.tableGroupsInDoor.groupNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncludedNull() {
                return this.IsNull(this.tableGroupsInDoor.IncludedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncludedNull() {
                this[this.tableGroupsInDoor.IncludedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AdminUsersRowChangeEvent : System.EventArgs {
            
            private AdminUsersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminUsersRowChangeEvent(AdminUsersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AdminUsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DoorsRowChangeEvent : System.EventArgs {
            
            private DoorsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsRowChangeEvent(DoorsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GroupsRowChangeEvent : System.EventArgs {
            
            private GroupsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRowChangeEvent(GroupsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Groups_DoorsRowChangeEvent : System.EventArgs {
            
            private Groups_DoorsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Groups_DoorsRowChangeEvent(Groups_DoorsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Groups_DoorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LogsRowChangeEvent : System.EventArgs {
            
            private LogsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogsRowChangeEvent(LogsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LogsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerSettingsRowChangeEvent : System.EventArgs {
            
            private ServerSettingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingsRowChangeEvent(ServerSettingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersRowChangeEvent : System.EventArgs {
            
            private UsersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRowChangeEvent(UsersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Users_DoorsRowChangeEvent : System.EventArgs {
            
            private Users_DoorsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_DoorsRowChangeEvent(Users_DoorsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_DoorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Users_GroupsRowChangeEvent : System.EventArgs {
            
            private Users_GroupsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_GroupsRowChangeEvent(Users_GroupsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Users_GroupsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersINGroupRowChangeEvent : System.EventArgs {
            
            private UsersINGroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersINGroupRowChangeEvent(UsersINGroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersINGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DoorsInGroupRowChangeEvent : System.EventArgs {
            
            private DoorsInGroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsInGroupRowChangeEvent(DoorsInGroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DoorsInGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersInDoorsRowChangeEvent : System.EventArgs {
            
            private UsersInDoorsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersInDoorsRowChangeEvent(UsersInDoorsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersInDoorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GroupsInDoorRowChangeEvent : System.EventArgs {
            
            private GroupsInDoorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsInDoorRowChangeEvent(GroupsInDoorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GroupsInDoorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RDB_test.myData.SDASDBDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AdminUsersTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AdminUsersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AdminUsers";
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Password", "Password");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AdminUsers] WHERE (([Name] = @Original_Name) AND ([Password] =" +
                " @Original_Password))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AdminUsers] ([Name], [Password]) VALUES (@Name, @Password);\r\nS" +
                "ELECT Name, Password FROM AdminUsers WHERE (Name = @Name) AND (Password = @Passw" +
                "ord)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AdminUsers] SET [Name] = @Name, [Password] = @Password WHERE (([Nam" +
                "e] = @Original_Name) AND ([Password] = @Original_Password));\r\nSELECT Name, Passw" +
                "ord FROM AdminUsers WHERE (Name = @Name) AND (Password = @Password)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RDB_test.Properties.Settings.Default.SDASDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Name, Password FROM dbo.AdminUsers";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SDASDBDataSet.AdminUsersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SDASDBDataSet.AdminUsersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SDASDBDataSet.AdminUsersDataTable dataTable = new SDASDBDataSet.AdminUsersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet.AdminUsersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "AdminUsers");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_Name, string Original_Password) {
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Name));
            }
            if ((Original_Password == null)) {
                throw new System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string Password) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string Password, string Original_Name, string Original_Password) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Password));
            }
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_Name));
            }
            if ((Original_Password == null)) {
                throw new System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Password));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DoorsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DoorsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Doors";
            tableMapping.ColumnMappings.Add("doorNum", "doorNum");
            tableMapping.ColumnMappings.Add("doorName", "doorName");
            tableMapping.ColumnMappings.Add("doorLastLogRecieved", "doorLastLogRecieved");
            tableMapping.ColumnMappings.Add("doorLastListUpdate", "doorLastListUpdate");
            tableMapping.ColumnMappings.Add("doorIP", "doorIP");
            tableMapping.ColumnMappings.Add("doorPassword", "doorPassword");
            tableMapping.ColumnMappings.Add("doorMAC", "doorMAC");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Doors] WHERE (([doorNum] = @Original_doorNum) AND ((@IsNull_doorName = 1 AND [doorName] IS NULL) OR ([doorName] = @Original_doorName)) AND ((@IsNull_doorLastLogRecieved = 1 AND [doorLastLogRecieved] IS NULL) OR ([doorLastLogRecieved] = @Original_doorLastLogRecieved)) AND ((@IsNull_doorLastListUpdate = 1 AND [doorLastListUpdate] IS NULL) OR ([doorLastListUpdate] = @Original_doorLastListUpdate)) AND ((@IsNull_doorIP = 1 AND [doorIP] IS NULL) OR ([doorIP] = @Original_doorIP)) AND ((@IsNull_doorPassword = 1 AND [doorPassword] IS NULL) OR ([doorPassword] = @Original_doorPassword)) AND ((@IsNull_doorMAC = 1 AND [doorMAC] IS NULL) OR ([doorMAC] = @Original_doorMAC)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorLastLogRecieved", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastLogRecieved", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorLastLogRecieved", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastLogRecieved", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorLastListUpdate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastListUpdate", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorLastListUpdate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastListUpdate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorIP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorIP", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorIP", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorIP", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorPassword", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorPassword", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorPassword", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorPassword", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorMAC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorMAC", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorMAC", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorMAC", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Doors] ([doorNum], [doorName], [doorLastLogRecieved], [doorLastListUpdate], [doorIP], [doorPassword], [doorMAC]) VALUES (@doorNum, @doorName, @doorLastLogRecieved, @doorLastListUpdate, @doorIP, @doorPassword, @doorMAC);
SELECT doorNum, doorName, doorLastLogRecieved, doorLastListUpdate, doorIP, doorPassword, doorMAC FROM Doors WHERE (doorNum = @doorNum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorLastLogRecieved", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastLogRecieved", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorLastListUpdate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastListUpdate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorIP", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorIP", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorPassword", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorPassword", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorMAC", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorMAC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Doors] SET [doorNum] = @doorNum, [doorName] = @doorName, [doorLastLogRecieved] = @doorLastLogRecieved, [doorLastListUpdate] = @doorLastListUpdate, [doorIP] = @doorIP, [doorPassword] = @doorPassword, [doorMAC] = @doorMAC WHERE (([doorNum] = @Original_doorNum) AND ((@IsNull_doorName = 1 AND [doorName] IS NULL) OR ([doorName] = @Original_doorName)) AND ((@IsNull_doorLastLogRecieved = 1 AND [doorLastLogRecieved] IS NULL) OR ([doorLastLogRecieved] = @Original_doorLastLogRecieved)) AND ((@IsNull_doorLastListUpdate = 1 AND [doorLastListUpdate] IS NULL) OR ([doorLastListUpdate] = @Original_doorLastListUpdate)) AND ((@IsNull_doorIP = 1 AND [doorIP] IS NULL) OR ([doorIP] = @Original_doorIP)) AND ((@IsNull_doorPassword = 1 AND [doorPassword] IS NULL) OR ([doorPassword] = @Original_doorPassword)) AND ((@IsNull_doorMAC = 1 AND [doorMAC] IS NULL) OR ([doorMAC] = @Original_doorMAC)));
SELECT doorNum, doorName, doorLastLogRecieved, doorLastListUpdate, doorIP, doorPassword, doorMAC FROM Doors WHERE (doorNum = @doorNum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorLastLogRecieved", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastLogRecieved", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorLastListUpdate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastListUpdate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorIP", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorIP", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorPassword", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorPassword", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorMAC", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorMAC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorName", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorLastLogRecieved", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastLogRecieved", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorLastLogRecieved", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastLogRecieved", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorLastListUpdate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastListUpdate", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorLastListUpdate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "doorLastListUpdate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorIP", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorIP", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorIP", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorIP", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorPassword", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorPassword", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorPassword", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorPassword", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_doorMAC", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorMAC", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorMAC", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "doorMAC", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RDB_test.Properties.Settings.Default.SDASDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT doorNum, doorName, doorLastLogRecieved, doorLastListUpdate, doorIP, doorPa" +
                "ssword, doorMAC FROM dbo.Doors";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT doorNum, doorName, doorLastLogRecieved, doorLastListUpdate, doorIP, doorPa" +
                "ssword, doorMAC FROM dbo.Doors\r\nwhere doorNum=@param";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@param", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SDASDBDataSet.DoorsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SDASDBDataSet.DoorsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SDASDBDataSet.DoorsDataTable dataTable = new SDASDBDataSet.DoorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(SDASDBDataSet.DoorsDataTable dataTable, int param) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(param));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SDASDBDataSet.DoorsDataTable GetDataBy(int param) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(param));
            SDASDBDataSet.DoorsDataTable dataTable = new SDASDBDataSet.DoorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet.DoorsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Doors");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_doorNum, string Original_doorName, System.Nullable<System.DateTime> Original_doorLastLogRecieved, System.Nullable<System.DateTime> Original_doorLastListUpdate, string Original_doorIP, string Original_doorPassword, string Original_doorMAC) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_doorNum));
            if ((Original_doorName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_doorName));
            }
            if ((Original_doorLastLogRecieved.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_doorLastLogRecieved.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_doorLastListUpdate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_doorLastListUpdate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_doorIP == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_doorIP));
            }
            if ((Original_doorPassword == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_doorPassword));
            }
            if ((Original_doorMAC == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_doorMAC));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int doorNum, string doorName, System.Nullable<System.DateTime> doorLastLogRecieved, System.Nullable<System.DateTime> doorLastListUpdate, string doorIP, string doorPassword, string doorMAC) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(doorNum));
            if ((doorName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(doorName));
            }
            if ((doorLastLogRecieved.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(doorLastLogRecieved.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((doorLastListUpdate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(doorLastListUpdate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((doorIP == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(doorIP));
            }
            if ((doorPassword == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(doorPassword));
            }
            if ((doorMAC == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(doorMAC));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int doorNum, string doorName, System.Nullable<System.DateTime> doorLastLogRecieved, System.Nullable<System.DateTime> doorLastListUpdate, string doorIP, string doorPassword, string doorMAC, int Original_doorNum, string Original_doorName, System.Nullable<System.DateTime> Original_doorLastLogRecieved, System.Nullable<System.DateTime> Original_doorLastListUpdate, string Original_doorIP, string Original_doorPassword, string Original_doorMAC) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(doorNum));
            if ((doorName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(doorName));
            }
            if ((doorLastLogRecieved.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(doorLastLogRecieved.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((doorLastListUpdate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(doorLastListUpdate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((doorIP == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(doorIP));
            }
            if ((doorPassword == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(doorPassword));
            }
            if ((doorMAC == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(doorMAC));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_doorNum));
            if ((Original_doorName == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_doorName));
            }
            if ((Original_doorLastLogRecieved.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_doorLastLogRecieved.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Original_doorLastListUpdate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_doorLastListUpdate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((Original_doorIP == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_doorIP));
            }
            if ((Original_doorPassword == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_doorPassword));
            }
            if ((Original_doorMAC == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_doorMAC));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GroupsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GroupsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Groups";
            tableMapping.ColumnMappings.Add("groupNum", "groupNum");
            tableMapping.ColumnMappings.Add("groupName", "groupName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Groups] WHERE (([groupNum] = @Original_groupNum) AND ((@IsNull" +
                "_groupName = 1 AND [groupName] IS NULL) OR ([groupName] = @Original_groupName)))" +
                "";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_groupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_groupName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "groupName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_groupName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "groupName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Groups] ([groupNum], [groupName]) VALUES (@groupNum, @groupNam" +
                "e);\r\nSELECT groupNum, groupName FROM Groups WHERE (groupNum = @groupNum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@groupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@groupName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "groupName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Groups] SET [groupNum] = @groupNum, [groupName] = @groupName WHERE (([groupNum] = @Original_groupNum) AND ((@IsNull_groupName = 1 AND [groupName] IS NULL) OR ([groupName] = @Original_groupName)));
SELECT groupNum, groupName FROM Groups WHERE (groupNum = @groupNum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@groupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@groupName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "groupName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_groupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_groupName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "groupName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_groupName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "groupName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RDB_test.Properties.Settings.Default.SDASDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT groupNum, groupName FROM dbo.Groups";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SDASDBDataSet.GroupsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SDASDBDataSet.GroupsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SDASDBDataSet.GroupsDataTable dataTable = new SDASDBDataSet.GroupsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet.GroupsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Groups");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_groupNum, string Original_groupName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_groupNum));
            if ((Original_groupName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_groupName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int groupNum, string groupName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(groupNum));
            if ((groupName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(groupName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int groupNum, string groupName, int Original_groupNum, string Original_groupName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(groupNum));
            if ((groupName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(groupName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_groupNum));
            if ((Original_groupName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_groupName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Groups_DoorsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Groups_DoorsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Groups_Doors";
            tableMapping.ColumnMappings.Add("groupNum", "groupNum");
            tableMapping.ColumnMappings.Add("doorNum", "doorNum");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Groups_Doors] WHERE (([groupNum] = @Original_groupNum) AND ([d" +
                "oorNum] = @Original_doorNum))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_groupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Groups_Doors] ([groupNum], [doorNum]) VALUES (@groupNum, @door" +
                "Num);\r\nSELECT groupNum, doorNum FROM Groups_Doors WHERE (doorNum = @doorNum) AND" +
                " (groupNum = @groupNum)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@groupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Groups_Doors] SET [groupNum] = @groupNum, [doorNum] = @doorNum WHER" +
                "E (([groupNum] = @Original_groupNum) AND ([doorNum] = @Original_doorNum));\r\nSELE" +
                "CT groupNum, doorNum FROM Groups_Doors WHERE (doorNum = @doorNum) AND (groupNum " +
                "= @groupNum)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@groupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_groupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RDB_test.Properties.Settings.Default.SDASDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT groupNum, doorNum FROM dbo.Groups_Doors";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [dbo].[Groups_Doors] WHERE (([groupNum] = @Original_groupNum) AND ([d" +
                "oorNum] = @Original_doorNum))";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_groupNum", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorNum", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT     doorNum\r\nFROM         Groups_Doors\r\nWHERE     (groupNum = @param)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@param", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "INSERT INTO [dbo].[Groups_Doors] ([groupNum], [doorNum]) VALUES (@groupNum, @door" +
                "Num);\r\nSELECT groupNum, doorNum FROM Groups_Doors WHERE (doorNum = @doorNum) AND" +
                " (groupNum = @groupNum)";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@groupNum", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "groupNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorNum", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SDASDBDataSet.Groups_DoorsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SDASDBDataSet.Groups_DoorsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SDASDBDataSet.Groups_DoorsDataTable dataTable = new SDASDBDataSet.Groups_DoorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(SDASDBDataSet.Groups_DoorsDataTable dataTable, int param) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(param));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SDASDBDataSet.Groups_DoorsDataTable GetDataBy2(int param) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(param));
            SDASDBDataSet.Groups_DoorsDataTable dataTable = new SDASDBDataSet.Groups_DoorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet.Groups_DoorsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Groups_Doors");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_groupNum, int Original_doorNum) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_groupNum));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_doorNum));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int groupNum, int doorNum) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(groupNum));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(doorNum));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int groupNum, int doorNum, int Original_groupNum, int Original_doorNum) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(groupNum));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(doorNum));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_groupNum));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_doorNum));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(int Original_groupNum, int Original_doorNum) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(Original_groupNum));
            command.Parameters[1].Value = ((int)(Original_doorNum));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(int groupNum, int doorNum) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            command.Parameters[0].Value = ((int)(groupNum));
            command.Parameters[1].Value = ((int)(doorNum));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LogsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LogsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Logs";
            tableMapping.ColumnMappings.Add("Enter_time", "Enter_time");
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("doorNumber", "doorNumber");
            tableMapping.ColumnMappings.Add("allowed", "allowed");
            tableMapping.ColumnMappings.Add("doorName", "doorName");
            tableMapping.ColumnMappings.Add("User Name", "User Name");
            tableMapping.ColumnMappings.Add("Status", "Status");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RDB_test.Properties.Settings.Default.SDASDBConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        Logs.Enter_time, Logs.ID, Logs.doorNumber, Logs.allowed, Doors.doorName, Users.userfName + ' ' + Users.userlName AS 'User Name', Logs.Status
FROM            Logs INNER JOIN
                         Doors ON Logs.doorNumber = Doors.doorNum INNER JOIN
                         Users ON Logs.ID = Users.userID";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE  from Logs Where 1>0";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SDASDBDataSet.LogsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SDASDBDataSet.LogsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SDASDBDataSet.LogsDataTable dataTable = new SDASDBDataSet.LogsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery() {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ServerSettingsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ServerSettingsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ServerSettings";
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("value", "value");
            tableMapping.ColumnMappings.Add("description", "description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ServerSettings] WHERE (([name] = @Original_name))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ServerSettings] ([name], [value], [description]) VALUES (@name" +
                ", @value, @description);\r\nSELECT name, value, description FROM ServerSettings WH" +
                "ERE (name = @name)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@value", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ServerSettings] SET [name] = @name, [value] = @value, [description]" +
                " = @description WHERE (([name] = @Original_name));\r\nSELECT name, value, descript" +
                "ion FROM ServerSettings WHERE (name = @name)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@value", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RDB_test.Properties.Settings.Default.SDASDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT name, value, description FROM dbo.ServerSettings";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SDASDBDataSet.ServerSettingsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SDASDBDataSet.ServerSettingsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SDASDBDataSet.ServerSettingsDataTable dataTable = new SDASDBDataSet.ServerSettingsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet.ServerSettingsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ServerSettings");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_name) {
            if ((Original_name == null)) {
                throw new System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string name, string value, string description) {
            if ((name == null)) {
                throw new System.ArgumentNullException("name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(name));
            }
            if ((value == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(value));
            }
            if ((description == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string name, string value, string description, string Original_name) {
            if ((name == null)) {
                throw new System.ArgumentNullException("name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(name));
            }
            if ((value == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(value));
            }
            if ((description == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(description));
            }
            if ((Original_name == null)) {
                throw new System.ArgumentNullException("Original_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UsersTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UsersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Users";
            tableMapping.ColumnMappings.Add("userID", "userID");
            tableMapping.ColumnMappings.Add("userfName", "userfName");
            tableMapping.ColumnMappings.Add("userlName", "userlName");
            tableMapping.ColumnMappings.Add("userValid", "userValid");
            tableMapping.ColumnMappings.Add("userEmail", "userEmail");
            tableMapping.ColumnMappings.Add("userPhone", "userPhone");
            tableMapping.ColumnMappings.Add("userDescription", "userDescription");
            tableMapping.ColumnMappings.Add("userStage", "userStage");
            tableMapping.ColumnMappings.Add("userImage", "userImage");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Users] WHERE (([userID] = @Original_userID) AND ((@IsNull_userfName = 1 AND [userfName] IS NULL) OR ([userfName] = @Original_userfName)) AND ((@IsNull_userlName = 1 AND [userlName] IS NULL) OR ([userlName] = @Original_userlName)) AND ((@IsNull_userValid = 1 AND [userValid] IS NULL) OR ([userValid] = @Original_userValid)) AND ((@IsNull_userEmail = 1 AND [userEmail] IS NULL) OR ([userEmail] = @Original_userEmail)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userfName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userfName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userfName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userfName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userlName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userlName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userlName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userlName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userValid", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userValid", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userValid", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "userValid", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userEmail", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userEmail", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userEmail", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userEmail", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Users] ([userID], [userfName], [userlName], [userValid], [userEmail], [userPhone], [userDescription], [userStage], [userImage]) VALUES (@userID, @userfName, @userlName, @userValid, @userEmail, @userPhone, @userDescription, @userStage, @userImage);
SELECT userID, userfName, userlName, userValid, userEmail, userPhone, userDescription, userStage, userImage FROM Users WHERE (userID = @userID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userfName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userfName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userlName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userlName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userValid", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "userValid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userEmail", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userEmail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userPhone", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "userPhone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userDescription", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "userDescription", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userStage", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "userStage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userImage", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "userImage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Users] SET [userID] = @userID, [userfName] = @userfName, [userlName] = @userlName, [userValid] = @userValid, [userEmail] = @userEmail, [userPhone] = @userPhone, [userDescription] = @userDescription, [userStage] = @userStage, [userImage] = @userImage WHERE (([userID] = @Original_userID) AND ((@IsNull_userfName = 1 AND [userfName] IS NULL) OR ([userfName] = @Original_userfName)) AND ((@IsNull_userlName = 1 AND [userlName] IS NULL) OR ([userlName] = @Original_userlName)) AND ((@IsNull_userValid = 1 AND [userValid] IS NULL) OR ([userValid] = @Original_userValid)) AND ((@IsNull_userEmail = 1 AND [userEmail] IS NULL) OR ([userEmail] = @Original_userEmail)));
SELECT userID, userfName, userlName, userValid, userEmail, userPhone, userDescription, userStage, userImage FROM Users WHERE (userID = @userID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userfName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userfName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userlName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userlName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userValid", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "userValid", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userEmail", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userEmail", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userPhone", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "userPhone", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userDescription", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "userDescription", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userStage", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "userStage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userImage", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "userImage", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userfName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userfName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userfName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userfName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userlName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userlName", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userlName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userlName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userValid", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userValid", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userValid", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "userValid", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_userEmail", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "userEmail", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userEmail", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userEmail", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RDB_test.Properties.Settings.Default.SDASDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT userID, userfName, userlName, userValid, userEmail, userPhone, userDescrip" +
                "tion, userStage, userImage FROM dbo.Users";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SDASDBDataSet.UsersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SDASDBDataSet.UsersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SDASDBDataSet.UsersDataTable dataTable = new SDASDBDataSet.UsersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet.UsersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Users");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_userID, string Original_userfName, string Original_userlName, System.Nullable<bool> Original_userValid, string Original_userEmail) {
            if ((Original_userID == null)) {
                throw new System.ArgumentNullException("Original_userID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_userID));
            }
            if ((Original_userfName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_userfName));
            }
            if ((Original_userlName == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_userlName));
            }
            if ((Original_userValid.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_userValid.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_userEmail == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_userEmail));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string userID, string userfName, string userlName, System.Nullable<bool> userValid, string userEmail, string userPhone, string userDescription, string userStage, byte[] userImage) {
            if ((userID == null)) {
                throw new System.ArgumentNullException("userID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(userID));
            }
            if ((userfName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(userfName));
            }
            if ((userlName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(userlName));
            }
            if ((userValid.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(userValid.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((userEmail == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(userEmail));
            }
            if ((userPhone == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(userPhone));
            }
            if ((userDescription == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(userDescription));
            }
            if ((userStage == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(userStage));
            }
            if ((userImage == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((byte[])(userImage));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string userID, string userfName, string userlName, System.Nullable<bool> userValid, string userEmail, string userPhone, string userDescription, string userStage, byte[] userImage, string Original_userID, string Original_userfName, string Original_userlName, System.Nullable<bool> Original_userValid, string Original_userEmail) {
            if ((userID == null)) {
                throw new System.ArgumentNullException("userID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(userID));
            }
            if ((userfName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(userfName));
            }
            if ((userlName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(userlName));
            }
            if ((userValid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(userValid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((userEmail == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(userEmail));
            }
            if ((userPhone == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(userPhone));
            }
            if ((userDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(userDescription));
            }
            if ((userStage == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(userStage));
            }
            if ((userImage == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((byte[])(userImage));
            }
            if ((Original_userID == null)) {
                throw new System.ArgumentNullException("Original_userID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_userID));
            }
            if ((Original_userfName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_userfName));
            }
            if ((Original_userlName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_userlName));
            }
            if ((Original_userValid.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_userValid.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((Original_userEmail == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_userEmail));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Users_DoorsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Users_DoorsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Users_Doors";
            tableMapping.ColumnMappings.Add("userID", "userID");
            tableMapping.ColumnMappings.Add("doorNum", "doorNum");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Users_Doors] WHERE (([userID] = @Original_userID) AND ([doorNu" +
                "m] = @Original_doorNum))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Users_Doors] ([userID], [doorNum]) VALUES (@userID, @doorNum);" +
                "\r\nSELECT userID, doorNum FROM Users_Doors WHERE (doorNum = @doorNum) AND (userID" +
                " = @userID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Users_Doors] SET [userID] = @userID, [doorNum] = @doorNum WHERE (([" +
                "userID] = @Original_userID) AND ([doorNum] = @Original_doorNum));\r\nSELECT userID" +
                ", doorNum FROM Users_Doors WHERE (doorNum = @doorNum) AND (userID = @userID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_doorNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RDB_test.Properties.Settings.Default.SDASDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT userID, doorNum FROM dbo.Users_Doors";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT userID, doorNum FROM dbo.Users_Doors\r\nwhere DoorNum=@param";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@param", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "doorNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SDASDBDataSet.Users_DoorsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SDASDBDataSet.Users_DoorsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SDASDBDataSet.Users_DoorsDataTable dataTable = new SDASDBDataSet.Users_DoorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(SDASDBDataSet.Users_DoorsDataTable dataTable, int param) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(param));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SDASDBDataSet.Users_DoorsDataTable GetDataBy1(int param) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(param));
            SDASDBDataSet.Users_DoorsDataTable dataTable = new SDASDBDataSet.Users_DoorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet.Users_DoorsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Users_Doors");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_userID, int Original_doorNum) {
            if ((Original_userID == null)) {
                throw new System.ArgumentNullException("Original_userID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_userID));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_doorNum));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string userID, int doorNum) {
            if ((userID == null)) {
                throw new System.ArgumentNullException("userID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(userID));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(doorNum));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string userID, int doorNum, string Original_userID, int Original_doorNum) {
            if ((userID == null)) {
                throw new System.ArgumentNullException("userID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(userID));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(doorNum));
            if ((Original_userID == null)) {
                throw new System.ArgumentNullException("Original_userID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_userID));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_doorNum));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Users_GroupsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Users_GroupsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Users_Groups";
            tableMapping.ColumnMappings.Add("userID", "userID");
            tableMapping.ColumnMappings.Add("GroupNum", "GroupNum");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Users_Groups] WHERE (([userID] = @Original_userID) AND ([Group" +
                "Num] = @Original_GroupNum))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Users_Groups] ([userID], [GroupNum]) VALUES (@userID, @GroupNu" +
                "m);\r\nSELECT userID, GroupNum FROM Users_Groups WHERE (GroupNum = @GroupNum) AND " +
                "(userID = @userID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Users_Groups] SET [userID] = @userID, [GroupNum] = @GroupNum WHERE " +
                "(([userID] = @Original_userID) AND ([GroupNum] = @Original_GroupNum));\r\nSELECT u" +
                "serID, GroupNum FROM Users_Groups WHERE (GroupNum = @GroupNum) AND (userID = @us" +
                "erID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userID", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupNum", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RDB_test.Properties.Settings.Default.SDASDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT userID, GroupNum FROM dbo.Users_Groups";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [dbo].[Users_Groups] WHERE (([userID] = @Original_userID) AND ([Group" +
                "Num] = @Original_GroupNum))";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_userID", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupNum", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "GroupNum", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [dbo].[Users_Groups] ([userID], [GroupNum]) VALUES (@userID, @GroupNu" +
                "m);\r\nSELECT userID, GroupNum FROM Users_Groups WHERE (GroupNum = @GroupNum) AND " +
                "(userID = @userID)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@userID", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "userID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupNum", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "GroupNum", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SDASDBDataSet.Users_GroupsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SDASDBDataSet.Users_GroupsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SDASDBDataSet.Users_GroupsDataTable dataTable = new SDASDBDataSet.Users_GroupsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet.Users_GroupsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SDASDBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Users_Groups");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_userID, int Original_GroupNum) {
            if ((Original_userID == null)) {
                throw new System.ArgumentNullException("Original_userID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_userID));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_GroupNum));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string userID, int GroupNum) {
            if ((userID == null)) {
                throw new System.ArgumentNullException("userID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(userID));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(GroupNum));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string userID, int GroupNum, string Original_userID, int Original_GroupNum) {
            if ((userID == null)) {
                throw new System.ArgumentNullException("userID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(userID));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(GroupNum));
            if ((Original_userID == null)) {
                throw new System.ArgumentNullException("Original_userID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_userID));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_GroupNum));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteQuery(string Original_userID, int Original_GroupNum) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Original_userID == null)) {
                throw new System.ArgumentNullException("Original_userID");
            }
            else {
                command.Parameters[0].Value = ((string)(Original_userID));
            }
            command.Parameters[1].Value = ((int)(Original_GroupNum));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(string userID, int GroupNum) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((userID == null)) {
                throw new System.ArgumentNullException("userID");
            }
            else {
                command.Parameters[0].Value = ((string)(userID));
            }
            command.Parameters[1].Value = ((int)(GroupNum));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591