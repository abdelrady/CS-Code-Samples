//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SmartDoor.Classes {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Doors_DataSet : System.Data.DataSet {
        
        private UserStatusDataTable tableUserStatus;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Doors_DataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Doors_DataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UserStatus"] != null)) {
                    base.Tables.Add(new UserStatusDataTable(ds.Tables["UserStatus"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserStatusDataTable UserStatus {
            get {
                return this.tableUserStatus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            Doors_DataSet cln = ((Doors_DataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UserStatus"] != null)) {
                    base.Tables.Add(new UserStatusDataTable(ds.Tables["UserStatus"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUserStatus = ((UserStatusDataTable)(base.Tables["UserStatus"]));
            if ((initTable == true)) {
                if ((this.tableUserStatus != null)) {
                    this.tableUserStatus.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUserStatus = new UserStatusDataTable();
            base.Tables.Add(this.tableUserStatus);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserStatus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            Doors_DataSet ds = new Doors_DataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void UserStatusRowChangeEventHandler(object sender, UserStatusRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserStatusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnuserID;
            
            private System.Data.DataColumn columnuserfName;
            
            private System.Data.DataColumn columnuserlName;
            
            private System.Data.DataColumn columnuserValid;
            
            private System.Data.DataColumn columnuserEmail;
            
            private System.Data.DataColumn columnuserPhone;
            
            private System.Data.DataColumn columnuserDescription;
            
            private System.Data.DataColumn columnuserStage;
            
            private System.Data.DataColumn columnuserImage;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserStatusDataTable() {
                this.TableName = "UserStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserStatusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserStatusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userIDColumn {
                get {
                    return this.columnuserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userfNameColumn {
                get {
                    return this.columnuserfName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userlNameColumn {
                get {
                    return this.columnuserlName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userValidColumn {
                get {
                    return this.columnuserValid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userEmailColumn {
                get {
                    return this.columnuserEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userPhoneColumn {
                get {
                    return this.columnuserPhone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userDescriptionColumn {
                get {
                    return this.columnuserDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userStageColumn {
                get {
                    return this.columnuserStage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn userImageColumn {
                get {
                    return this.columnuserImage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserStatusRow this[int index] {
                get {
                    return ((UserStatusRow)(this.Rows[index]));
                }
            }
            
            public event UserStatusRowChangeEventHandler UserStatusRowChanging;
            
            public event UserStatusRowChangeEventHandler UserStatusRowChanged;
            
            public event UserStatusRowChangeEventHandler UserStatusRowDeleting;
            
            public event UserStatusRowChangeEventHandler UserStatusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserStatusRow(UserStatusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserStatusRow AddUserStatusRow(string userID, string userfName, string userlName, bool userValid, string userEmail, string userPhone, string userDescription, string userStage, byte[] userImage) {
                UserStatusRow rowUserStatusRow = ((UserStatusRow)(this.NewRow()));
                rowUserStatusRow.ItemArray = new object[] {
                        userID,
                        userfName,
                        userlName,
                        userValid,
                        userEmail,
                        userPhone,
                        userDescription,
                        userStage,
                        userImage};
                this.Rows.Add(rowUserStatusRow);
                return rowUserStatusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserStatusRow FindByuserID(string userID) {
                return ((UserStatusRow)(this.Rows.Find(new object[] {
                            userID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UserStatusDataTable cln = ((UserStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UserStatusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuserID = base.Columns["userID"];
                this.columnuserfName = base.Columns["userfName"];
                this.columnuserlName = base.Columns["userlName"];
                this.columnuserValid = base.Columns["userValid"];
                this.columnuserEmail = base.Columns["userEmail"];
                this.columnuserPhone = base.Columns["userPhone"];
                this.columnuserDescription = base.Columns["userDescription"];
                this.columnuserStage = base.Columns["userStage"];
                this.columnuserImage = base.Columns["userImage"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuserID = new System.Data.DataColumn("userID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserID);
                this.columnuserfName = new System.Data.DataColumn("userfName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserfName);
                this.columnuserlName = new System.Data.DataColumn("userlName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserlName);
                this.columnuserValid = new System.Data.DataColumn("userValid", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserValid);
                this.columnuserEmail = new System.Data.DataColumn("userEmail", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserEmail);
                this.columnuserPhone = new System.Data.DataColumn("userPhone", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserPhone);
                this.columnuserDescription = new System.Data.DataColumn("userDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserDescription);
                this.columnuserStage = new System.Data.DataColumn("userStage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserStage);
                this.columnuserImage = new System.Data.DataColumn("userImage", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserImage);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnuserID}, true));
                this.columnuserID.AllowDBNull = false;
                this.columnuserID.Unique = true;
                this.columnuserID.MaxLength = 50;
                this.columnuserfName.MaxLength = 150;
                this.columnuserlName.MaxLength = 150;
                this.columnuserEmail.MaxLength = 50;
                this.columnuserPhone.MaxLength = 2147483647;
                this.columnuserDescription.MaxLength = 150;
                this.columnuserStage.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserStatusRow NewUserStatusRow() {
                return ((UserStatusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UserStatusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UserStatusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserStatusRowChanged != null)) {
                    this.UserStatusRowChanged(this, new UserStatusRowChangeEvent(((UserStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserStatusRowChanging != null)) {
                    this.UserStatusRowChanging(this, new UserStatusRowChangeEvent(((UserStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserStatusRowDeleted != null)) {
                    this.UserStatusRowDeleted(this, new UserStatusRowChangeEvent(((UserStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserStatusRowDeleting != null)) {
                    this.UserStatusRowDeleting(this, new UserStatusRowChangeEvent(((UserStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserStatusRow(UserStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                Doors_DataSet ds = new Doors_DataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserStatusRow : System.Data.DataRow {
            
            private UserStatusDataTable tableUserStatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserStatusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserStatus = ((UserStatusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userID {
                get {
                    return ((string)(this[this.tableUserStatus.userIDColumn]));
                }
                set {
                    this[this.tableUserStatus.userIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userfName {
                get {
                    try {
                        return ((string)(this[this.tableUserStatus.userfNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userfName\' in table \'UserStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserStatus.userfNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userlName {
                get {
                    try {
                        return ((string)(this[this.tableUserStatus.userlNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userlName\' in table \'UserStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserStatus.userlNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool userValid {
                get {
                    try {
                        return ((bool)(this[this.tableUserStatus.userValidColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userValid\' in table \'UserStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserStatus.userValidColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userEmail {
                get {
                    try {
                        return ((string)(this[this.tableUserStatus.userEmailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userEmail\' in table \'UserStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserStatus.userEmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userPhone {
                get {
                    try {
                        return ((string)(this[this.tableUserStatus.userPhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userPhone\' in table \'UserStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserStatus.userPhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userDescription {
                get {
                    try {
                        return ((string)(this[this.tableUserStatus.userDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userDescription\' in table \'UserStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserStatus.userDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userStage {
                get {
                    try {
                        return ((string)(this[this.tableUserStatus.userStageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userStage\' in table \'UserStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserStatus.userStageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] userImage {
                get {
                    try {
                        return ((byte[])(this[this.tableUserStatus.userImageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'userImage\' in table \'UserStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserStatus.userImageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserfNameNull() {
                return this.IsNull(this.tableUserStatus.userfNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserfNameNull() {
                this[this.tableUserStatus.userfNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserlNameNull() {
                return this.IsNull(this.tableUserStatus.userlNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserlNameNull() {
                this[this.tableUserStatus.userlNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserValidNull() {
                return this.IsNull(this.tableUserStatus.userValidColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserValidNull() {
                this[this.tableUserStatus.userValidColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserEmailNull() {
                return this.IsNull(this.tableUserStatus.userEmailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserEmailNull() {
                this[this.tableUserStatus.userEmailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserPhoneNull() {
                return this.IsNull(this.tableUserStatus.userPhoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserPhoneNull() {
                this[this.tableUserStatus.userPhoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserDescriptionNull() {
                return this.IsNull(this.tableUserStatus.userDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserDescriptionNull() {
                this[this.tableUserStatus.userDescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserStageNull() {
                return this.IsNull(this.tableUserStatus.userStageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserStageNull() {
                this[this.tableUserStatus.userStageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserImageNull() {
                return this.IsNull(this.tableUserStatus.userImageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserImageNull() {
                this[this.tableUserStatus.userImageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserStatusRowChangeEvent : System.EventArgs {
            
            private UserStatusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserStatusRowChangeEvent(UserStatusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SmartDoor.Classes.DataSet1TableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserStatusTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserStatusTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserStatus";
            tableMapping.ColumnMappings.Add("userID", "userID");
            tableMapping.ColumnMappings.Add("userfName", "userfName");
            tableMapping.ColumnMappings.Add("userlName", "userlName");
            tableMapping.ColumnMappings.Add("userValid", "userValid");
            tableMapping.ColumnMappings.Add("userEmail", "userEmail");
            tableMapping.ColumnMappings.Add("userPhone", "userPhone");
            tableMapping.ColumnMappings.Add("userDescription", "userDescription");
            tableMapping.ColumnMappings.Add("userStage", "userStage");
            tableMapping.ColumnMappings.Add("userImage", "userImage");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SmartDoor.Properties.Settings.Default.SDASDBConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.UserStatus";
            this._commandCollection[0].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BarcodeNumber", System.Data.SqlDbType.NVarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@DoorNum", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.InputOutput, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(Doors_DataSet.UserStatusDataTable dataTable, string BarcodeNumber, System.Nullable<int> DoorNum, ref System.Nullable<int> Status) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((BarcodeNumber == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(BarcodeNumber));
            }
            if ((DoorNum.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(DoorNum.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Status.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(Status.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            if (((this.Adapter.SelectCommand.Parameters[3].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[3].Value.GetType() == typeof(System.DBNull)))) {
                Status = new System.Nullable<int>();
            }
            else {
                Status = new System.Nullable<int>(((int)(this.Adapter.SelectCommand.Parameters[3].Value)));
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual Doors_DataSet.UserStatusDataTable GetData(string BarcodeNumber, System.Nullable<int> DoorNum, ref System.Nullable<int> Status) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((BarcodeNumber == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(BarcodeNumber));
            }
            if ((DoorNum.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(DoorNum.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Status.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(Status.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = System.DBNull.Value;
            }
            Doors_DataSet.UserStatusDataTable dataTable = new Doors_DataSet.UserStatusDataTable();
            this.Adapter.Fill(dataTable);
            if (((this.Adapter.SelectCommand.Parameters[3].Value == null) 
                        || (this.Adapter.SelectCommand.Parameters[3].Value.GetType() == typeof(System.DBNull)))) {
                Status = new System.Nullable<int>();
            }
            else {
                Status = new System.Nullable<int>(((int)(this.Adapter.SelectCommand.Parameters[3].Value)));
            }
            return dataTable;
        }
    }
}

#pragma warning restore 1591