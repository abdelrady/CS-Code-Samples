<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0063)http://blogs.msdn.com/coding4fun/archive/2006/10/31/912422.aspx -->
<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Coding4Fun : Is that you? Writing Better Software for Cool USB Hardware</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content=hardware,hardwarehacks name=keywords>
<META 
content="Interfacing wireless PC lock using .Net. This application allows you to perform some actions when you leave ( like locking your computer, turning down the volume) and running certain tasks when u arrive back. Scott Hanselman Scott Hanselman's Computer" 
name=description>
<META content="MSHTML 6.00.2900.2180" name=GENERATOR><LINK 
href="http://blogs.msdn.com/coding4fun/pingback.aspx" rel=pingback><LINK 
media=screen 
href="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/style.css" 
type=text/css rel=stylesheet><LINK media=print 
href="/Themes/Blogs/riviera/style/print.css" type=text/css rel=stylesheet><LINK 
media=screen 
href="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/customcss.css" 
type=text/css rel=stylesheet><LINK href="/favicon.ico" type=image/ico 
rel="shortcut icon"><LINK title="Coding4Fun (RSS 2.0)" 
href="http://blogs.msdn.com/coding4fun/rss.xml" type=application/rss+xml 
rel=alternate><LINK title="Coding4Fun (Atom 1.0)" 
href="http://blogs.msdn.com/coding4fun/atom.xml" type=application/atom+xml 
rel=alternate><LINK 
title="Is that you? Writing Better Software for Cool USB Hardware Comment RSS (RSS 2.0)" 
href="http://blogs.msdn.com/coding4fun/commentrss.aspx?PostID=912422" 
type=application/rss+xml rel=alternate>
<SCRIPT 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/global.js" 
type=text/javascript></SCRIPT>

<SCRIPT 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/cssquery2-p.js" 
type=text/javascript></SCRIPT>

<SCRIPT 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/ruzeeborders.js" 
type=text/javascript></SCRIPT>

<SCRIPT type=text/javascript><!--

RUZEE.Borders.add({
  '#header': { borderType:'simple', cornerRadius:10 },
  '#container': { borderType:'shadow', cornerRadius:10, shadowWidth: 10 }
});

window.onload=function(){
  RUZEE.Borders.render();
};

//-->
</SCRIPT>
</HEAD>
<BODY>
<FORM id=aspnetForm name=aspnetForm 
onsubmit="javascript:return WebForm_OnSubmit();" 
action=/coding4fun/archive/2006/10/31/912422.aspx method=post>
<DIV><INPUT id=__EVENTTARGET type=hidden name=__EVENTTARGET> <INPUT 
id=__EVENTARGUMENT type=hidden name=__EVENTARGUMENT> <INPUT id=__VIEWSTATE 
type=hidden 
value=/wEPDwUKLTMyNjg0MDc1MWQYAQUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgIFKmN0bDAwJF8kY3RsMDAkXyRjdGwwMSRfJGZvcm0kXyRjaGtSZW1lbWJlcgUtY3RsMDAkXyRjdGwwMCRfJEJsb2dTaWRlQmFyMSRfJHdzJF8kU2VhcmNoQm94BmWsaxTJB1Pg7Em7T9B3Y69PN8g= 
name=__VIEWSTATE> </DIV>
<SCRIPT type=text/javascript>
<!--
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
// -->
</SCRIPT>

<SCRIPT 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/WebResource.axd" 
type=text/javascript></SCRIPT>

<SCRIPT language=javascript 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/Telligent_Modal.js" 
type=text/javascript></SCRIPT>

<SCRIPT language=javascript type=text/javascript>
// <![CDATA[
Telligent_Modal.Configure('/utility/loading.htm',['Modal'],['ModalTitle'],['ModalClose'],['ModalContent'],['ModalFooter'],['ModalResize'],['ModalMask'],100);
// ]]>
</SCRIPT>

<SCRIPT 
src="C:\Documents and Settings\user4\Desktop\barc1\Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files\WebResource(1).axd" 
type=text/javascript></SCRIPT>

<SCRIPT type=text/javascript>
<!--
function WebForm_OnSubmit() {
if (typeof(ValidatorOnSubmit) == "function" && ValidatorOnSubmit() == false) return false;
return true;
}
// -->
</SCRIPT>

<DIV class=clearfix id=container>
<DIV id=header>
<H2><A id=ctl00___ctl00___BlogTitleHeader1___BlogTitle 
href="http://blogs.msdn.com/coding4fun/default.aspx">Coding4Fun</A></H2>
<P id=tagline>
<DIV id=menuContainer></DIV>
<P></P></DIV>
<DIV id=wrapper>
<DIV class=clearfix id=content>
<DIV class=entryview>
<H1 class=entryviewheading>Is that you? Writing Better Software for Cool USB 
Hardware</H1>
<DIV class=entryviewheadersub>Published 31 October 06 09:47 AM | <A 
id=ctl00___ctl00___ctl01___Entry___AuthorLink 
href="http://blogs.msdn.com/user/Profile.aspx?UserID=4539">Coding4Fun</A>&nbsp; 
</DIV><SPAN id=c4fmetadata>
<TABLE class="" cellSpacing=0 cellPadding=1 width="100%" border=0>
  <TBODY>
  <TR class=entry_overview>
    <TD class="" width=50>&nbsp;</TD>
    <TD class=""><SPAN class=entry_description>Interfacing wireless PC lock 
      using .Net. This application allows you to perform some actions when you 
      leave ( like locking your computer, turning down the volume) and running 
      certain tasks when u arrive back.</SPAN></TD></TR>
  <TR>
    <TD class="" colSpan=2>
      <DIV class=entry_author>Scott Hanselman</DIV>
      <DIV class=entry_company><A 
      href="http://www.hanselman.com/blog/default.aspx">Scott Hanselman's 
      Computer Zen</A></DIV><BR>
      <DIV class=entry_details><B>Difficulty: </B><SPAN 
      class=entry_details_input>Intermediate</SPAN></DIV>
      <DIV class=entry_details><B>Time Required:</B> <SPAN 
      class=entry_details_input>6-10 hours</SPAN></DIV>
      <DIV class=entry_details><B>Cost: </B><SPAN class=entry_details_input>Less 
      Than $50</SPAN></DIV>
      <DIV class=entry_details><B>Software: </B><SPAN 
      class=entry_details_input><A href="http://msdn.com/express/">Visual Studio 
      Express Editions</A></SPAN></DIV>
      <DIV class=entry_details><B>Hardware: </B><SPAN 
      class=entry_details_input><A 
      href="http://www.newegg.com/Product/Product.asp?Item=00-702-001&amp;depa=0">Wireless 
      PC Lock</A></SPAN></DIV>
      <DIV class=entry_details><B>Download: </B><A 
      href="http://download.microsoft.com/download/d/4/5/d4556729-81f9-4578-936a-111721b27e49/UsbWirelessSecurityInstaller.msi">Download</A> 

      <UL></UL></DIV></TD></TR></TBODY></TABLE></SPAN>
<P mce_keep="true"><B>Note: </B>The source code for this project is only the 
beginning. It continues to evolve at <A 
href="http://sourceforge.net/projects/usbwisec/" 
mce_href="http://sourceforge.net/projects/usbwisec/">SourceForge</A>. Go there 
to help guide its evolution or download the latest version for the .NET 
Framework 2.0 or 1.1. </P>
<P><B>Summary: </B>In this fourth installment of the "Some Assembly Required" 
column, <A href="http://www.computerzen.com/" 
mce_href="http://www.computerzen.com/">Scott Hanselman</A> and <A 
href="http://labs.patchadvisor.com/blogs/bryan" 
mce_href="http://labs.patchadvisor.com/blogs/bryan">Bryan Batchelder</A> find a 
piece of hardware so compelling—and with included software so bad—that they 
write their own version using the .NET Framework 2.0. You can <A 
href="http://froogle.google.com/froogle?q=%22USB+PC+Lock%22&amp;scoring=p" 
mce_href="http://froogle.google.com/froogle?q=%22USB+PC+Lock%22&amp;scoring=p">buy 
a little wireless key fob with USB Receiver manufactured by a no-name company 
and billed as a "Wireless USB Security Device"</A> from a number of online 
retailers that is meant to lock your computer when you leave and unlock when you 
return. However, the software it comes with <A 
href="http://www.f-secure.com/weblog/archives/archive-102004.html#00000316" 
mce_href="http://www.f-secure.com/weblog/archives/archive-102004.html#00000316">is 
terrible</A>. So, we figure—Some Assembly Required. (Hopefully the company will 
ready this article and start using our software!) We'll also extend the 
application with all-new functionality using plugins written in Visual Basic! 
</P>
<H3>The Hardware</H3>
<P>What a fantastic idea this was. A <A 
href="http://www.newegg.com/Product/Product.asp?Item=00-702-001&amp;depa=0" 
mce_href="http://www.newegg.com/Product/Product.asp?Item=00-702-001&amp;depa=0">little 
green button (US$15 at NewEgg)</A> that you attach to your key ring. It acts as 
a "presence" indicator for your computer. It knows when you arrive and it knows 
when you leave and it performs actions like locking your computer, turning down 
the volume or running certain tasks. Brilliant, right? Wrong. The hardware is 
great, but the included software is some odd little app circa 1995 whose idea of 
"locking" your computer is covering all your applications with its own big 
non-standard window and forcing you to enter a password to override. No, not 
your Windows Login password, another totally different and application-specific 
password. Yikes. </P>
<P><IMG alt="" 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/wirelesspclock.gif" 
border=0 
mce_src="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/wirelesspclock.gif"> 
</P>
<P>Also, this little application wasn't extensible in any way, and there didn't 
appear to be any COM or .NET libraries included to easily receive the device's 
events. But, the <I>idea</I> and the hardware are just so darned compelling. <A 
href="http://www.greghughes.net/" mce_href="http://www.greghughes.net/">Greg 
Hughes</A> and I had talked about writing a better application for this little 
button a number of times but never took that first step. Thankfully Bryan 
Batchelder also couldn't sleep and took the first step for us all. </P>
<H3>Interfacing with USB and a Little Abstraction</H3>
<P>The hardware behind the little green <A 
href="http://www.newegg.com/Product/Product.asp?Item=00-702-001&amp;depa=0" 
mce_href="http://www.newegg.com/Product/Product.asp?Item=00-702-001&amp;depa=0">USB 
Wireless Security Key Fob</A> is two pieces. The button that you clip to your 
keys that "heartbeats" a short-range (10m) signal, and a small USB receiver that 
plugs into your computer. Interestingly, when it's plugged in for the first 
time, it doesn't require drivers. Windows knows about this little thing 
automatically! How is that possible? When I run msinfo32.exe (You have this 
little-known application on <I>your </I>system also; give it a run now!) I 
notice that it's registered itself as a "USB Human Interface Device" (mouse) and 
a "Game Controller" which are two devices that Windows knows about already. It 
makes sense that the company creating these little devices would use commonly 
available USB chipsets like those used in inexpensive mice. Also, no need to 
write a custom device driver. In the figure below, notice the USB Receiver 
device's PNP ID is "VID_04b4&amp;PID_7417." That's important: we'll need to use 
it later when we go looking for it programmatically. </P>
<P><A 
href="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/msinfo32L.gif" 
mce_href="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/msinfo32L.gif"><IMG 
alt="Click here for larger image" 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/msinfo32.gif" 
border=0 
mce_src="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/msinfo32.gif"></A> 
</P>
<P><B>(click image to zoom)</B> </P>
<P>Talking to a USB device is a lot different from talking to a Serial Port. 
Serial Ports have names like "COM3" and no matter what device is plugged into 
the COM3, it's still COM3. If you want to find a serial port device and you're 
not sure which port it's on, you have to basically "yell" out programmatically 
to each of the serial ports on the system saying, "Is that you?" In the USB 
world, you know the kind of device you're looking for, and you're really not 
concerned about which port it's on. You just know you want to talk to it. </P>
<P>Unfortunately, there's no support in the Base Class Library (BCL) included 
with .NET for talking to USB Devices. Most often, if you want to access a USB 
device from .NET, you'll use a high-level library that the device's manufacturer 
includes. However, in this case, as we said, the manufacturer includes no 
libraries that we can take advantage of, so we're at square one. Instead we'll 
be using a number of Win32 APIs from kernel32.dll, setupapi.dll, and hid.dll 
("hid" means Human Interface Device). </P>
<P>We'll start by building up several layers of abstraction, because even though 
we <I>could </I>just call all this Win32 goodness from our UI, we'd <I>really 
</I>rather have a nice class called "KeyFob," wouldn't we? Below is a Class 
Diagram created by Visual Studio 2005 Professional Edition. You can read it from 
left to right. You might think that <B>KeyFob</B> is the class our application 
will use, since it's a good logical representation of the little device that we 
think of as the key fob. However, our application really cares about the concept 
of <I>presence</I>, and we have to take into consideration that there are 
multiple key fobs out there, any one of which could walk by our single receiver. 
So, we need a <B>KeyFobCollection</B> that is a generic <B>Dictionary&lt;string, 
KeyFob&gt;</B> that our <B>PresenceManager</B> will use. The 
<B>PresenceManager</B> will manage a list of authorized fobs; that is, 
<B>KeyFob</B>s that are allowed to affect our system by their presence. </P>
<P><B>KeyFob</B> has <B>Status</B>, <B>SerialNumber</B> and <B>HandleMessage</B> 
methods as well as helpful information like <B>IsAuthorized</B> and 
<B>LastHeartbeat</B>. It has protected items that aren't directly available to 
us, the most interesting one being a <B>KeyFobReceiver</B>. This class is wholly 
encapsulated within the <B>KeyFob</B> class and provides the class with 
information that we on the outside really don't need to know, like the array of 
bytes of the <B>lastPacket</B>. Moving lower, the <B>KeyFobReceiver</B> has an 
instance of the <B>UsbStickReceiver</B> class. This is the first class that 
formally recognizes that this device is a USB device and there is some very 
low-level I/O going on here. It has an instance of the <A 
href="http://www.lvr.com/hidpage.htm" 
mce_href="http://www.lvr.com/hidpage.htm">USBSharp class</A> which is a managed 
wrapper around all the Win32 DLLs APIs mentioned before. </P>
<P><A 
href="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/coreL.gif" 
mce_href="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/coreL.gif"><IMG 
alt="Click here for larger image" 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/core.gif" 
border=0 
mce_src="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/core.gif"></A> 
</P>
<P><B>(click image to zoom)</B> </P>
<P>The really crazy and interesting stuff happens in <B>UsbStickReceiver</B>, 
just above the low-level APIs. The <B>USBSharp</B> class handles marshaling of 
the various Windows SDK datatypes we'll need to be passing in and receiving. 
Let's take a look at the <B>FindReceiver</B> method of <B>UsbStickReceiver</B>. 
Not much can happen in our application until the receiver is plugged in, right? 
</P>
<P>I've added comments to the code below to explain what's happening and what 
we're trying to accomplish. </P><PRE><CODE></CODE></PRE><PRE class=csharpcode><SPAN class=kwrd>public</SPAN> <SPAN class=kwrd>static</SPAN> UsbStickReceiver FindReceiver()<BR>{<BR>    <SPAN class=rem>//We haven't found any devices</SPAN>
    <SPAN class=kwrd>int</SPAN> my_device_count = 0;<BR>    <SPAN class=rem>//We have no idea where our device is (yet)</SPAN>
    <SPAN class=kwrd>string</SPAN> my_device_path = <SPAN class=kwrd>string</SPAN>.Empty;<BR>    <SPAN class=rem>//But we know we'll need all these methods!</SPAN>
    USBSharp.USBSharp myUsb = <SPAN class=kwrd>new</SPAN> USBSharp.USBSharp();<BR>    <SPAN class=rem>//And we need to get the Human Interface Device GUID</SPAN>
    myUsb.CT_HidGuid();
    <SPAN class=rem>//Let the system know we're looking for active devices</SPAN>
    myUsb.CT_SetupDiGetClassDevs();
 
    <SPAN class=rem>//Get ready...</SPAN>
    <SPAN class=kwrd>int</SPAN> result = -1;<BR>    <SPAN class=kwrd>int</SPAN> device_count = 0;<BR>    <SPAN class=kwrd>int</SPAN> size = 0;<BR>    <SPAN class=kwrd>int</SPAN> requiredSize = 0;<BR> <BR>    <SPAN class=rem>//While nothing goes wrong</SPAN>
    <SPAN class=kwrd>while</SPAN>(result != 0)<BR>    {<BR>        <SPAN class=rem>//Starting with device 0...</SPAN>
        result = myUsb.CT_SetupDiEnumDeviceInterfaces(device_count);
        <SPAN class=rem>//Let me know how much room I'm going to need to get info about this device</SPAN>
        <SPAN class=kwrd>int</SPAN> resultb = myUsb.CT_SetupDiGetDeviceInterfaceDetail(<SPAN class=kwrd>ref</SPAN> requiredSize, 0);<BR>        <SPAN class=rem>//Cool, store that                </SPAN>
        size = requiredSize;
        <SPAN class=rem>//Gimme the info you've got</SPAN>
        resultb = myUsb.CT_SetupDiGetDeviceInterfaceDetailx(<SPAN class=kwrd>ref</SPAN> requiredSize, size);<BR>        <SPAN class=rem>//Did we find the USB Receiver? Remember it's name from earlier?</SPAN>
        <SPAN class=kwrd>if</SPAN>(myUsb.DevicePathName.IndexOf(<SPAN class=str>"vid_04b4&amp;pid_7417"</SPAN>) &gt; 0)<BR>        {<BR>            <SPAN class=rem>//Sweet, it's device # "device_count," let's store this!</SPAN>
            my_device_count = device_count;
            my_device_path = myUsb.DevicePathName;
            <SPAN class=rem>//Bail, we're done!</SPAN>
            <SPAN class=kwrd>break</SPAN>;<BR>        }<BR>        device_count++;<BR>    }<BR> <BR>    <SPAN class=kwrd>if</SPAN>(my_device_path == <SPAN class=kwrd>string</SPAN>.Empty)<BR>    {<BR>        Exception devNotFound = <SPAN class=kwrd>new</SPAN> Exception(<SPAN class=str>@"Device could not be found."</SPAN>);<BR>        <SPAN class=kwrd>throw</SPAN>(devNotFound);<BR>    }<BR> <BR>    <SPAN class=kwrd>return</SPAN> <SPAN class=kwrd>new</SPAN> UsbStickReceiver(my_device_count, my_device_path);<BR>}</PRE>
<STYLE type=text/css>.csharpcode {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	MARGIN: 0em
}
.csharpcode .rem {
	COLOR: #008000
}
.csharpcode .kwrd {
	COLOR: #0000ff
}
.csharpcode .str {
	COLOR: #006080
}
.csharpcode .op {
	COLOR: #0000c0
}
.csharpcode .preproc {
	COLOR: #cc6633
}
.csharpcode .asp {
	BACKGROUND-COLOR: #ffff00
}
.csharpcode .html {
	COLOR: #800000
}
.csharpcode .attr {
	COLOR: #ff0000
}
.csharpcode .alt {
	MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4
}
.csharpcode .lnum {
	COLOR: #606060
}
</STYLE>
This is a pretty good example of abstraction. The name of the method is 
"FindReceiver" and it takes no parameters. It returns a <B>UsbStickReceiver</B> 
to the caller, <B>KeyFobReceiver</B>, and it hinds a LOT of stuff. In this 
example also, the methods we call are all managed methods on the <B>UsbSharp</B> 
class which, in turn, hides all the unmanaged Win32 goop. Each class has its 
responsibility and does just that. 'Twas Bryan who did all this good work and 
for that we thank him. 
<P>Another interesting thing to note is that Human Interface Devices (HIDs) can 
use File Handles to provide us access to their data, so later 
<B>UsbStickReceiver</B> will take the <B>devicePath</B> retrieved in the code 
above and do </P><PRE><CODE></CODE></PRE><PRE class=csharpcode>resultb = myUsb.CT_CreateFile(devicePath); <BR></PRE>
<STYLE type=text/css>.csharpcode {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	MARGIN: 0em
}
.csharpcode .rem {
	COLOR: #008000
}
.csharpcode .kwrd {
	COLOR: #0000ff
}
.csharpcode .str {
	COLOR: #006080
}
.csharpcode .op {
	COLOR: #0000c0
}
.csharpcode .preproc {
	COLOR: #cc6633
}
.csharpcode .asp {
	BACKGROUND-COLOR: #ffff00
}
.csharpcode .html {
	COLOR: #800000
}
.csharpcode .attr {
	COLOR: #ff0000
}
.csharpcode .alt {
	MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4
}
.csharpcode .lnum {
	COLOR: #606060
}
</STYLE>

<P>and then take the resulting file handle <B>HidHandle</B> and&nbsp;&nbsp;</P><PRE class=csharpcode><PRE class=csharpcode>fs = <FONT color=#000000><SPAN class=kwrd>new</SPAN> FileStream(<SPAN class=kwrd>new</SPAN> Microsoft.Win32.SafeHandles.<BR>     SafeFileHandle((IntPtr)myUsb.HidHandle, <SPAN class=kwrd>false</SPAN>), <BR>     FileAccess.Read, 5, <SPAN class=kwrd>true</SPAN>);</FONT></PRE>
<PRE class=csharpcode><FONT color=#000000>
</FONT></PRE>to get the data. Be sure to read the code and have the Class Diagram close by for reference. It's really interesting. </PRE>
<H3>Squashing Bugs and Reading the Manual</H3>
<P>One small but interesting aside: as Bryan and I (and the folks who used the 
initial version of this application) were testing this application, we noticed 
that some users' systems just couldn't find the USB receiver when it was plugged 
into a USB hub. They'd have to move it around until it got found. It wasn't 
until we did a line-by-line review of the code in UsbStickReceiver.cs and 
compared <I>each method call </I>to the MSDN documentation that we discovered 
that we'd been passing an incorrect parameter to one of the wrapped Win32 
methods. </P><PRE><CODE></CODE></PRE><PRE class=csharpcode><SPAN class=rem>
<PRE class=csharpcode><FONT color=#000000><SPAN class=rem>//Wrong. We were passing in the previous device's resultb value, </SPAN>
<SPAN class=rem>//which caused random and unpredictable weirdness.</SPAN>
<SPAN class=kwrd>int</SPAN> resultb = myUsb.CT_SetupDiGetDeviceInterfaceDetail(<SPAN class=kwrd>ref</SPAN> requiredSize, resultb);<BR><BR><SPAN class=rem>//Right. Odd as it may seem, the MSDN documentation explicitly</SPAN>
<SPAN class=rem>//says to pass in "0" for the second parameter. Whatever, dude. </SPAN>
<SPAN class=rem>//It makes the whole thing work!</SPAN>
<SPAN class=kwrd>int</SPAN> resultb = myUsb.CT_SetupDiGetDeviceInterfaceDetail(<SPAN class=kwrd>ref</SPAN></FONT> requiredSize, 0);<BR></PRE></SPAN>Bugs like this are really hard to find and fix because it DID work. Most of the time. It worked so most-of-the-time that we figured it was a hardware problem. Hard to debug, but rewarding now that we can reliably find the USB Receiver now. </PRE>
<H3>User-specific Settings</H3>
<P>By now we've got our <B>PresenceManager</B>. Next stop 
<B>SettingsManager</B>. Since more than one person may be using a single machine 
and will each likely have their own key fob, we'll want them to each have their 
own user-specific settings. We wanted to get a path that is user-specific and 
application-specific. We also wanted to create a directory and reasonable 
default settings file if needed. </P><PRE><CODE></CODE></PRE><PRE class=csharpcode><SPAN class=rem><FONT color=#000000>//This constructor <SPAN class=kwrd>is</SPAN> <SPAN class=kwrd>private</SPAN> because SettingsManager <SPAN class=kwrd>is</SPAN> accessed via a Factory <BR><SPAN class=kwrd>private</SPAN> SettingsManager()<BR>{<BR>    doc = <SPAN class=kwrd>new</SPAN> XmlDocument();<BR>    <SPAN class=kwrd>string</SPAN> appDirPath = Path.Combine(<BR>        System.Environment.GetFolderPath(<BR>             System.Environment.SpecialFolder.ApplicationData), <BR>        <SPAN class=str>"Usb Wireless Security"</SPAN>);<BR>    configFilePath = Path.Combine(appDirPath, <SPAN class=str>"SettingsV2.xml"</SPAN>);<BR>    CreateIfNeeded(appDirPath, configFilePath);<BR>    doc.Load(configFilePath);<BR>}<BR> <BR><SPAN class=kwrd>protected</SPAN> void CreateIfNeeded(<SPAN class=kwrd>string</SPAN> directory, <SPAN class=kwrd>string</SPAN> file)<BR>{<BR>    <SPAN class=kwrd>const</SPAN> <SPAN class=kwrd>string</SPAN> DEFAULT_SETTING_FILE = <BR>        @<SPAN class=str>"&lt;?xml version="</SPAN><SPAN class=str>"1.0"</SPAN><SPAN class=str>" encoding="</SPAN><SPAN class=str>"utf-8"</SPAN></FONT><FONT color=#000000><SPAN class=str>" ?&gt;<BR>        &lt;Settings&gt;&lt;KeyFobs /&gt;<BR>        &lt;PresenceWindow&gt;5&lt;/PresenceWindow&gt;<BR>        &lt;OverridePassword /&gt;&lt;DisabledPlugins/&gt;&lt;/Settings&gt;"</SPAN>;<BR>    DirectoryInfo di = <SPAN class=kwrd>new</SPAN> DirectoryInfo(directory);<BR>    <SPAN class=kwrd>if</SPAN>(!di.Exists) { di.Create(); }<BR> <BR>    FileInfo fi = <SPAN class=kwrd>new</SPAN> FileInfo(file);<BR>    <SPAN class=kwrd>if</SPAN>(!fi.Exists)<BR>    {<BR>        FileStream fs = fi.Create();<BR>        StreamWriter sr = <SPAN class=kwrd>new</SPAN></FONT><FONT color=#000000> StreamWriter(fs);<BR>        sr.Write(DEFAULT_SETTING_FILE);<BR>        sr.Close();<BR>    }<BR>}</FONT></SPAN></PRE><PRE class=csharpcode><SPAN class=rem></SPAN>There's a lot of new Settings functionality build into .NET 2.0, but for our needs a simple XML file loaded into an <B>XmlDocument</B> was easy and very few lines of code. Each to his or her own. The number one thing to get out of this snippet is that your application should operate on the "Principle of Least Surprise." That means it shouldn't do, or need to do, anything that surprises the user. It should just work, and if it doesn't have something available, it should make it. In our example, it's reasonable for the user to assume they have their own settings, so we put our settings in the C:\documents and settings\&lt;username&gt;\Application Data folder that we retrieved by using </PRE><PRE><CODE></CODE></PRE><PRE class=csharpcode>System.Environment.GetFolderPath(System.Environment.SpecialFolder.ApplicationData)<BR></PRE>
<STYLE type=text/css>.csharpcode {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	MARGIN: 0em
}
.csharpcode .rem {
	COLOR: #008000
}
.csharpcode .kwrd {
	COLOR: #0000ff
}
.csharpcode .str {
	COLOR: #006080
}
.csharpcode .op {
	COLOR: #0000c0
}
.csharpcode .preproc {
	COLOR: #cc6633
}
.csharpcode .asp {
	BACKGROUND-COLOR: #ffff00
}
.csharpcode .html {
	COLOR: #800000
}
.csharpcode .attr {
	COLOR: #ff0000
}
.csharpcode .alt {
	MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4
}
.csharpcode .lnum {
	COLOR: #606060
}
</STYLE>

<P>and we create the folder if it's not there, as well as a new settings file 
with reasonable defaults if one is missing. It's little things like this that 
will keep your users happy and you off the support phone. </P>
<P><IMG alt="" 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/theapp.gif" 
border=0 
mce_src="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/theapp.gif"> 
</P>
<H3>Extending our Application with Plugins (of all languges!)</H3>
<P>Creating applications is fun, but extending applications is the most fun of 
all. This application is just begging to be extended. Our application is 
listening for key fob activity via the <B>PresenceManager</B>, which will send 
an event when it detects activity from our USB receiver. Now we want the 
application to announce these "presence events" to any one who cares to 
listen—that means all of us. </P><PRE><CODE></CODE></PRE><PRE class=csharpcode><SPAN class=kwrd>public</SPAN> <SPAN class=kwrd>void</SPAN> HandlePresenceNotification(PresenceNotificationEventArgs e)<BR>{<BR>    <SPAN class=kwrd>foreach</SPAN>(Plugin plugin <SPAN class=kwrd>in</SPAN> Plugins)<BR>    {<BR>        <SPAN class=kwrd>if</SPAN>(plugin.Enabled)<BR>        {<BR>            plugin.Worker.HandlePresenceNotification(e);<BR>        }<BR>    }<BR>}</PRE>
<STYLE type=text/css>.csharpcode {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	MARGIN: 0em
}
.csharpcode .rem {
	COLOR: #008000
}
.csharpcode .kwrd {
	COLOR: #0000ff
}
.csharpcode .str {
	COLOR: #006080
}
.csharpcode .op {
	COLOR: #0000c0
}
.csharpcode .preproc {
	COLOR: #cc6633
}
.csharpcode .asp {
	BACKGROUND-COLOR: #ffff00
}
.csharpcode .html {
	COLOR: #800000
}
.csharpcode .attr {
	COLOR: #ff0000
}
.csharpcode .alt {
	MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4
}
.csharpcode .lnum {
	COLOR: #606060
}
</STYLE>
To create a plugin, we create a new project from within Visual Studio. This time 
we'll use Visual Basic. We'll create a plugin that will put a message in the 
Windows Event Log everytime a KeyFob message is received. This will be useful 
not only for auditing, but debugging. It will also provide a record of anyone 
else wearing a KeyFob who might walk by my desk. 
<P>Every plugin will include a reference to our UsbSecurity.Core assembly. Note 
that even though the Core assembly is written in C#, it can be utilized by any 
.NET language like VB. Our UsbSecurity.Core assembly includes a base class that 
plugins must derive from called <B>PresencePluginBase</B>. If we look at 
<B>PresencePluginBase</B> in the Object Browser we can see that it provides us 
with a number of virtual methods like <B>HandlePresenceNotification</B> and 
<B>WorkstationLocked</B> that we can take advantage of. </P>
<P><A 
href="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/pluginbaseL.gif" 
mce_href="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/pluginbaseL.gif"><IMG 
alt="Click here for larger image" 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/pluginbase.gif" 
border=0 
mce_src="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/pluginbase.gif"></A> 
</P>
<P><B>(click image to zoom)</B> </P>
<P>We'll start by deriving our class from PresensePluginBase after adding a 
reference to UsbWireless.Core. We also import the System.Diagnostics namespace 
so we can use the EventLog class from the BCL. </P><PRE><CODE></CODE></PRE><PRE class=csharpcode><SPAN class=kwrd>Imports</SPAN> System<BR><SPAN class=kwrd>Imports</SPAN> UsbWirelessSecurity<BR><SPAN class=kwrd>Imports</SPAN> System.Text<BR><SPAN class=kwrd>Imports</SPAN> System.Diagnostics<BR> <BR><SPAN class=kwrd>Namespace</SPAN> DefaultPlugins<BR> <BR>    <SPAN class=rem>'When the host exe finds us, point them to our Configurator!</SPAN>
    &lt;PresencePluginConfigurator(<SPAN class=str>"Event Logging Plugin"</SPAN>)&gt; _<BR>    <SPAN class=kwrd>Class</SPAN> EventLoggerPlugin<BR>        <SPAN class=kwrd>Inherits</SPAN> PresencePluginBase<BR> <BR>    <SPAN class=kwrd>End</SPAN> <SPAN class=kwrd>Class</SPAN>
<SPAN class=kwrd>End</SPAN> Namespace</PRE>
<STYLE type=text/css>.csharpcode {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	MARGIN: 0em
}
.csharpcode .rem {
	COLOR: #008000
}
.csharpcode .kwrd {
	COLOR: #0000ff
}
.csharpcode .str {
	COLOR: #006080
}
.csharpcode .op {
	COLOR: #0000c0
}
.csharpcode .preproc {
	COLOR: #cc6633
}
.csharpcode .asp {
	BACKGROUND-COLOR: #ffff00
}
.csharpcode .html {
	COLOR: #800000
}
.csharpcode .attr {
	COLOR: #ff0000
}
.csharpcode .alt {
	MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4
}
.csharpcode .lnum {
	COLOR: #606060
}
</STYLE>
In addition to a base class for plugins, we require a custom attribute to be 
placed on each plugin class. Since each plugin will appear in a ListBox in our 
Application's UI, we'd like to know what the plugin developer wants displayed. A 
custom attribute is an easy way for the plugin developer to add a "post-it note" 
in their code to let us know additional information. Note the 
<CODE>&lt;PresencePluginConfigurator("Event Logging Plugin"&gt;</CODE> attribute 
in the VB code above. 
<P>Next we'll override each of the virtual methods from 
<B>PresencePluginBase</B> and log the details of each message to the EventLog. 
</P><PRE><CODE></CODE></PRE><PRE class=csharpcode><SPAN class=kwrd>
<PRE class=csharpcode><FONT color=#000000><SPAN class=kwrd>Imports</SPAN> System<BR><SPAN class=kwrd>Imports</SPAN> UsbWirelessSecurity<BR><SPAN class=kwrd>Imports</SPAN> System.Text<BR><SPAN class=kwrd>Imports</SPAN> System.Runtime.InteropServices<BR> <BR><SPAN class=kwrd>Namespace</SPAN> DefaultPlugins<BR> <BR>    <SPAN class=rem>'When the host exe finds us, point them to our Configurator!</SPAN>
    &lt;PresencePluginConfigurator(<SPAN class=str>"Event Logging Plugin"</SPAN>)&gt; _<BR>    <SPAN class=kwrd>Class</SPAN> EventLoggerPlugin<BR>        <SPAN class=kwrd>Inherits</SPAN> PresencePluginBase<BR> <BR>        <SPAN class=kwrd>Dim</SPAN> logName <SPAN class=kwrd>As</SPAN> <SPAN class=kwrd>String</SPAN> = <SPAN class=str>"USB Wireless Security"</SPAN>
 
        <SPAN class=kwrd>Public</SPAN> <SPAN class=kwrd>Overrides</SPAN> <SPAN class=kwrd>Sub</SPAN> HandleMessage(<SPAN class=kwrd>ByVal</SPAN> m <SPAN class=kwrd>As</SPAN> <BR>            UsbWirelessSecurity.KeyFobMessage)<BR>            <SPAN class=kwrd>MyBase</SPAN>.HandleMessage(m)<BR> <BR>            <SPAN class=kwrd>If</SPAN> (<SPAN class=kwrd>Not</SPAN> m.MessageType = KeyFobMessageType.Heartbeat) <SPAN class=kwrd>Then</SPAN>
                Using aLog <SPAN class=kwrd>As</SPAN> <SPAN class=kwrd>New</SPAN> EventLog(logName)<BR>                aLog.Source = logName<BR>                aLog.WriteEntry( _ <BR>                     <SPAN class=kwrd>String</SPAN>.Format(<SPAN class=str>"Message Received: Device {0} reports {1}."</SPAN>, _ <BR>                     m.SerialNumber, m.MessageType.ToString()))<BR>                <SPAN class=kwrd>End</SPAN> Using<BR>            <SPAN class=kwrd>End</SPAN> <SPAN class=kwrd>If</SPAN>
        <SPAN class=kwrd>End</SPAN> <SPAN class=kwrd>Sub</SPAN>
 
        <SPAN class=kwrd>Public</SPAN> <SPAN class=kwrd>Overrides</SPAN> <SPAN class=kwrd>Sub</SPAN> WorkstationLocked()<BR>            <SPAN class=kwrd>MyBase</SPAN>.WorkstationLocked()<BR>            Using aLog <SPAN class=kwrd>As</SPAN> <SPAN class=kwrd>New</SPAN> EventLog(logName)<BR>            aLog.Source = logName<BR>            aLog.WriteEntry(<SPAN class=str>"Workstation Locked"</SPAN>)<BR>            <SPAN class=kwrd>End</SPAN> Using<BR>        <SPAN class=kwrd>End</SPAN> <SPAN class=kwrd>Sub</SPAN>
 
        <SPAN class=kwrd>Public</SPAN> <SPAN class=kwrd>Overrides</SPAN> <SPAN class=kwrd>Sub</SPAN> WorkstationUnlocked()<BR>            <SPAN class=kwrd>MyBase</SPAN>.WorkstationUnlocked()<BR>            Using aLog <SPAN class=kwrd>As</SPAN> <SPAN class=kwrd>New</SPAN> EventLog(logName)<BR>            aLog.Source = logName<BR>            aLog.WriteEntry(<SPAN class=str>"Workstation Unlocked"</SPAN>)<BR>            <SPAN class=kwrd>End</SPAN> Using<BR>        <SPAN class=kwrd>End</SPAN> <SPAN class=kwrd>Sub</SPAN>
 
        <SPAN class=kwrd>Public</SPAN> <SPAN class=kwrd>Overrides</SPAN> <SPAN class=kwrd>Sub</SPAN> HandlePresenceNotification(<SPAN class=kwrd>ByVal</SPAN> e <SPAN class=kwrd>As</SPAN> <BR>           UsbWirelessSecurity.PresenceNotificationEventArgs)<BR>            <SPAN class=kwrd>MyBase</SPAN>.HandlePresenceNotification(e)<BR> <BR>            <SPAN class=kwrd>If</SPAN> (<SPAN class=kwrd>Not</SPAN> e.NotificationType = PresenceNotificationType.Heartbeat) <SPAN class=kwrd>Then</SPAN>
                Using aLog <SPAN class=kwrd>As</SPAN> <SPAN class=kwrd>New</SPAN> EventLog(logName)<BR>                aLog.Source = logName<BR>                aLog.WriteEntry( _<BR>                     <SPAN class=kwrd>String</SPAN>.Format(<SPAN class=str>"Presence Received: Device {0} reports {1}."</SPAN>, _<BR>                     e.KeyFob.SerialNumber, e.NotificationType.ToString()))<BR>                <SPAN class=kwrd>End</SPAN> Using<BR>            <SPAN class=kwrd>End</SPAN> <SPAN class=kwrd>If</SPAN>
        <SPAN class=kwrd>End</SPAN> <SPAN class=kwrd>Sub</SPAN>
    <SPAN class=kwrd>End</SPAN> <SPAN class=kwrd>Class</SPAN>
<SPAN class=kwrd>End</SPAN></FONT> Namespace</PRE></SPAN></PRE>
<STYLE type=text/css>.csharpcode {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: consolas, "Courier New", courier, monospace; BACKGROUND-COLOR: #ffffff
}
.csharpcode PRE {
	MARGIN: 0em
}
.csharpcode .rem {
	COLOR: #008000
}
.csharpcode .kwrd {
	COLOR: #0000ff
}
.csharpcode .str {
	COLOR: #006080
}
.csharpcode .op {
	COLOR: #0000c0
}
.csharpcode .preproc {
	COLOR: #cc6633
}
.csharpcode .asp {
	BACKGROUND-COLOR: #ffff00
}
.csharpcode .html {
	COLOR: #800000
}
.csharpcode .attr {
	COLOR: #ff0000
}
.csharpcode .alt {
	MARGIN: 0em; WIDTH: 100%; BACKGROUND-COLOR: #f4f4f4
}
.csharpcode .lnum {
	COLOR: #606060
}
</STYLE>
In order to prevent the EventLog filling with a heartbeat message every 250ms, 
we ignore those messages. 
<P><A 
href="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/eventviewerL.gif" 
mce_href="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/eventviewerL.gif"><IMG 
alt="Click here for larger image" 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/eventviewer.gif" 
border=0 
mce_src="http://msdn.microsoft.com/coding4fun/images/some_assembly_required/isthatyou/eventviewer.gif"></A> 
</P>
<P><B>(click image to zoom)</B> </P>
<H3>Conclusion</H3>
<P>With a clean hardware abstraction layer and a plugin architecture, you can 
enable your code-savvy users to extend your application with new functionality. 
Here's some ideas that we've been kicking around to extend the USB Wireless 
Security Application. Bryan and I hope that folks will take up the challenge and 
begin to exploit this great little device using Visual Studio. </P>
<UL>
  <LI>Send an email or SMS when the device leaves or returns 
  <LI>Start the default screensaver 
  <LI>Save all your files 
  <LI>Start Defragmenting or start Drive Cleanup 
  <LI>Set Skype to "Away" when you leave 
  <LI>Stop playing all music applications 
  <LI>Create a centralized Web Service that each system calls when it sees a key 
  fob to create a companywide "presence notification service."</LI></UL>
<P>Enjoy expanding on the existing project and remember not to fear the words 
"Some Assembly Required!" </P>
<HR>
Big thanks to Bryan Batchelder for the original idea and for the amazing work on 
the hardware abstraction layer to get the USB key fob to be heard from .NET! 
<DIV class=entryviewfooter>
<DIV><SPAN id=ctl00___ctl00___ctl01___Entry___InlineTagEditorPanel>Filed under: 
<A href="http://blogs.msdn.com/coding4fun/archive/tags/hardware/default.aspx" 
rel=tag>hardware</A>, <A 
href="http://blogs.msdn.com/coding4fun/archive/tags/hardwarehacks/default.aspx" 
rel=tag>hardwarehacks</A></SPAN><INPUT 
id=ctl00___ctl00___ctl01___Entry___InlineTagEditorPanel_State type=hidden 
value=nochange 
name=ctl00$_$ctl00$_$ctl01$_$Entry$_$InlineTagEditorPanel></DIV></DIV></DIV>
<DIV class=subscriptions>
<H4 class=contentsubheading>Comment Notification</H4>
<P>If you would like to receive an email when updates are made to this post, 
please register <A id=ctl00___ctl00___ctl01___DetailedSubBar___RegisterLink 
href="http://blogs.msdn.com/user/CreateUser.aspx?ReturnUrl=/coding4fun/archive/2006/10/31/912422.aspx">here</A> 
</P>
<P>Subscribe to this post's comments using <A 
id=ctl00___ctl00___ctl01___DetailedSubBar___CommentRssLink 
href="http://blogs.msdn.com/coding4fun/commentrss.aspx?PostID=912422">RSS</A> 
</P></DIV>
<H4 class=contentsubheading>Comments</H4>
<DL class=comments>
  <DT class=""><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl01_PermaLink 
  title=permalink 
  href="http://blogs.msdn.com/coding4fun/archive/2006/10/31/912422.aspx#2781188">#</A> 
  <A id=ctl00___ctl00___ctl01___Comments___Comments_ctl01_NameLink 
  title="jacky xu" href="http://exu7036@sina.com/">jacky xu</A> said on May 21, 
  2007 11:08 PM: 
  <DD class="">
  <P>The Project is so cool ,I use it for reference. thanks.</P>
  <P>If you have update ,Please send to &nbsp;my Email:</P>
  <P>exu7036@sina.com</P>
  <DT class=""><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl02_PermaLink 
  title=permalink 
  href="http://blogs.msdn.com/coding4fun/archive/2006/10/31/912422.aspx#3192565">#</A> 
  <A id=ctl00___ctl00___ctl01___Comments___Comments_ctl02_NameLink 
  title=CricketLover>CricketLover</A> said on June 9, 2007 6:57 PM: 
  <DD class="">
  <P>I'll try this with my USB game pad!!!</P>
  <DT class=""><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl03_PermaLink 
  title=permalink 
  href="http://blogs.msdn.com/coding4fun/archive/2006/10/31/912422.aspx#3441478">#</A> 
  <A id=ctl00___ctl00___ctl01___Comments___Comments_ctl03_NameLink 
  title=Phil>Phil</A> said on June 21, 2007 6:03 AM: 
  <DD class="">
  <P>Top Coding by all u guys, I also purchased one of these and thought nice 
  device, REALLY POOR Software..</P>
  <DT class=""><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl04_PermaLink 
  title=permalink 
  href="http://blogs.msdn.com/coding4fun/archive/2006/10/31/912422.aspx#5773218">#</A> 
  <A id=ctl00___ctl00___ctl01___Comments___Comments_ctl04_NameLink 
  title=TrackBack 
  href="http://www.hanselman.com/blog/ScreencastWritingManagedNETPluginsForTheOptimusMiniThreeKeyboard.aspx" 
  rel=nofollow>Scott Hanselman's Computer Zen - Screencast: Writing Managed .NET 
  Plugins for the Optimus Mini Three Keyboard</A> said on October 29, 2007 8:04 
  PM: 
  <DD class="">
  <P>PingBack from <A 
  href="http://www.hanselman.com/blog/ScreencastWritingManagedNETPluginsForTheOptimusMiniThreeKeyboard.aspx" 
  target=_new 
  rel=nofollow>http://www.hanselman.com/blog/ScreencastWritingManagedNETPluginsForTheOptimusMiniThreeKeyboard.aspx</A></P>
  <DT class=""><A id=ctl00___ctl00___ctl01___Comments___Comments_ctl05_PermaLink 
  title=permalink 
  href="http://blogs.msdn.com/coding4fun/archive/2006/10/31/912422.aspx#6681291">#</A> 
  <A id=ctl00___ctl00___ctl01___Comments___Comments_ctl05_NameLink 
  title=Paul>Paul</A> said on December 6, 2007 11:04 AM: 
  <DD class="">
  <P>Great Article! &nbsp; I was wondering if anyone has ever connected 
  (browsed) a digital camera that is connected to a USB Port?</P>
  <P>I know software exists that does so, such as Kodak EasyShare, but it can 
  really hog your memory.</P>
  <P>It looks like this article will provide help, but any additional help would 
  be appreciated.</P></DD></DL>
<H4 class=contentsubheading>Leave a Comment</H4>
<DL class=commentform>
  <DT id=ctl00___ctl00___ctl01___form___NameTitle><LABEL 
  for=ctl00___ctl00___ctl01___form___tbName>Name</LABEL> 
  <EM>(required)</EM><SPAN 
  id=ctl00___ctl00___ctl01___form___Requiredfieldvalidator2 
  style="VISIBILITY: hidden; COLOR: red">*</SPAN>
  <DD id=ctl00___ctl00___ctl01___form___NameDesc><INPUT class=textline 
  id=ctl00___ctl00___ctl01___form___tbName 
  name=ctl00$_$ctl00$_$ctl01$_$form$_$tbName> 
  <DT><LABEL for=ctl00___ctl00___ctl01___form___tbUrl>Your URL</LABEL> 
  <EM>(optional</EM>) 
  <DD><INPUT class=textline id=ctl00___ctl00___ctl01___form___tbUrl 
  name=ctl00$_$ctl00$_$ctl01$_$form$_$tbUrl> 
  <DT><LABEL for=ctl00___ctl00___ctl01___form___tbComment>Comments</LABEL> 
  <EM>(required)</EM><SPAN 
  id=ctl00___ctl00___ctl01___form___Requiredfieldvalidator3 
  style="VISIBILITY: hidden; COLOR: red">*</SPAN> 
  <DD><TEXTAREA class=textmultiline id=ctl00___ctl00___ctl01___form___tbComment name=ctl00$_$ctl00$_$ctl01$_$form$_$tbComment rows=5 cols=25></TEXTAREA> 

  <DT><INPUT id=ctl00___ctl00___ctl01___form___chkRemember type=checkbox 
  name=ctl00$_$ctl00$_$ctl01$_$form$_$chkRemember><LABEL 
  for=ctl00___ctl00___ctl01___form___chkRemember>Remember Me?</LABEL> 
  <DT><INPUT id=ctl00___ctl00___ctl01___form___btnSubmit onclick='javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("ctl00$_$ctl00$_$ctl01$_$form$_$btnSubmit", "", true, "", "", false, false))' type=submit value=Submit name=ctl00$_$ctl00$_$ctl01$_$form$_$btnSubmit> 
  </DT></DL></DIV></DIV>
<DIV id=subcontent-a>
<DIV id=SearchSideBar>
<H4 class="sideheader notop">Search</H4><INPUT class=searchbox 
id=ctl00___ctl00___BlogSideBar1___ws___SearchBox 
onkeydown=KeyDownHandlerctl00___ctl00___BlogSideBar1___ws___SearchButton(event); 
name=ctl00$_$ctl00$_$BlogSideBar1$_$ws$_$SearchBox><A class=searchbutton 
id=ctl00___ctl00___BlogSideBar1___ws___SearchButton 
href="javascript:__doPostBack('ctl00$_$ctl00$_$BlogSideBar1$_$ws$_$SearchButton','')">Go</A> 
</DIV>
<DIV id=TasksSideBar></DIV>
<DIV id=BlogLinksSideBar>
<H4 class=sideheader>This Blog</H4>
<UL class=sidelist>
  <LI><A id=ctl00___ctl00___BlogSideBar1___wl___home 
  href="http://blogs.msdn.com/coding4fun/default.aspx">Home</A> 
  <LI><A id=ctl00___ctl00___BlogSideBar1___wl___Contactlink1 
  href="http://blogs.msdn.com/coding4fun/contact.aspx">Email</A> </LI></UL></DIV>
<DIV id=TagSideBar>
<H4 class=sideheader>Tags</H4>
<UL class=tagcloud>
  <LI class=tag6><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/about/default.aspx" 
  rel=tag>about</A> 
  <LI class=tag5><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/april+fools+day/default.aspx" 
  rel=tag>april fools day</A> 
  <LI class=tag2><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/arcade/default.aspx" 
  rel=tag>arcade</A> 
  <LI class=tag4><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/audiovideo/default.aspx" 
  rel=tag>audiovideo</A> 
  <LI class=tag1><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/c4fnews/default.aspx" 
  rel=tag>c4fnews</A> 
  <LI class=tag6><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/card+and+board+games/default.aspx" 
  rel=tag>card and board games</A> 
  <LI class=tag6><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/eventorwebcast/default.aspx" 
  rel=tag>eventorwebcast</A> 
  <LI class=tag2><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/events/default.aspx" 
  rel=tag>events</A> 
  <LI class=tag1><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/gaming/default.aspx" 
  rel=tag>gaming</A> 
  <LI class=tag5><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/halloween/default.aspx" 
  rel=tag>halloween</A> 
  <LI class=tag1><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/hardware/default.aspx" 
  rel=tag>hardware</A> 
  <LI class=tag5><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/hardware+miscellaneous/default.aspx" 
  rel=tag>hardware miscellaneous</A> 
  <LI class=tag2><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/hardwarehacks/default.aspx" 
  rel=tag>hardwarehacks</A> 
  <LI class=tag3><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/holiday/default.aspx" 
  rel=tag>holiday</A> 
  <LI class=tag5><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/home+automation/default.aspx" 
  rel=tag>home automation</A> 
  <LI class=tag5><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/mash+up/default.aspx" 
  rel=tag>mash up</A> 
  <LI class=tag3><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/media/default.aspx" 
  rel=tag>media</A> 
  <LI class=tag4><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/productivity/default.aspx" 
  rel=tag>productivity</A> 
  <LI class=tag5><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/puzzle/default.aspx" 
  rel=tag>puzzle</A> 
  <LI class=tag3><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/robotics/default.aspx" 
  rel=tag>robotics</A> 
  <LI class=tag6><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/role+playing/default.aspx" 
  rel=tag>role playing</A> 
  <LI class=tag6><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/starter+kit/default.aspx" 
  rel=tag>starter kit</A> 
  <LI class=tag2><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/utility/default.aspx" 
  rel=tag>utility</A> 
  <LI class=tag2><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/web/default.aspx" 
  rel=tag>web</A> 
  <LI class=tag4><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/web+miscellaneous/default.aspx" 
  rel=tag>web miscellaneous</A> 
  <LI class=tag3><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/web+services/default.aspx" 
  rel=tag>web services</A> 
  <LI class=tag1><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/windows/default.aspx" 
  rel=tag>windows</A> 
  <LI class=tag3><A 
  href="http://blogs.msdn.com/coding4fun/archive/tags/windows+miscellaneous/default.aspx" 
  rel=tag>windows miscellaneous</A> </LI></UL></DIV>
<DIV id=ArchiveSideBar>
<H4 class=sideheader>Archives</H4>
<UL class=sidelist>
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/12.aspx">December 
  2007 (4)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/11.aspx">November 
  2007 (15)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/10.aspx">October 
  2007 (14)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/09.aspx">September 
  2007 (14)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/08.aspx">August 
  2007 (13)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/07.aspx">July 2007 
  (16)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/06.aspx">June 2007 
  (9)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/05.aspx">May 2007 
  (12)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/04.aspx">April 2007 
  (21)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/03.aspx">March 2007 
  (25)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/02.aspx">February 
  2007 (26)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2007/01.aspx">January 
  2007 (19)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2006/12.aspx">December 
  2006 (38)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2006/11.aspx">November 
  2006 (77)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2006/10.aspx">October 
  2006 (60)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2006/04.aspx">April 2006 
  (2)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2006/03.aspx">March 2006 
  (5)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2006/02.aspx">February 
  2006 (2)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2006/01.aspx">January 
  2006 (1)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2005/12.aspx">December 
  2005 (1)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2005/10.aspx">October 
  2005 (1)</A> 
  <LI><A href="http://blogs.msdn.com/coding4fun/archive/2005/04.aspx">April 2005 
  (2)</A> </LI></UL></DIV>
<DIV id=LinkSideBar></DIV>
<DIV id=SubscriptionsSideBar>
<H4 class=sideheader>Syndication</H4>
<UL class="sidelist rss">
  <LI><A id=ctl00___ctl00___BlogSideBar1___bs___rss 
  href="http://blogs.msdn.com/coding4fun/rss.xml">RSS 2.0</A> 
  <LI><A id=ctl00___ctl00___BlogSideBar1___bs___atom 
  href="http://blogs.msdn.com/coding4fun/atom.xml">Atom 1.0</A> </LI></UL></DIV>
<DIV id=NewsSideBar>
<DIV class=sidebox>
<SCRIPT 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/prototype.js" 
type=text/javascript> </SCRIPT>

<SCRIPT 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/menu.js" 
type=text/javascript> </SCRIPT>
</DIV></DIV></DIV>
<DIV id=footer></DIV></DIV>
<SCRIPT type=text/javascript>
<!--
var Page_Validators =  new Array(document.getElementById("ctl00___ctl00___ctl01___form___Requiredfieldvalidator2"), document.getElementById("ctl00___ctl00___ctl01___form___Requiredfieldvalidator3"));
// -->
</SCRIPT>

<SCRIPT type=text/javascript>
<!--
var ctl00___ctl00___ctl01___form___Requiredfieldvalidator2 = document.all ? document.all["ctl00___ctl00___ctl01___form___Requiredfieldvalidator2"] : document.getElementById("ctl00___ctl00___ctl01___form___Requiredfieldvalidator2");
ctl00___ctl00___ctl01___form___Requiredfieldvalidator2.controltovalidate = "ctl00___ctl00___ctl01___form___tbName";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator2.errormessage = "*";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator2.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator2.initialvalue = "";
var ctl00___ctl00___ctl01___form___Requiredfieldvalidator3 = document.all ? document.all["ctl00___ctl00___ctl01___form___Requiredfieldvalidator3"] : document.getElementById("ctl00___ctl00___ctl01___form___Requiredfieldvalidator3");
ctl00___ctl00___ctl01___form___Requiredfieldvalidator3.controltovalidate = "ctl00___ctl00___ctl01___form___tbComment";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator3.errormessage = "*";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator3.evaluationfunction = "RequiredFieldValidatorEvaluateIsValid";
ctl00___ctl00___ctl01___form___Requiredfieldvalidator3.initialvalue = "";
// -->
</SCRIPT>
<!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
<rdf:Description
rdf:about="http://blogs.msdn.com/coding4fun/archive/2006/10/31/912422.aspx"
dc:identifier="http://blogs.msdn.com/coding4fun/archive/2006/10/31/912422.aspx"
dc:title="Is that you? Writing Better Software for Cool USB Hardware"
trackback:ping="http://blogs.msdn.com/coding4fun/trackback.aspx?PostID=912422" />
</rdf:RDF>
-->
<SCRIPT type=text/javascript>
<!--
var Page_ValidationActive = false;
if (typeof(ValidatorOnLoad) == "function") {
    ValidatorOnLoad();
}

function ValidatorOnSubmit() {
    if (Page_ValidationActive) {
        return ValidatorCommonOnSubmit();
    }
    else {
        return true;
    }
}
// -->
</SCRIPT>

<SCRIPT language=javascript type=text/javascript>
<!--
function KeyDownHandlerctl00___ctl00___BlogSideBar1___ws___SearchButton(event)
{
	if (event.keyCode == 13)
	{
		event.returnValue = false;
		event.cancel = true;
     __doPostBack('ctl00$_$ctl00$_$BlogSideBar1$_$ws$_$SearchButton','')	}
}

//-->
</SCRIPT>
</FORM><IMG height=0 alt="Page view tracker" 
src="Coding4Fun  Is that you Writing Better Software for Cool USB Hardware_files/trans_pixel.gif" 
width=0> </BODY></HTML>
