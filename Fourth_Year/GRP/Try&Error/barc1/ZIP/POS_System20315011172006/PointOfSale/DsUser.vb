'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsUser
    Inherits DataSet
    
    Private tableUser_Login As User_LoginDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("User Login")) Is Nothing) Then
                Me.Tables.Add(New User_LoginDataTable(ds.Tables("User Login")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property User_Login As User_LoginDataTable
        Get
            Return Me.tableUser_Login
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsUser = CType(MyBase.Clone,DsUser)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("User Login")) Is Nothing) Then
            Me.Tables.Add(New User_LoginDataTable(ds.Tables("User Login")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableUser_Login = CType(Me.Tables("User Login"),User_LoginDataTable)
        If (Not (Me.tableUser_Login) Is Nothing) Then
            Me.tableUser_Login.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsUser"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsUser.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableUser_Login = New User_LoginDataTable
        Me.Tables.Add(Me.tableUser_Login)
    End Sub
    
    Private Function ShouldSerializeUser_Login() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub User_LoginRowChangeEventHandler(ByVal sender As Object, ByVal e As User_LoginRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class User_LoginDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPassword As DataColumn
        
        Private columnUsername As DataColumn
        
        Friend Sub New()
            MyBase.New("User Login")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PasswordColumn As DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        Friend ReadOnly Property UsernameColumn As DataColumn
            Get
                Return Me.columnUsername
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As User_LoginRow
            Get
                Return CType(Me.Rows(index),User_LoginRow)
            End Get
        End Property
        
        Public Event User_LoginRowChanged As User_LoginRowChangeEventHandler
        
        Public Event User_LoginRowChanging As User_LoginRowChangeEventHandler
        
        Public Event User_LoginRowDeleted As User_LoginRowChangeEventHandler
        
        Public Event User_LoginRowDeleting As User_LoginRowChangeEventHandler
        
        Public Overloads Sub AddUser_LoginRow(ByVal row As User_LoginRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUser_LoginRow(ByVal Password As String, ByVal Username As String) As User_LoginRow
            Dim rowUser_LoginRow As User_LoginRow = CType(Me.NewRow,User_LoginRow)
            rowUser_LoginRow.ItemArray = New Object() {Password, Username}
            Me.Rows.Add(rowUser_LoginRow)
            Return rowUser_LoginRow
        End Function
        
        Public Function FindByUsername(ByVal Username As String) As User_LoginRow
            Return CType(Me.Rows.Find(New Object() {Username}),User_LoginRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As User_LoginDataTable = CType(MyBase.Clone,User_LoginDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New User_LoginDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPassword = Me.Columns("Password")
            Me.columnUsername = Me.Columns("Username")
        End Sub
        
        Private Sub InitClass()
            Me.columnPassword = New DataColumn("Password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPassword)
            Me.columnUsername = New DataColumn("Username", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsername)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnUsername}, true))
            Me.columnUsername.AllowDBNull = false
            Me.columnUsername.Unique = true
        End Sub
        
        Public Function NewUser_LoginRow() As User_LoginRow
            Return CType(Me.NewRow,User_LoginRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New User_LoginRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(User_LoginRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.User_LoginRowChangedEvent) Is Nothing) Then
                RaiseEvent User_LoginRowChanged(Me, New User_LoginRowChangeEvent(CType(e.Row,User_LoginRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.User_LoginRowChangingEvent) Is Nothing) Then
                RaiseEvent User_LoginRowChanging(Me, New User_LoginRowChangeEvent(CType(e.Row,User_LoginRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.User_LoginRowDeletedEvent) Is Nothing) Then
                RaiseEvent User_LoginRowDeleted(Me, New User_LoginRowChangeEvent(CType(e.Row,User_LoginRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.User_LoginRowDeletingEvent) Is Nothing) Then
                RaiseEvent User_LoginRowDeleting(Me, New User_LoginRowChangeEvent(CType(e.Row,User_LoginRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUser_LoginRow(ByVal row As User_LoginRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class User_LoginRow
        Inherits DataRow
        
        Private tableUser_Login As User_LoginDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUser_Login = CType(Me.Table,User_LoginDataTable)
        End Sub
        
        Public Property Password As String
            Get
                Try 
                    Return CType(Me(Me.tableUser_Login.PasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUser_Login.PasswordColumn) = value
            End Set
        End Property
        
        Public Property Username As String
            Get
                Return CType(Me(Me.tableUser_Login.UsernameColumn),String)
            End Get
            Set
                Me(Me.tableUser_Login.UsernameColumn) = value
            End Set
        End Property
        
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tableUser_Login.PasswordColumn)
        End Function
        
        Public Sub SetPasswordNull()
            Me(Me.tableUser_Login.PasswordColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class User_LoginRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As User_LoginRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As User_LoginRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As User_LoginRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
