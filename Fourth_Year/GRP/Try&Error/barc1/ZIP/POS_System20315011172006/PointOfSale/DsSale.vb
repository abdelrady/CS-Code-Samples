'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsSale
    Inherits DataSet
    
    Private tableSaleByItem As SaleByItemDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SaleByItem")) Is Nothing) Then
                Me.Tables.Add(New SaleByItemDataTable(ds.Tables("SaleByItem")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SaleByItem As SaleByItemDataTable
        Get
            Return Me.tableSaleByItem
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsSale = CType(MyBase.Clone,DsSale)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("SaleByItem")) Is Nothing) Then
            Me.Tables.Add(New SaleByItemDataTable(ds.Tables("SaleByItem")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableSaleByItem = CType(Me.Tables("SaleByItem"),SaleByItemDataTable)
        If (Not (Me.tableSaleByItem) Is Nothing) Then
            Me.tableSaleByItem.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsSale"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsSale.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableSaleByItem = New SaleByItemDataTable
        Me.Tables.Add(Me.tableSaleByItem)
    End Sub
    
    Private Function ShouldSerializeSaleByItem() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub SaleByItemRowChangeEventHandler(ByVal sender As Object, ByVal e As SaleByItemRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SaleByItemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column_Date As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnItemCode As DataColumn
        
        Private columnQty As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnUnitPrice As DataColumn
        
        Friend Sub New()
            MyBase.New("SaleByItem")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property _DateColumn As DataColumn
            Get
                Return Me.column_Date
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property ItemCodeColumn As DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        Friend ReadOnly Property QtyColumn As DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property UnitPriceColumn As DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SaleByItemRow
            Get
                Return CType(Me.Rows(index),SaleByItemRow)
            End Get
        End Property
        
        Public Event SaleByItemRowChanged As SaleByItemRowChangeEventHandler
        
        Public Event SaleByItemRowChanging As SaleByItemRowChangeEventHandler
        
        Public Event SaleByItemRowDeleted As SaleByItemRowChangeEventHandler
        
        Public Event SaleByItemRowDeleting As SaleByItemRowChangeEventHandler
        
        Public Overloads Sub AddSaleByItemRow(ByVal row As SaleByItemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSaleByItemRow(ByVal _Date As Date, ByVal Description As String, ByVal ItemCode As String, ByVal Qty As Integer, ByVal Total As Decimal, ByVal UnitPrice As Decimal) As SaleByItemRow
            Dim rowSaleByItemRow As SaleByItemRow = CType(Me.NewRow,SaleByItemRow)
            rowSaleByItemRow.ItemArray = New Object() {_Date, Description, ItemCode, Qty, Total, UnitPrice}
            Me.Rows.Add(rowSaleByItemRow)
            Return rowSaleByItemRow
        End Function
        
        Public Function FindByItemCode(ByVal ItemCode As String) As SaleByItemRow
            Return CType(Me.Rows.Find(New Object() {ItemCode}),SaleByItemRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SaleByItemDataTable = CType(MyBase.Clone,SaleByItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SaleByItemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column_Date = Me.Columns("Date")
            Me.columnDescription = Me.Columns("Description")
            Me.columnItemCode = Me.Columns("ItemCode")
            Me.columnQty = Me.Columns("Qty")
            Me.columnTotal = Me.Columns("Total")
            Me.columnUnitPrice = Me.Columns("UnitPrice")
        End Sub
        
        Private Sub InitClass()
            Me.column_Date = New DataColumn("Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Date)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnItemCode = New DataColumn("ItemCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCode)
            Me.columnQty = New DataColumn("Qty", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQty)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnUnitPrice = New DataColumn("UnitPrice", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitPrice)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnItemCode}, true))
            Me.columnItemCode.AllowDBNull = false
            Me.columnItemCode.Unique = true
        End Sub
        
        Public Function NewSaleByItemRow() As SaleByItemRow
            Return CType(Me.NewRow,SaleByItemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SaleByItemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SaleByItemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SaleByItemRowChangedEvent) Is Nothing) Then
                RaiseEvent SaleByItemRowChanged(Me, New SaleByItemRowChangeEvent(CType(e.Row,SaleByItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SaleByItemRowChangingEvent) Is Nothing) Then
                RaiseEvent SaleByItemRowChanging(Me, New SaleByItemRowChangeEvent(CType(e.Row,SaleByItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SaleByItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent SaleByItemRowDeleted(Me, New SaleByItemRowChangeEvent(CType(e.Row,SaleByItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SaleByItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent SaleByItemRowDeleting(Me, New SaleByItemRowChangeEvent(CType(e.Row,SaleByItemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSaleByItemRow(ByVal row As SaleByItemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SaleByItemRow
        Inherits DataRow
        
        Private tableSaleByItem As SaleByItemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSaleByItem = CType(Me.Table,SaleByItemDataTable)
        End Sub
        
        Public Property _Date As Date
            Get
                Try 
                    Return CType(Me(Me.tableSaleByItem._DateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleByItem._DateColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableSaleByItem.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleByItem.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property ItemCode As String
            Get
                Return CType(Me(Me.tableSaleByItem.ItemCodeColumn),String)
            End Get
            Set
                Me(Me.tableSaleByItem.ItemCodeColumn) = value
            End Set
        End Property
        
        Public Property Qty As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSaleByItem.QtyColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleByItem.QtyColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaleByItem.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleByItem.TotalColumn) = value
            End Set
        End Property
        
        Public Property UnitPrice As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSaleByItem.UnitPriceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSaleByItem.UnitPriceColumn) = value
            End Set
        End Property
        
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableSaleByItem._DateColumn)
        End Function
        
        Public Sub Set_DateNull()
            Me(Me.tableSaleByItem._DateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableSaleByItem.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableSaleByItem.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableSaleByItem.QtyColumn)
        End Function
        
        Public Sub SetQtyNull()
            Me(Me.tableSaleByItem.QtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableSaleByItem.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableSaleByItem.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tableSaleByItem.UnitPriceColumn)
        End Function
        
        Public Sub SetUnitPriceNull()
            Me(Me.tableSaleByItem.UnitPriceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SaleByItemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SaleByItemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SaleByItemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SaleByItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
